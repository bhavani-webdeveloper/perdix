irf.pageCollection.factory(irf.page("demo.Demo"),
["$log", "Enrollment", "SessionStore","Files",
    function($log, Enrollment, SessionStore,Files){

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "Demo Page",
            "subTitle": "Demo Page secondary title",
            initialize: function (model, form, formCtrl) {
                $log.info("Demo Customer Page got initialized");

                model.address = model.address || {};
                model.address.streetAddress = "Stt";

                Files.getBase64DataFromFileId(
                    '482acbaf-0090-4168-adca-76aaba818d5a',
                    true
                ).then(function(base64String){
                    console.log(base64String);
                },function(err){

                });
            },
            form: [
                {
                    "type":"box",
                    "title":"Details",
                    colClass: "col-sm-12",
                    "items":[
                        {
                            key: "address.streetAddress",
                            type: "date"
                        },
                        {
                            key:"address.city",
                            type:"select",
                            titleMap:{
                                "city_A":"City A",
                                "city_B":"City B"
                            }
                        },
                        {
                            key: "phoneNumber",
                            type: "table",
                            items: [
                                "phoneNumber[].location",
                                "phoneNumber[].code",
                                "phoneNumber[].number"
                            ]
                        },
                        {
                            type: "section",
                            html: "<i>asdf</i>{{model.address.streetAddress}}"
                        }
                    ]
                },
                {
                    type: "actionbox",
                    items: [{
                        type: "submit",
                        title: "Download Dump"
                    }]
                }
            ],
            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "address": {
                        "type": "object",
                        "title":"Address",
                        "properties": {
                            "streetAddress": {
                                "type": "string",
                                "title":"Street Address"
                            },
                            "city": {
                                "type": "string",
                                "title":"City"
                            }
                        },
                        "required": [
                            "streetAddress",
                            "city"
                        ]
                    },
                    "phoneNumber": {
                        "type": "array",
                        "title":"Phone Numbers",
                        "items": {
                            "type": "object",
                            "title":"Phone#",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "title":"Location"
                                },
                                "code": {
                                    "type": "integer",
                                    "title":"Code"
                                },
                                "number":{
                                    "type":"integer",
                                    "title":"Number"
                                },
                                "boo": {
                                    "type": "boolean",
                                    "title": "Check Done?"
                                }
                            },
                            "required": [
                                "code",
                                "number"
                            ]
                        }
                    }
                },
                "required": [
                    "address",
                    "phoneNumber"
                ]
            },
            actions: {
                submit: function(model, form, formName){
                    $log.info('on submit action ....');
                }
            }
        };
    }
]);

irf.pageCollection.factory(irf.page("demo.Demo2"),
["$log", "Enrollment", "SessionStore","Files",
    function($log, Enrollment, SessionStore,Files){

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "Demo Page2",
            "subTitle": "Demo Page2 secondary title",
            initialize: function (model, form, formCtrl) {
                $log.info("Demo Customer Page2 got initialized");

                model.address = model.address || {};
                model.address.streetAddress = "Stt";

                Files.getBase64DataFromFileId(
                    '482acbaf-0090-4168-adca-76aaba818d5a',
                    true
                ).then(function(base64String){
                    console.log(base64String);
                },function(err){

                });



            },
            
            form: [
                {
                    "type":"box",
                    "title":"Details",
                    "items":[
                        "address.streetAddress",
                        {
                            key:"address.city",
                            type:"select",
                            titleMap:{
                                "city_A":"City A",
                                "city_B":"City B"
                            }

                        },
                        "phoneNumber",
                        {
                            type: "section",
                            html: "<i>asdf</i>{{model.address.streetAddress}}"
                        }
                    ]
                }

            ],
            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "address": {
                        "type": "object",
                        "title":"Address",
                        "properties": {
                            "streetAddress": {
                                "type": "string",
                                "title":"Street Address"
                            },
                            "city": {
                                "type": "string",
                                "title":"City"
                            }
                        },
                        "required": [
                            "streetAddress",
                            "city"
                        ]
                    },
                    "phoneNumber": {
                        "type": "array",
                        "title":"Phone Numbers",
                        "items": {
                            "type": "object",
                            "title":"Phone#",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "title":"Location"
                                },
                                "code": {
                                    "type": "integer",
                                    "title":"Code",
                                    "x-schema-form": {
                                        "type": "text"
                                    }
                                },
                                "number":{
                                    "type":"integer",
                                    "title":"Number"
                                }
                            },
                            "required": [
                                "code",
                                "number"
                            ]
                        }
                    }
                },
                "required": [
                    "address",
                    "phoneNumber"
                ]
            },
            actions: {
                submit: function(model, form, formName){
                }
            }
        };
    }
]);

irf.pageCollection.factory(irf.page("UserProfile"),
["$log", "$q", "SessionStore", "languages", "$translate", "irfProgressMessage",
	"irfStorageService", "irfElementsConfig","PageHelper", "irfSimpleModal", "irfTranslateLoader",
function($log, $q, SessionStore, languages, $translate, PM,
	irfStorageService, irfElementsConfig,PageHelper, irfSimpleModal, irfTranslateLoader) {

	var languageTitleMap = [];
	_.each(languages, function(v, k){
		languageTitleMap.push({value:v.code, name:v.titleEnglish + ' - ' + v.titleLanguage});
	});

	var dateFormats = ["YYYY-DD-MM", "DD-MM-YYYY", "DD-MMM-YYYY", "Do MMM YYYY", "dddd Do MMM YYYY"];
	var dateTitleMap = [];
	var now = moment(new Date());
	_.each(dateFormats, function(v,k){
		dateTitleMap.push({name: now.format(v) + " | " + v, value: v});
	});

	return {
		"id": "UserProfile",
		"type": "schema-form",
		"name": "UserProfile",
		"title": "USER_PROFILE",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			$log.info("I got initialized");
			var m = irfStorageService.getJSON(formCtrl.$name, model.profile.login);
			if (m && m.profile && m.settings) {
				model.profile = m.profile;
				model.settings = m.settings;
			}
		},
		modelPromise: function(pageId) {
			var deferred = $q.defer();
			if (pageId === SessionStore.session.login) {
				deferred.resolve({profile:SessionStore.session});
			} else {
				deferred.reject({error:"Different User"});
			}
			return deferred.promise;
		},
		form: [{
			type: "box",
			title: "PROFILE_INFORMATION",
			items: [
				{
					key: "profile.login",
					readonly: true
				},
				{
					key: "profile.firstName",
					readonly: true
				},
				{
					title: "EDIT_FAVORITES",
					type: "button",
					onClick: "actions.editFavorites(model, formCtrl, form)"
				}
			]
		},{
			type: "box",
			title: "PROFILE_SETTINGS",
			items: [
				"settings.dateFormat",
				"settings.language",
				"settings.loginMode",
				"settings.offlinePin",
				{
					type: "fieldset",
					title: "LOGGING",
					items: [
						{
							key: "settings.consoleLog",
							onChange: function(modelValue, form, model) {
								if (!modelValue) {
									model.settings.consoleLogAutoClear = false;
								}
							}
						},
						{
							key: "settings.consoleLogAutoClear",
							condition: "model.settings.consoleLog"
						},
						{
							key: "settings.consoleLogAutoClearDuration",
							condition: "model.settings.consoleLogAutoClear"
						}
					]
				}
			]
		},{
			type: "actionbox",
			items: [{
				"type": "save",
				"title": "SAVE_PROFILE_SETTINGS"
			},{
				"type":"button",
				"icon":"fa fa-refresh",
				"title":"REFRESH_CACHE",
				"onClick":"actions.refreshMasters()"
			}]
		}],
		actions: {
			refreshMasters:function(){
				PageHelper.showLoader();
				var p = [
					irfStorageService.cacheAllMaster(true,true),
					irfTranslateLoader({forceServer: true})
				];
				$q.all(p).then(function(){
					PM.pop('cache-master',"Synced Successfully.",5000);
				},function(){
					PM.pop('cache-master',"Sync Failed, Please Try Again.",5000);
				}).finally(function(){
					PageHelper.hideLoader();
					window.location.hash = '#/' + irf.HOME_PAGE.url;
					window.location.reload();
				});
			},
			preSave: function(model, formCtrl, formName) {
				var deferred = $q.defer();
				if (formCtrl.$invalid || !model.profile || model.profile.login !== SessionStore.session.login) {
					PM.pop('user-profile', 'Your form have errors. Please fix them.', 5000);
				} else {
					model.$$STORAGE_KEY$$ = model.profile.login;
					irfStorageService.putJSON(formName, model);
					$translate.use(model.settings.language);
					SessionStore.session.language = model.settings.language;
					SessionStore.profile = model.profile;
					SessionStore.settings = model.settings;
					irfElementsConfig.setDateDisplayFormat(model.settings.dateFormat);

					PM.pop('user-profile', 'Profile settings saved.', 3000);
				}
				// deferred.reject();
				return deferred.promise;
			},
			editFavorites: function(model, formCtrl, form) {
				var titleHtml = '<i class="fa fa-heart">&nbsp;</i>Choose Favorites';
				var bodyHtml = '\
<div class="row">\
	<div class="small-box bg-theme" style="cursor:pointer;">\
		<div class="inner">\
			<h3><i class="fa fa-tasks"></i></h3>\
			<p>title</p>\
		</div>\
		<div class="icon"><i class="fa fa-tasks"></i></div>\
	</div>\
</div>\
				';
				irfSimpleModal(titleHtml, bodyHtml).opened.then(function(){
					
				});
			}
		},
		schema: {
			"type": "object",
			"properties": {
				profile: {
					"type":"object",
					"properties": {
						login: {
							"title": "LOGIN",
							"type": "string"
						},
						firstName: {
							"title": "USERNAME",
							"type": "string"
						},
						lastName: {
							"title": "LASTNAME",
							"type": "string"
						}
					}
				},
				settings: {
					"type":"object",
					"properties": {
						dateFormat: {
							"title": "DATE_FORMAT",
							"type": "string",
							"default": "YYYY-DD-MM",
							"x-schema-form": {
								"type": "select",
								"titleMap": dateTitleMap
							}
						},
						language: {
							"title": "PREFERRED_LANGUAGE",
							"type": "string",
							"default": "en",
							"x-schema-form": {
								"type": "select",
								"titleMap": languageTitleMap
							}
						},
						loginMode: {
							"title": "PREFERRED_LOGIN_MODE",
							"type": "string",
							"enum": ["online", "offline"],
							"default": "online",
							"x-schema-form": {
								"type": "radios",
								"titleMap": [{
									"value": "online",
									"name": "ONLINE"
								},{
									"value": "offline",
									"name": "OFFLINE"
								}]
							}
						},
						offlinePin: {
							"title": "OFFLINE_PIN",
							"type": "string",
							"minLength": 4,
							"maxLength": 4,
							"x-schema-form": {
								"type": "password"
							}
						},
						consoleLog: {
							"title": "CONSOLE_LOG",
							"type": "boolean"
						},
						consoleLogAutoClear: {
							"title": "CONSOLE_LOG_AUTO_CLEAR",
							"type": "boolean"
						},
						consoleLogAutoClearDuration: {
							"title": "CONSOLE_LOG_AUTO_CLEAR_DURATION",
							"type": "number"
						}
					}
				}
			}
		}
	}
}]);

irf.pageCollection.factory(irf.page("bi.BIReports"),
["$log", "BIReports", "SessionStore", "PageHelper", "$httpParamSerializer", "AuthTokenHelper",
    function($log, BIReports, SessionStore, PageHelper, $httpParamSerializer, AuthTokenHelper) {

        return {
            "type": "schema-form",
            "title": "REPORTS",
            "subTitle": "",
            initialize: function(model, form, formCtrl) {
                var self = this;
                self.form = [];
                PageHelper.showLoader();
                BIReports.reportList().$promise.then(function(resp){
                    self.formSource[0].items[0].titleMap = resp;
                    self.form = self.formSource;
                }, function(errResp){
                    PageHelper.showErrors(errResp);
                }).finally(function(){
                    PageHelper.hideLoader();
                });
            },
            form: [],
            formSource: [
                {
                    "type": "box",
                    "title": "CHOOSE_A_REPORT",
                    "items": [
                        {
                            "key": "bi.report_name",
                            "type": "select"
                        },
                        {
                            "key": "bi.from_date",
                            "type": "date"
                        },
                        {
                            "key": "bi.to_date",
                            "type": "date"
                        }
                    ]
                },
                {
                    type: "actionbox",
                    items: [{
                        type: "submit",
                        title: "DOWNLOAD_REPORT"
                    }]
                }
            ],
            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "bi": {
                        "type": "object",
                        "properties": {
                            "report_name": {
                                "type": "string",
                                "title": "REPORT_NAME"
                            },
                            "from_date": {
                                "type": "string",
                                "title": "FROM_DATE"
                            },
                            "to_date": {
                                "type": "string",
                                "title": "TO_DATE"
                            }
                        },
                        "required": [
                            "report_name",
                            "from_date",
                            "to_date"
                        ]
                    }
                }
            },
            actions: {
                submit: function(model, form, formName) {
                    var biDownloadUrl = irf.BI_BASE_URL + '/download.php?auth_token='+ AuthTokenHelper.getAuthData().access_token +'&' + $httpParamSerializer(model.bi);
                    $log.info(biDownloadUrl);
                    window.open(biDownloadUrl);
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("lead.LeadGeneration"), ["$log", "$state", "Lead", "LeadHelper", "SessionStore", "formHelper", "$q", "irfProgressMessage",
    "PageHelper", "Utils", "BiometricService", "PagesDefinition", "Queries",


    function($log, $state, Lead, LeadHelper, SessionStore, formHelper, $q, irfProgressMessage,
        PageHelper, Utils, BiometricService, PagesDefinition, Queries) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "LEAD_GENERATION",
            "subTitle": "Lead",
            initialize: function(model, form, formCtrl) {
                model.lead = model.lead || {};
                model.branchId = SessionStore.getBranchId() + '';
                model.lead.currentDate = model.lead.currentDate || Utils.getCurrentDate();
                model = Utils.removeNulls(model, true);
                model.lead.branchName = SessionStore.getBranch();
                $log.info("create new lead generation page ");
            },

            offline: true,
            getOfflineDisplayItem: function(item, index) {
                return [
                    item.lead.leadName
                ]
            },

            form: [{
                    "type": "box",
                    "title": "LEAD_PROFILE",
                    "items": [{
                            key: "lead.branchName",
                            readonly: true
                        }, {
                            key: "lead.spokeName",
                            "enumCode": "centre",
                            type: "select",
                        }, {
                            key: "lead.leadId",
                            condition: "model.lead.leadId",
                            readonly: true
                        }, {
                            key: "lead.urnNo",
                            condition: "model.lead.urnNo",
                            readonly: true
                        }, {
                            type: "fieldset",
                            title: "LEAD_DETAILS",
                            items: [{
                                    key: "lead.leadName",
                                }, {
                                    key: "lead.customerType",
                                    type: "select",
                                    titleMap: {
                                        "Individual": "Individual",
                                        "Enterprise": "Enterprise"
                                    }

                                }, {
                                    type: "fieldset",
                                    title: "ENTERPRISE_DETAILS",
                                    items: [{
                                        key: "lead.businessName",
                                    }, {
                                        key: "lead.businessType",
                                    }, {
                                        key: "lead.businessActivity",
                                    }, {
                                        key: "lead.companyOperatingSince",
                                        type:"date"
                                    }, {
                                        key: "lead.ownership",
                                        type: "select",
                                        "enumCode":"ownership"
                                    }, {
                                        key: "lead.companyRegistered",
                                        type: "radios",
                                        enumCode: "decisionmaker"
                                    }]
                                }, {
                                    type: "fieldset",
                                    title: "INDIVIDUAL_DETAILS",
                                    items: [{
                                            key: "lead.gender",
                                            type: "radios"
                                        }, {
                                            key: "lead.age",
                                            type: "number",
                                            "onChange": function(modelValue, form, model) {
                                                if (model.lead.age > 0) {
                                                    if (model.lead.dob) {
                                                        model.lead.dob = moment(new Date()).subtract(model.lead.age, 'years').format('YYYY-') + moment(model.lead.dob, 'YYYY-MM-DD').format('MM-DD');
                                                    } else {
                                                        model.lead.dob = moment(new Date()).subtract(model.lead.age, 'years').format('YYYY-MM-DD');
                                                    }
                                                }
                                            }
                                        }, {
                                            key: "lead.dob",
                                            type: "date",
                                            "onChange": function(modelValue, form, model) {
                                                if (model.lead.dob) {
                                                    model.lead.age = moment().diff(moment(model.lead.dob, SessionStore.getSystemDateFormat()), 'years');
                                                }
                                            }
                                        }, {
                                            key: "lead.maritalStatus",
                                            type: "select"
                                        }, {
                                            key: "lead.educationStatus",
                                            type: "select",
                                        }, {
                                            key: "lead.incomeSource",
                                            type: "select",
                                        },
                                        "lead.incomeEarned", {
                                            key: "lead.frequency",
                                            type: "select"
                                        }
                                    ]
                                }, {
                                    type: "fieldset",
                                    title: "CONTACT_DETAILS",
                                    condition: "model.lead.customerType === 'Individual'||model.lead.customerType === 'Enterprise'",
                                    items: [{
                                            key: "lead.mobileNo",
                                        }, {
                                            key: "lead.alternateMobileNo",
                                        }, {
                                            key: "lead.addressLine1",
                                        }, {
                                            key: "lead.addressLine2",
                                        },
                                        "lead.district", {
                                            key: "lead.pincode",
                                            type: "lov",
                                            autolov: true,
                                            inputMap: {
                                                "pincode": "lead.pincode",
                                                "district": {
                                                    key: "lead.district"
                                                },
                                                "state": {
                                                    key: "lead.state"
                                                }
                                            },
                                            outputMap: {

                                                "pincode": "lead.pincode",
                                                "district": "lead.district",
                                                "state": "lead.state"
                                            },
                                            searchHelper: formHelper,
                                            search: function(inputModel, form, model) {
                                                return Queries.searchPincodes(inputModel.pincode, inputModel.district, inputModel.state);
                                            },
                                            getListDisplayItem: function(item, index) {
                                                return [
                                                    item.pincode,
                                                    item.district + ', ' + item.state
                                                ];
                                            }
                                        },
                                        "lead.state", {
                                            "key": "lead.latitude",
                                            "type": "geotag",
                                            "latitude": "latitude",
                                            "longitude": "longitude",
                                        },
                                        "lead.area",

                                    ]
                                },
                            ]
                        },
                    ]
                },
                {
                    type: "box",
                    title: "PRODUCT_DETAILS",
                    items: [{
                        key: "lead.productCategory",
                        type: "select",
                        titleMap: {
                            "Asset": "Asset",
                            "Liability": "Liability",
                            "others": "others"
                        }
                    }, {
                        key: "lead.productSubCategory",
                        type: "select",
                        titleMap: {
                            "Loan": "Loan",
                            "investment": "investment"
                        }
                    }, {
                        key: "lead.interestedInProduct",
                        type: "radios",
                        enumCode: "decisionmaker",
                    }, {
                        key: "lead.productRequiredBy",
                        type: "select",
                        condition: "model.lead.interestedInProduct==='YES'",
                        titleMap: {
                            "In this week": "In this week",
                            "In this month": "In this month",
                            "Next 2 -3 months": "Next 2 -3 months",
                            "Next 4-6 months": "Next 4-6 months",

                        },
                    }, {
                        key: "lead.screeningDate",
                        condition: "(model.lead.interestedInProduct==='YES' && model.lead.productRequiredBy ==='In this week')",
                        type: "date",
                    }, {
                        key: "lead.followUpDate",
                        condition: "(model.lead.interestedInProduct==='YES' && model.lead.productRequiredBy === 'In this month'||model.lead.ProductRequiredBy ==='Next 2 -3 months'|| model.lead.ProductRequiredBy === 'Next 4-6 months')",
                        type: "date",

                    }, {
                        key: "lead.loanPurpose1",
                        condition: "model.lead.interestedInProduct==='YES'",
                        type: "select",
                        titleMap: {
                            "AssetPurchase": "AssetPurchase",
                            "WorkingCapital": "WorkingCapital",
                            "BusinessDevelopment": "BusinessDevelopment",
                            "LineOfCredit": "LineOfCredit",

                        }
                    }, {
                        key: "lead.loanAmountRequested",
                        condition: "model.lead.interestedInProduct==='YES'",
                        title: "Loan_Amount_Requested"

                    }, {
                        type: "fieldset",
                        title: "PRODUCT_REJECTION_REASON",
                        condition: "model.lead.interestedInProduct==='NO'",
                        items: [{
                            key: "lead.productRejectReason",
                            type: "select",
                            titleMap: {
                                "Reason1": "Reason1",
                                "Reason2": "Reason2"
                            }
                        }, {
                            key: "lead.additionalRemarks",
                        }, ]
                    }, {
                        type: "fieldset",
                        condition: "model.lead.interestedInProduct==='YES'",
                        title: "PRODUCT_ELIGIBILITY",
                        items: [{
                                key: "lead.eligibleForProduct",
                                type: "radios",
                                enumCode: "decisionmaker",
                            }, {
                                key: "lead.productAcceptReason",
                                condition: "model.lead.eligibleForProduct ==='NO'",
                                type: "select",
                                titleMap: {
                                    "Reason1": "Reason1",
                                    "Reason2": "Reason2"
                                }
                            },

                        ]

                    }, {
                        type: "fieldset",
                        title: "LEAD_STATUS",
                        items: [{
                            key: "lead.leadStatus",
                            type: "select",
                            titleMap: {
                                "Screening": "Screening",
                                "FollowUP": "FollowUp",
                                "Incomplete": "Incomplete",
                                "Reject": "Reject"
                            }
                        }]
                    }]
                }, {
                    type: "box",
                    title: "CUSTOMER_INTERACTIONS",
                    items: [{
                        key: "lead.leadInteractions",
                        title: "INTERACTION_HISTORY",
                        type: "array",
                        remove: null,
                        add: null,

                        items: [{
                            key: "lead.leadInteractions[].interactionDate",
                            type: "date",
                        }, {
                            key: "lead.leadInteractions[].loanOfficerId",
                        }, {
                            key: "lead.leadInteractions[].leadStatus",
                        }, {
                            key: "lead.leadInteractions[].typeOfInteraction",
                            type: "select",
                            titleMap: {
                                "Call": "Call",
                                "Visit": "Visit",

                            },
                        }, {
                            key: "lead.leadInteractions[].customerResponse",
                        }, {
                            key: "lead.leadInteractions[].additionalRemarks",
                        }, {
                            "key": "lead.leadInteractions[].latitude",
                            "type": "geotag",
                            "latitude": "latitude",
                            "longitude": "longitude",
                            //"condition": "model.lead.leadInteractions[].TypeOfInteraction === 'Visit'",
                        }, {
                            "key": "lead.leadInteractions[].picture",
                            "type": "file",
                            "fileType": "image/*",
                            //"condition": "model.lead.leadInteractions[].TypeOfInteraction === 'Visit'",
                        }, ]
                    }]

                },

                {
                    type: "box",
                    title: "PREVIOUS_INTERACTIONS",
                    condition: "model.lead.id",
                    items: [{
                        key: "lead.leadInteractions",
                        title: "INTERACTION_HISTORY",
                        type: "array",
                        remove: null,
                        add: null,
                        /* startEmpty: true, */
                        items: [{
                            key: "lead.leadInteractions[].interactionDate",
                            type: "date",
                            readonly: true
                        }, {
                            key: "lead.leadInteractions[].loanOfficerId",
                            readonly: true
                        }, {
                            key: "lead.leadInteractions[].leadStatus",
                            readonly: true
                        }, {
                            key: "lead.leadInteractions[].typeOfInteraction",
                            type: "select",
                            titleMap: {
                                "Call": "Call",
                                "Visit": "Visit",

                            },
                            readonly: true
                        }, {
                            key: "lead.leadInteractions[].customerResponse",
                            readonly: true
                        }, {
                            key: "lead.leadInteractions[].additionalRemarks",
                            readonly: true
                        }, {
                            "key": "lead.leadInteractions[].latitude",
                            "type": "geotag",
                            "latitude": "latitude",
                            "longitude": "longitude",
                            //"condition": "model.lead.leadInteractions[].TypeOfInteraction === 'Visit'",
                            readonly: true
                        }, {
                            "key": "lead.leadInteractions[].picture",
                            "type": "file",
                            "fileType": "image/*",
                            //"condition": "model.lead.leadInteractions[].TypeOfInteraction === 'Visit'",
                            readonly: true
                        }, ]
                    }]
                },


                {
                    "type": "actionbox",
                    "items": [{
                        "type": "save",
                        "title": "SAVE_OFFLINE",
                    }, {
                        "type": "submit",
                        "title": "Submit"
                    }]
                },
            ],

            schema: function() {
                return Lead.getLeadSchema().$promise;
            },

            actions: {
                preSave: function(model, form, formName) {
                    var deferred = $q.defer();
                    if (model.lead.leadName) {
                        deferred.resolve();
                    } else {
                        irfProgressMessage.pop('lead-save', 'lead Name is required', 3000);
                        deferred.reject();
                    }
                    return deferred.promise;
                },

                submit: function(model, form, formName) {
                    $log.info("Inside submit()");
                    $log.warn(model);
                    var sortFn = function(unordered) {
                        var out = {};
                        Object.keys(unordered).sort().forEach(function(key) {
                            out[key] = unordered[key];
                        });
                        return out;
                    };
                    var reqData = _.cloneDeep(model);
                    if (reqData.lead.id) {
                        LeadHelper.proceedData(reqData).then(function(resp) {
                            // $state.go('Page.Landing', null);
                        });
                    } else {
                        LeadHelper.saveData(reqData).then(function(res) {
                            LeadHelper.proceedData(res).then(function(resp) {
                                //$state.go('Page.Landing', null);
                            }, function(err) {
                                Utils.removeNulls(res.lead, true);
                                model.lead = res.lead;
                            });
                        });
                    }



                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("lead.LeadReassign"), ["$log", "$state", "$stateParams", "Lead", "SessionStore",
 "formHelper", "$q", "irfProgressMessage", "PageHelper", "Utils", "PagesDefinition", "Queries",


    function($log, $state, $stateParams, Lead, SessionStore, formHelper, $q, irfProgressMessage,
        PageHelper, Utils, PagesDefinition, Queries) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "LEAD_ASSIGN",
            "subTitle": "Lead",
            initialize: function(model, form, formCtrl) {

                model.lead = model.lead || {};
                model.branch = branch;
                model.branchId = SessionStore.getBranchId() + '';

                model.lead.currentDate = model.lead.currentDate || Utils.getCurrentDate();
                model.lead.ActionTakenBy = model.lead.ActionTakenBy || SessionStore.getLoginname();

                model = Utils.removeNulls(model, true);
                model.lead.BranchName = SessionStore.getBranch();

                $log.info("create new lead generation page ");

            },
            modelPromise: function(pageId, _model) {
                return $q.resolve({
                    lead: {
                        Name: "Ram",
                        leadId: 1,
                        branchName:"madurai",
                        mobileNo: 9888888888
                    }
                });
            },

            offline: true,
            getOfflineDisplayItem: function(item, index) {
                return []
            },

            form: [{
                    "type": "box",
                    readonly: true,
                    "title": "",
                    "items": [{
                        key: "lead.currentDate",
                        title: "CURRENT_DATE",
                        type: "date",
                        readonly: true
                    }, {
                        key: "lead.branchName",
                        title: "BRANCH_NAME",
                        readonly: true
                    }, {
                        key: "lead.leadId",
                        readonly: true
                    }, {
                        key: "lead.mobileNo",
                        readonly: true
                    }]
                },

                {
                    type: "box",
                    title: "ASSIGN_LEAD",
                    items: [{
                        key: "lead.LoanOfficer",
                        type: "lov",
                        title: "LOAN_OFFICER",
                        inputMap: {
                            "HubName": {
                                "key": "lead.branchName",
                                type: "select",
                                "enumCode": "branch" 
                            },
                            "SpokeName": {
                               key: "lead.spokeName",
                               "enumCode": "centre",
                               type: "select",
                               "filter": {
                                    "parentCode as branch": "model.branch"
                                }
                            },
                        },
                        outputMap: {

                            "LoanOfficer": "lead.LoanOfficer"
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form, model) {
                            /*
                                 if (!inputModel.branchName)
                                     inputModel.branchName = SessionStore.getBranch();
                                 var promise = Enrollment.search({
                                     'branchName': inputModel.branchName,
                                     'firstName': inputModel.firstName,
                                     'centreCode': inputModel.centreCode,
                                     'customerType': 'Individual'
                                 }).$promise;

                                 */
                            return $q.resolve({
                                headers: {
                                    "x-total-count": 4
                                },
                                body: [{

                                        "LoanOfficer": "Stalin",

                                    }, {
                                        "LoanOfficer": "Ravi",

                                    }, {
                                        "LoanOfficer": "Raj",

                                    }, {
                                        "LoanOfficer": "Ram",
                                    },

                                ]
                            });
                        },
                        getListDisplayItem: function(data, index) {
                            return [
                                data.LoanOfficer,
                            ];
                        }
                    }, ]
                }, {
                    "type": "actionbox",

                    "items": [

                        {
                            "type": "submit",
                            "title": "ASSIGN"
                        },
                    ]
                },
            ],
            schema: function() {
                return Lead.getLeadSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {
                    $log.info("Inside submit()");
                    irfProgressMessage.pop('Lead-ASSIGN', 'Lead is successfully assigned to LoanOfficer', 3000);
                    $log.warn(model);
                }
            }

        };
    }
]);
irf.pageCollection.factory(irf.page("lead.LeadBulkUpload"), ["$log", "SessionStore", "$state", "$stateParams", "Lead", function($log,SessionStore, $state, $stateParams, Lead) {

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "LEAD_BULK_UPLOAD",
        "subTitle": "",
        initialize: function(model, form, formCtrl) {
            $log.info("LeadBulkUpload  Page got initialized");
        },
        offline: false,
        getOfflineDisplayItem: function(item, index) {},
        form: [{
            "type": "box",
            "title": "LEAD_BULK_UPLOAD",
            "colClass": "col-sm-6",
            "items": [{
                "key": "lead.Bulkfile",
                "notitle": true,
                "title": "UPLOAD_THE_FILE",
                "category": "ACH",
                "subCategory": "cat2",
                "type": "file",
                "fileType": "application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                customHandle: function(file, progress, modelValue, form, model) {
                    Lead.leadBulkUpload(file, progress);
                }
            }]
        }],
        schema: function() {
            return Lead.getLeadSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName) {

            },
            proceed: function(model, formCtrl, form, $event) {}
        }
    };
}]);
irf.pageCollection.factory(irf.page("lead.LeadSearchLimited"), ["$log", "formHelper", "Enrollment", "$state", "$q", "SessionStore", "Utils",
	function($log, formHelper, Enrollment, $state, $q, SessionStore, Utils) {
		var branch = SessionStore.getBranch();
		return {
			"type": "search-list",
			"title": "LEAD_SEARCH",
			"subTitle": "",
			initialize: function(model, form, formCtrl) {
				model.branch = branch;
				$log.info("search-list sample got initialized");
			},
			definition: {
				title: "SEARCH_LEADS",
				searchForm: [
					"*"
				],
				searchSchema: {
					"type": 'object',
					"title": 'SEARCH_OPTIONS',
					"properties": {
						"centre": {
							"title": "CENTER",
							"type": "number",
							"enumCode": "centre",
							"x-schema-form": {
								"type": "select",
							}
						},
						"first_name": {
							"title": "CUSTOMER_NAME",
							"type": "string"
						},
						"kyc_no": {
							"title": "LEAD_ID",
							"type": "string"
						},
					},
					"required": ["center"],
				},
				getSearchFormHelper: function() {
					return formHelper;
				},
				getResultsPromise: function(searchOptions, pageOpts) { /* Should return the Promise */

					/*var promise = Enrollment.search({
						'branchName': searchOptions.branch,
						'firstName': searchOptions.first_name,
						'centreCode': searchOptions.centre,
						'page': pageOpts.pageNo,
						'per_page': pageOpts.itemsPerPage,
						'kycNumber': searchOptions.kyc_no,
						'lastName': searchOptions.lastName,
						'urnNo': searchOptions.urnNo
					}).$promise;

					return promise;

					*/
					return $q.resolve({
						headers: {
							"x-total-count": 4
						},
						body: [{
								leadName: "Stalin",
								id: "1",
								leadGender: "MALE"

							}, {
								leadName: "Ravi",
								id: "2",
								leadGender: "MALE"
							}, {
								leadName: "Ram",
								id: "3",
								leadGender: "MALE"
							}, {
								leadName: "Raj",
								id: "4",
								leadGender: "MALE"
							},

						]
					});
				},
				paginationOptions: {
					"viewMode": "page",
					"getItemsPerPage": function(response, headers) {
						return 20;
					},
					"getTotalItemsCount": function(response, headers) {
						return headers['x-total-count']
					}
				},
				listOptions: {
					selectable: false,
					expandable: true,
					listStyle: "table",
					itemCallback: function(item, index) {},
					getItems: function(response, headers) {
						if (response != null && response.length && response.length != 0) {
							return response;
						}
						return [];
					},
					getListItem: function(item) {
						return [
							item.leadName,
							item.leadGender,
							item.id,

							/*
								Utils.getFullName(item.firstName, item.middleName, item.lastName),
								'Customer ID : ' + item.id,
								item.urnNo?('URN : ' + item.urnNo):("{{'CURRENT_STAGE'|translate}} : " + (item.currentStage==='Stage02'?'House verification':
									(item.currentStage==='Stage01'?'Enrollment':item.currentStage))),
								"{{'BRANCH'|translate}} : " + item.kgfsName,
								"{{'CENTRE_CODE'|translate}} : " + item.centreCode,
								"{{'FATHERS_NAME'|translate}} : " + Utils.getFullName(item.fatherFirstName, item.fatherMiddleName, item.fatherLastName)

								*/

						]
					},
					getColumns: function() {
						return [{
							title: 'LEAD NAME',
							data: 'leadName',
							render: function(data, type, full, meta) {
								return (full.customerType === 'Individual' ? '<i class="fa fa-user" style="color:#777">&nbsp;</i> ' : '<i class="fa fa-industry" style="color:#777"></i> ') + data;
							}
						}, {
							title: 'GENDER',
							data: 'leadGender',
							// type: 'html',
							render: function(data, type, full, meta) {
								return '<b>' + data + '</b>';
							}
						}, {
							title: 'ID',
							data: 'id'
						}]
					},
					getActions: function() {
						return [{

							name: "Lead View/Update",
							desc: "",
							icon: "fa fa-pencil",
							fn: function(item, index) {
								$state.go("Page.Engine", {
									pageName: "lead.LeadGeneration",
									pageId: item.id
								});
							},
							isApplicable: function(item, index) {

								return true;
							}
						}, ];
					}
				}
			}
		};
	}
]);
irf.pageCollection.factory(irf.page("lead.LeadSearchAll"),
 ["$log", "formHelper", "Lead", "$state", "$q", "SessionStore", "Utils",
	function($log, formHelper,Lead , $state, $q, SessionStore, Utils) {
		var branch = SessionStore.getBranch();
		return {
			"type": "search-list",
			"title": "LEAD_SEARCH",
			"subTitle": "",
			initialize: function(model, form, formCtrl) {
				model.branch = branch;
				$log.info("search-list sample got initialized");
			},
			definition: {
				title: "SEARCH_LEAD",
				searchForm: [
					"*"
				],
				searchSchema: {
					"type": 'object',
					"title": 'SEARCH_OPTIONS',
					"properties": {
						"branch": {
							"title": "BRANCH_NAME",
							"type": "string",
							"enumCode": "branch",
							"x-schema-form": {
								"type": "select",
								"screenFilter": true
							}
						},
						"centre": {
							"title": "CENTER",
							"type": "number",
							"enumCode": "centre",
							"x-schema-form": {
								"type": "select",
								"filter": {
									"parentCode as branch": "model.branch"
								},
								"screenFilter": true
							}
						},
						"LoanOfficer": {
							"title": "LOAN_OFFICER",
							"type": "string",
							"x-schema-form": {
								"type": "select",
								"screenFilter": true,
								titleMap: {
									"officer1": "officer1",
									"officer2": "officer2",
									"officer3": "officer3",
									"officer4": "officer4"
								}
							}
						},
						"first_name": {
							"title": "CUSTOMER_NAME",
							"type": "string"
						},
						"lead_no": {
							"title": "LEAD_ID",
							"type": "string"
						}
					},
					"required": ["branch"]
				},
				getSearchFormHelper: function() {
					return formHelper;
				},
				getResultsPromise: function(searchOptions, pageOpts) { /* Should return the Promise */
					/* var promise = Enrollment.search({
						'branchName': searchOptions.branch,
						'firstName': searchOptions.first_name,
						'centreCode': searchOptions.centre,
						'page': pageOpts.pageNo,
						'per_page': pageOpts.itemsPerPage,
						'kycNumber': searchOptions.kyc_no,
						'lastName': searchOptions.lastName,
						'urnNo': searchOptions.urnNo
					}).$promise;
					return promise;  */
					return $q.resolve({
						headers: {
							"x-total-count": 4
						},
						body: [{
								leadName: "Stalin",
								id: "1",
								leadGender: "MALE"

							}, {
								leadName: "Ravi",
								id: "2",
								leadGender: "MALE"
							}, {
								leadName: "Ram",
								id: "3",
								leadGender: "MALE"
							}, {
								leadName: "Raj",
								id: "4",
								leadGender: "MALE"
							},

						]
					});
				},
				paginationOptions: {
					"viewMode": "page",
					"getItemsPerPage": function(response, headers) {
						return 20;
					},
					"getTotalItemsCount": function(response, headers) {
						return headers['x-total-count']
					}
				},
				listOptions: {
					selectable: false,
					expandable: true,
					listStyle: "table",
					itemCallback: function(item, index) {},
					getItems: function(response, headers) {
						if (response != null && response.length && response.length != 0) {
							return response;
						}
						return [];
					},
					getListItem: function(item) {
						return [
							item.leadName,
							item.leadGender,

							item.id,

						]
					},
					getColumns: function() {
						return [{
							title: 'LEAD NAME',
							data: 'leadName',
							render: function(data, type, full, meta) {
								return (full.customerType === 'Individual' ? '<i class="fa fa-user" style="color:#777">&nbsp;</i> ' : '<i class="fa fa-industry" style="color:#777"></i> ') + data;
							}
						}, {
							title: 'GENDER',
							data: 'leadGender',
							// type: 'html',
							render: function(data, type, full, meta) {
								return '<b>' + data + '</b>';
							}
						}, {
							title: 'ID',
							data: 'id'
						}]
					},
					getActions: function() {
						return [{

								name: "Lead View/Update",
								desc: "",
								icon: "fa fa-pencil",
								fn: function(item, index) {
									$state.go("Page.Engine", {
										pageName: "lead.LeadGeneration",
										pageId: item.id
									});
								},

								isApplicable: function(item, index) {

									return true;
								}
							}, {
								name: "Lead Reassign",
								desc: "",
								icon: "fa fa-pencil-square-o",
								fn: function(item, index) {
									$state.go("Page.Engine", {
										pageName: "lead.LeadReassign",
										pageId: item.id
									});
								},

								isApplicable: function(item, index) {

									return true;
								}
							},

						];
					}
				}
			}
		};
	}
]);
irf.pageCollection.factory("LeadHelper",
["$log", "$q","Lead", 'PageHelper', 'irfProgressMessage', 'Utils', 'SessionStore',
function($log, $q, Lead, PageHelper, irfProgressMessage, Utils, SessionStore){

    
    /*
    * function saveData:
    *
    * if cust id is not set, data is saved and the promise is resolved with SAVE's response
    * if cust id is set, promise is rejected with true (indicates doProceed)
    * if error occurs during save, promise is rejected with false (indicates don't proceed
    * */
    var saveData = function(reqData){

        var deferred = $q.defer();
        $log.info("Attempting Save");
        reqData.lead.udf = {};
        reqData.lead.udfDate = {};
        reqData.lead.udf.userDefinedFieldValues = {};
        $log.info(reqData);
        PageHelper.clearErrors();
        PageHelper.showLoader();
        irfProgressMessage.pop('lead-save', 'Working...');
        reqData['leadAction'] = 'SAVE';
        /* TODO fix for KYC not saving **/
        var action = reqData.lead.id ? 'update' : 'save';
        Lead[action](reqData, function (res, headers) {
            irfProgressMessage.pop('lead-save', 'Data Saved', 2000);
            $log.info(res);
            PageHelper.hideLoader();
            deferred.resolve(res);
        }, function (res) {
            PageHelper.hideLoader();
            irfProgressMessage.pop('lead-save', 'Oops. Some error.', 2000);
            PageHelper.showErrors(res);
            deferred.reject(res);
        });
        return deferred.promise;

    };
    /*
    * fn proceedData:
    *
    * if cust id not set, promise rejected with null
    * if cust id set, promise resolved with PROCEED response
    * if error occurs, promise rejected with null.
    * */
    var proceedData = function(res){

        var deferred = $q.defer();
        $log.info("Attempting Proceed");
        $log.info(res);
        if(res.lead.id===undefined || res.lead.id===null){
            $log.info("lead id null, cannot proceed");
            deferred.reject(null);
        }
        else {
            PageHelper.clearErrors();
            PageHelper.showLoader();
            irfProgressMessage.pop('lead-save', 'Working...');
            res.leadAction = "PROCEED";
            Lead.updateLead(res, function (res, headers) {
                PageHelper.hideLoader();
                irfProgressMessage.pop('lead-save', 'Done. lead created with ID: ' + res.lead.id, 5000);
                deferred.resolve(res);
            }, function (res, headers) {
                PageHelper.hideLoader();
                irfProgressMessage.pop('lead-save', 'Oops. Some error.', 2000);
                PageHelper.showErrors(res);
                deferred.reject(res);
            });
        }
        return deferred.promise;

    };

   
    return {
        saveData: saveData,
        proceedData: proceedData,
    };
}]);


irf.pageCollection.factory('Pages_ManagementHelper', ["$state", "$q",function($state, $q){
    return {
        backToDashboard : function(){
            $state.go('Page.ManagementDashboard',{
                pageName:"ManagementDashboard",
                pageId:null,
                pageData:null
            });
        },
        getCentreSchemaPromise: function(){
            return $q.resolve({
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "required":["centre"],
                "properties": {
                    "centre":{
                        "type":"object",
                        "required": [
                            "version",
                            "centre_name",
                            "centre_code",
                            "centre_address",
                            "branch_id",
                            "status",
                            "language_code",
                            "centre_name_in_local"
                        ],
                        "properties":{
                            "version":{
                                "title":"VERSION",
                                "type":"number",
                                "default":0,
                                "minimum":0
                            },
                            "centre_name":{
                                "title":"CENTRE_NAME",
                                "type":"string",
                                "minLength":2
                            },
                            "centre_code":{
                                "title":"CENTER_CODE",
                                "type":"string",
                                "minLength":1
                            },
                            "centre_address":{
                                "title":"ADDRESS",
                                "type":"string"
                            },
                            "branch_id":{
                                "title":"BRANCH_ID",
                                "type":"number",
                                "minimum":0
                            },
                            "status":{
                                "title":"STATUS",
                                "type":"string",
                                "enum":["ACTIVE","INACTIVE"],
                                "default":"ACTIVE"
                            },
                            "employee":{
                                "title":"EMPLOYEE_CODE",
                                "type":"string"
                            },
                            "centre_leader_urn":{
                                "title":"CENTRE_LEADER_URN",
                                "type":"string"
                            },
                            "weekly_meeting_day":{
                                "type":"string",
                                "title":"WEEKLY_MEETING_DAY",
                                "enum":["SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY"]
                            },
                            "weekly_meeting_time":{
                                "title":"WEEKLY_MEETING_TIME",
                                "type":"string"
                            },
                            "monthly_meeting_date":{
                                "type":"string",
                                "title":"MONTHLY_MEETING_DATE"
                            },
                            "monthly_meeting_day":{
                                "type":"string",
                                "title":"MONTHLY_MEETING_DAY"
                            },
                            "monthly_meeting_time":{
                                "type":"string",
                                "title":"MONTHLY_MEETING_TIME"
                            },
                            "created_by":{
                                "type":"string",
                                "readonly":true
                            },
                            "field3":{
                                "title":"FIELD3",
                                "type":"string"
                            },
                            "field4":{
                                "title":"FIELD4",
                                "type":"string"
                            },
                            "field5":{
                                "title":"FIELD5",
                                "type":"string"
                            },
                            "language_code":{

                                "type":"string",
                                "minLength":2,
                                "maxLength":2,
                                "default": "hi",
                                "title": "LANGUAGE_CODE",
                                "enum":["hi","en"]
                            },
                            "centre_name_in_local":{
                                "type":"string",
                                "title":"CENTRE_NAME_IN_LOCAL"
                            }
                        }
                    }
                }
            });
        },
        getVillageSchemaPromise: function() {
            return $q.resolve({
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "required":["village"],
                "properties": {
                    "village": {
                        "required": [
                            "version",
                            "village_name",
                            "village_name_in_local",
                            "language_code",
                            "pincode",
                            "fregcode"
                        ],
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "number",
                                "title": "VERSION",
                                "default":0,
                                "minimum":0
                            },
                            "village_name": {
                                "type": "string",
                                "title": "VILLAGE_NAME"
                            },
                            "village_name_in_local": {
                                "type": "string",
                                "title": "VILLAGE_NAME_IN_LOCAL"
                            },
                            "language_code": {
                                "type": "string",
                                "default": "hi",
                                "title": "LANGUAGE_CODE",
                                "enum":["hi","en"]
                            },
                            "branch_id": {
                                "type": "number",
                                "enumCode":"branch",
                                "title": "BRANCH"
                            },
                            "pincode": {
                                "type": "number",
                                "title": "PIN_CODE",
                                "minimum": 100000,
                                "maximum": 999999
                            },
                            "fregcode": {
                                "type": "number",
                                "title": "FREGCODE"
                            },
                            "created_by": {
                                "type": "string",
                                "title": "CREATED_BY"
                            },
                            "field1": {
                                "type": "string",
                                "title": "FIELD1"
                            },
                            "field2": {
                                "type": "string",
                                "title": "FIELD2"
                            },
                            "field3": {
                                "type": "string",
                                "title": "FIELD3"
                            },
                            "field4": {
                                "type": "string",
                                "title": "FIELD4"
                            },
                            "field5": {
                                "type": "string",
                                "title": "FIELD5"
                            }
                        }
                    }
                }
            });
        }
    };
}]);



irf.pageCollection.factory("Pages__Management_VillageCRU",
["$log","$q", 'Pages_ManagementHelper','PageHelper','formHelper','irfProgressMessage',
'SessionStore',"$state","$stateParams","Masters","authService",
function($log, $q, ManagementHelper, PageHelper,formHelper,irfProgressMessage,
	SessionStore,$state,$stateParams,Masters,authService){

	var branch = SessionStore.getBranch();
	var branchId = SessionStore.getBranchId();
    var populateData = function(model){
        PageHelper.showLoader();
        Masters.get({action:'village',id:model.village.id},function(resp,header){

            var village = model.village;
            var vm = resp.village_master;
            var rc = resp.reference_code;
            var ts = resp.translation;

            village.id = vm.id;
            village.village_name = vm.village_name;
            village.version = Number(rc.version);
            village.pincode = Number(vm.pincode);
            village.fregcode = Number(vm.fregcode);
            village.village_name_in_local = ts.t_value;
            village.language_code = ts.language_code;
            village.created_by = vm.created_by;
            village.field1 = rc.field1 || "";
            village.field2 = rc.field2 || "";
            village.field3 = rc.field3 || "";
            village.field4 = rc.field4 || "";
            village.field5 = rc.field5 || "";

            PageHelper.hideLoader();
        },function(resp){
            ManagementHelper.backToDashboard();
            PageHelper.showProgress('error',"Oops an error occurred",2000);
            PageHelper.showErrors(resp);
            PageHelper.hideLoader();
        });

    };

	return {
		"id": "Management_VillageCRU",
        "name":"Management_VillageCRU",
		"type": "schema-form",
		"title": $stateParams.pageId ? "EDIT_VILLAGE" : "ADD_VILLAGE",
		"subTitle": branch,
		initialize: function (model, form, formCtrl) {
			$log.info("Management VillageCRU page got initialized");
			model.branch = branch;
            model.village.branch_id = branchId;

            if(!$stateParams.pageId) {
                PageHelper.showLoader();
                authService.getUser().then(function (data) {
                    PageHelper.hideLoader();
                    model.village.created_by = data.login;

                }, function (resp) {
                    PageHelper.hideLoader();
                });
            }
			else{
				model.village.id = $stateParams.pageId;
				populateData(model);
			}

		},
		
		form: [
			{
				"type":"box",
				"title":"VILLAGE",
				"items":[

					"village.village_name",
					"village.village_name_in_local",
					"village.language_code",
                    {
                        key:"village.pincode",
                        onChange:"actions.generateFregCode(model,form)"
                    },
                    {
                        key:"village.fregcode",
                        readonly:true
                    },
					{
						key:"village.created_by",
						readonly:true

					}



				]


			}
			,
			{
				"type": "actionbox",
				"items": [{
					"type": "submit",
					"title": "SAVE"
			}]
		}],
		schema: function() {
			return ManagementHelper.getVillageSchemaPromise();
		},
		actions: {
            generateFregCode:function(model,form){
                console.log(model);
                if(model.village.pincode>100000){
                    model.village.fregcode = Number(model.village.pincode+"001");
                }
                else {
                    model.village.fregcode="";
                }

            },
			submit: function(model, form, formName){
				$log.info("Inside submit()");
				console.warn(model);
				if (window.confirm("Save?") && model.village) {
					PageHelper.showLoader();
                    if(isNaN(model.village.version)) model.village.version=0;
                    model.village.version = Number(model.village.version)+1;
                    Masters.post({
                        action:"AddVillage",
                        data:model.village
                    },function(resp,head){
                        PageHelper.hideLoader();
                        PageHelper.showProgress("add-village","Done. Village ID :"+resp.id,2000);
                        console.log(resp);
                        ManagementHelper.backToDashboard();
                    },function(resp){
                        PageHelper.hideLoader();
                        PageHelper.showErrors(resp);
                        ManagementHelper.backToDashboard();
                        PageHelper.showProgress('error',"Oops. An error occurred.",2000);
                    });
				}
			}
		}
	};
}]);



irf.pageCollection.factory("Pages__Management_CentreCRU",
    ["$log","$q", 'Pages_ManagementHelper','PageHelper','formHelper','irfProgressMessage',
        'SessionStore',"$state","$stateParams","Masters","authService",
        function($log, $q, ManagementHelper, PageHelper,formHelper,irfProgressMessage,
                 SessionStore,$state,$stateParams,Masters,authService){

            var branch = SessionStore.getBranch();
            var branchId = SessionStore.getBranchId();

            var populateData = function(model){
                PageHelper.showLoader();
                Masters.get({action:'centre',id:model.centre.id},function(resp,header){
                    
                    var centre = model.centre;
                    var cm = resp.centre_master;
                    var rc = resp.reference_code;
                    var ts = resp.translation;

                    centre.id = cm.id;
                    centre.centre_name = cm.centre_name;
                    centre.version = Number(cm.version);
                    centre.centre_code = cm.centre_code;
                    centre.centre_address = cm.centre_address;
                    centre.status = cm.status;
                    centre.weekly_meeting_day = cm.weekly_meeting_day || "";
                    centre.monthly_meeting_date = cm.monthly_meeting_date || "";
                    centre.monthly_meeting_day = cm.monthly_meeting_day || "";
                    centre.monthly_meeting_time = cm.monthly_meeting_time || "";
                    centre.centre_name_in_local = ts.t_value;
                    centre.language_code = ts.language_code;
                    centre.created_by = cm.created_by;
                    centre.field3 = rc.field3 || "";
                    centre.field4 = rc.field4 || "";
                    centre.field5 = rc.field5 || "" ;


                    PageHelper.hideLoader();
                },function(resp){
                    ManagementHelper.backToDashboard();
                    PageHelper.showProgress('error',"Oops an error occurred",2000);
                    PageHelper.showErrors(resp);
                    PageHelper.hideLoader();
                });

            };
            return {
                "id": "Management_CentreCRU",
                "name":"Management_CentreCRU",
                "type": "schema-form",
                "title": $stateParams.pageId ? "EDIT_CENTRE" : "ADD_CENTRE",
                "subTitle": branch,
                initialize: function (model, form, formCtrl) {
                    $log.info("Management CentreCRU page got initialized");
                    model.branch = branch;

                    model.centre.branch_id = branchId;

                    if(!$stateParams.pageId) {

                        PageHelper.showLoader();
                        authService.getUser().then(function (data) {
                            PageHelper.hideLoader();
                            model.centre.created_by = data.login;

                        }, function (resp) {
                            PageHelper.hideLoader();
                        });
                    }
                    else{
                        model.centre.id = $stateParams.pageId;
                        populateData(model);
                    }

                },

                form: [
                    {
                        "type":"box",
                        "title":"CENTRE",
                        "items":[
                            "centre.centre_name",
                            "centre.centre_name_in_local",
                            "centre.language_code",
                            "centre.centre_code",
                            {
                                key:"branch",
                                readonly:true,
                                title:"BRANCH"

                            },
                            {
                                key:"centre.centre_address",
                                type:"textarea"
                            },
                            {
                                key:"centre.status",
                                type:"select"

                            },
                            "centre.weekly_meeting_day",
                            "centre.weekly_meeting_time",
                            "centre.monthly_meeting_date",
                            "centre.monthly_meeting_day",
                            "centre.monthly_meeting_time",
                            "centre.created_by"
                        ]


                    }
                    ,
                    {
                        "type": "actionbox",
                        "items": [{
                            "type": "submit",
                            "title": "SAVE"
                        }]
                    }],
                schema: function() {
                    return ManagementHelper.getCentreSchemaPromise();
                },
                actions: {
                    submit: function(model, form, formName){
                        $log.info("Inside submit()");
                        console.warn(model);
                        if (window.confirm("Save?") && model.centre) {
                            PageHelper.showLoader();
                            if(isNaN(model.centre.version)) model.centre.version=0;
                            model.centre.version = Number(model.centre.version)+1;
                            Masters.post({
                                action:"AddCentre",
                                data:model.centre
                            },function(resp,head){
                                PageHelper.hideLoader();
                                PageHelper.showProgress("add-centre","Done. Centre ID :"+resp.id,2000);
                                ManagementHelper.backToDashboard();
                                console.log(resp);
                            },function(resp){
                                PageHelper.hideLoader();
                                PageHelper.showErrors(resp);
                            });
                        }
                    }
                }
            };
        }]);

irf.pageCollection.factory("Pages__VillageSearch",
["$log", "formHelper", "Masters","$state", "SessionStore",
function($log, formHelper, Masters,$state, SessionStore){
	var branchId = SessionStore.getBranchId();
	return {
		"id": "VillageSearch",
		"type": "search-list",
		"name": "VillageSearch",
		"title": "VILLAGE_SEARCH",
		"subTitle": "",
		"uri":"Village Search",
		initialize: function (model, form, formCtrl) {
			$log.info("search-list sample got initialized");
		},
		definition: {
			title: "Search Villages",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"name": {
						"title": "VILLAGE_NAME",
						"type": "string"
					}


				}
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				var promise = Masters.query({
					'action':'listVillages',
					'branchId': branchId,
					'villageName': searchOptions.name
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count'];
				}
			},
			listOptions: {
				itemCallback: function(item, index) {
					$log.info(item);
                    $state.go("Page.Engine",{
                        pageName:"Management_VillageCRU",
                        pageId:item.id
                    });

				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						item.village_name,
						'PINCODE : ' + item.pincode,
						null
					]
				},
				getActions: function(){
					return [

						
					];
				}
			}


		}
	};
}]);

irf.pageCollection.factory("Pages__CentreSearch",
["$log", "formHelper", "Masters","$state", "SessionStore",
function($log, formHelper, Masters,$state, SessionStore){
	var branchId = SessionStore.getBranchId();
	return {
		"id": "CentreSearch",
		"type": "search-list",
		"name": "CentreSearch",
		"title": "CENTRE_SEARCH",
		"subTitle": "",
		"uri":"Centre Search",
		initialize: function (model, form, formCtrl) {
			$log.info("search-list sample got initialized");
		},
		definition: {
			title: "Search Centres",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"centreName": {
						"title": "CENTRE_NAME",
						"type": "string"
					}

				}
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				var promise = Masters.query({
					'action':'listCentres',
					'branchId': branchId,
					'centre_name': searchOptions.centreName,
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				itemCallback: function(item, index) {
					$log.info(item);
                    $state.go("Page.Engine",{
                        pageName:"Management_CentreCRU",
                        pageId:item.id
                    });

				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						item.centre_name,
						'Code : ' + item.centre_code,
						null
					]
				},
				getActions: function(){
					return [

					];
				}
			}


		}
	};
}]);

irf.pageCollection.factory(irf.page("management.Roles"),
["$log", "SessionStore", "PageHelper", "formHelper", "RolesPages", "Utils",
    function($log, SessionStore, PageHelper, formHelper, RolesPages, Utils) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "Roles",
            initialize: function(model, form, formCtrl) {
            },
            form: [
                {
                    "type": "box",
                    "title": "Role Creation/Updation",
                    "items": [
                        {
                            key: "roles.role_id",
                            title: "Role ID",
                            type: "lov",
                            lovonly: true,
                            fieldType: "number",
                            outputMap: {
                                "id": "roles.role_id",
                                "name": "roles.role_name"
                            },
                            searchHelper: formHelper,
                            search: function(inputModel, form, model) {
                                return RolesPages.allRoles().$promise;
                            },
                            getListDisplayItem: function(item, index) {
                                return [
                                    item.id,
                                    item.name
                                ];
                            }
                        },
                        {
                            key: "roles.role_name",
                            title: "Role Name",
                            required: true
                        }
                    ]
                },
                {
                    type: "actionbox",
                    condition: "!model.roles.role_id",
                    items: [
                        {
                            type: "submit",
                            title: "Create Role"
                        }
                    ]
                },
                {
                    type: "actionbox",
                    condition: "model.roles.role_id",
                    items: [
                        {
                            type: "submit",
                            title: "Update Role"
                        },
                        {
                            type: "button",
                            icon: "fa fa-refresh",
                            style: "btn-default",
                            title: "Reset",
                            onClick: function(model) {
                                model.roles = {};
                            }
                        }
                    ]
                }
            ],
            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "address": {
                        "type": "object",
                        "title": "Address",
                        "properties": {
                            "city": {
                                "type": "string",
                                "title": "City"
                            }
                        }
                    }
                }
            },
            actions: {
                submit: function(model, form, formName) {
                    Utils.confirm('Are you sure?').then(function() {
                        PageHelper.clearErrors();
                        PageHelper.showLoader();
                        RolesPages.updateRole(model.roles).$promise.then(function(resp){
                            model.roles = resp;
                            PageHelper.showProgress("roles-pages","Role created/updated", 3000);
                        }, function(err){
                            PageHelper.showErrors(err);
                        }).finally(function(){
                            PageHelper.hideLoader();
                        });
                    });
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("management.Pages"),
["$log", "SessionStore", "PageHelper", "formHelper", "RolesPages",
    function($log, SessionStore, PageHelper, formHelper, RolesPages) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "ROLES",
            initialize: function(model, form, formCtrl) {
            },
            form: [
                {
                    "type": "box",
                    colClass: "col-sm-12",
                    "title": "Role & Page Mapping",
                    "items": [
                        {
                            key: "rolePage.currentRoleId",
                            title: "Role ID",
                            type: "lov",
                            lovonly: true,
                            outputMap: {
                                "id": "rolePage.currentRoleId",
                                "name": "rolePage.currentRoleName"
                            },
                            searchHelper: formHelper,
                            search: function(inputModel, form, model) {
                                return RolesPages.allRoles().$promise;
                            },
                            getListDisplayItem: function(item, index) {
                                return [
                                    item.id,
                                    item.name
                                ];
                            },
                            onSelect: function(result, model, context) {
                                PageHelper.showLoader();
                                RolesPages.allPages({roleId:result.id}).$promise.then(function(result){
                                    if (result && result.body && result.body.length) {
                                        model.rolePage.access = [];
                                        for (var i = 0; i < result.body.length; i++) {
                                            var a = {
                                                id: result.body[i].id, // page_id
                                                uri: result.body[i].uri,
                                                rpa_id: result.body[i].rpa_id,
                                                page_config: result.body[i].page_config,
                                                access: !!result.body[i].rpa_id
                                            };
                                            model.rolePage.access.push(a);
                                        };
                                    }
                                }).finally(function(){
                                    PageHelper.hideLoader();
                                });
                            }
                        },
                        {
                            key: "rolePage.currentRoleName",
                            title: "Role Name",
                            readonly: true
                        },
                        {
                            key: "rolePage.access",
                            condition: "model.rolePage.access.length",
                            type: "array",
                            add: null,
                            remove: null,
                            titleExpr: "(model.rolePage.access[arrayIndex].access?'⚫ ':'⚪ ') + model.rolePage.access[arrayIndex].uri",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-sm-3",
                                            items: [
                                                {
                                                    key: "rolePage.access[].access",
                                                    title: "Allow Access",
                                                    type: "checkbox",
                                                    fullwidth: true,
                                                    schema: { default:true }
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-sm-9",
                                            items: [
                                                {
                                                    key: "rolePage.access[].page_config",
                                                    title: "Config",
                                                    type: "textarea"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    type: "actionbox",
                    condition: "model.rolePage.access.length",
                    items: [
                        {
                            type: "submit",
                            title: "Update Pages For Role"
                        }
                    ]
                }
            ],
            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "address": {
                        "type": "object",
                        "title": "Address",
                        "properties": {
                            "streetAddress": {
                                "type": "string",
                                "title": "Street Address"
                            },
                            "city": {
                                "type": "string",
                                "title": "City"
                            }
                        }
                    }
                }
            },
            actions: {
                submit: function(model, form, formName) {
                    var req = {
                        role_id: model.rolePage.currentRoleId,
                        pages: []
                    };

                    for (var i = model.rolePage.access.length - 1; i >= 0; i--) {
                        if (model.rolePage.access[i].access) {
                            var a = {
                                page_id: model.rolePage.access[i].id,
                                page_config: model.rolePage.access[i].page_config
                            };
                            req.pages.push(a);
                        }
                    };

                    PageHelper.showLoader();
                    RolesPages.updateRolePageAccess(req).$promise.then(function(resp){
                        PageHelper.showProgress("roles-pages","Page roles updated", 3000);
                    }, function(err){
                        PageHelper.showErrors(err);
                    }).finally(function(){
                        PageHelper.hideLoader();
                    });
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("management.RolesPages"),
["$log", "SessionStore", "PageHelper", "formHelper", "RolesPages", "Utils",
    function($log, SessionStore, PageHelper, formHelper, RolesPages, Utils) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "ROLES_AND_PAGES",
            initialize: function(model, form, formCtrl) {
                model.address = model.address || {};
            },
            form: [
                {
                    "type": "box",
                    colClass: "col-sm-12",
                    "title": "Role & Page Mapping",
                    "items": [
                        {
                            key: "rolePage.currentRoleId",
                            title: "Role ID",
                            type: "lov",
                            lovonly: true,
                            fieldType: "number",
                            outputMap: {
                                "id": "rolePage.currentRoleId",
                                "name": "rolePage.currentRoleName"
                            },
                            searchHelper: formHelper,
                            search: function(inputModel, form, model) {
                                return RolesPages.allRoles().$promise;
                            },
                            getListDisplayItem: function(item, index) {
                                return [
                                    item.id,
                                    item.name
                                ];
                            },
                            onSelect: function(result, model, context) {
                                PageHelper.showLoader();
                                RolesPages.allPages({roleId:result.id}).$promise.then(function(result){
                                    if (result && result.body && result.body.length) {
                                        model.rolePage.access = [];
                                        for (var i = 0; i < result.body.length; i++) {
                                            var a = {
                                                id: result.body[i].id, // page_id
                                                uri: result.body[i].uri,
                                                rpa_id: result.body[i].rpa_id,
                                                page_config: result.body[i].page_config,
                                                access: !!result.body[i].rpa_id
                                            };
                                            model.rolePage.access.push(a);
                                        };
                                    }
                                }).finally(function(){
                                    PageHelper.hideLoader();
                                });
                            }
                        },
                        {
                            key: "rolePage.currentRoleName",
                            title: "Role Name",
                            readonly: true
                        },
                        {
                            key: "rolePage.access",
                            condition: "model.rolePage.access.length",
                            type: "array",
                            add: null,
                            remove: null,
                            titleExpr: "(model.rolePage.access[arrayIndex].access?'⚫ ':'⚪ ') + model.rolePage.access[arrayIndex].uri",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-sm-3",
                                            items: [
                                                {
                                                    key: "rolePage.access[].access",
                                                    title: "Allow Access",
                                                    type: "checkbox",
                                                    fullwidth: true,
                                                    schema: { default:true }
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-sm-9",
                                            items: [
                                                {
                                                    key: "rolePage.access[].page_config",
                                                    title: "Config",
                                                    type: "textarea"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    type: "actionbox",
                    condition: "model.rolePage.access.length",
                    items: [
                        {
                            type: "submit",
                            title: "Update Pages For Role"
                        }
                    ]
                }
            ],
            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "address": {
                        "type": "object",
                        "title": "Address",
                        "properties": {
                            "streetAddress": {
                                "type": "string",
                                "title": "Street Address"
                            },
                            "city": {
                                "type": "string",
                                "title": "City"
                            }
                        }
                    }
                }
            },
            actions: {
                submit: function(model, form, formName) {
                    var req = {
                        role_id: model.rolePage.currentRoleId,
                        pages: []
                    };

                    for (var i = model.rolePage.access.length - 1; i >= 0; i--) {
                        if (model.rolePage.access[i].access) {
                            var a = {
                                page_id: model.rolePage.access[i].id,
                                page_config: model.rolePage.access[i].page_config
                            };
                            req.pages.push(a);
                        }
                    };
                    Utils.confirm("Are you sure?").then(function(){
                        PageHelper.showLoader();
                        RolesPages.updateRolePageAccess(req).$promise.then(function(resp){
                            PageHelper.showProgress("roles-pages","Page roles updated", 3000);
                        }, function(err){
                            PageHelper.showErrors(err);
                        }).finally(function(){
                            PageHelper.hideLoader();
                        });
                    });
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("management.UserRoles"),
["$log", "SessionStore", "PageHelper", "formHelper", "RolesPages", "Utils",
    function($log, SessionStore, PageHelper, formHelper, RolesPages, Utils) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "User Roles",
            initialize: function(model, form, formCtrl) {},
            form: [{
                "type": "box",
                "title": "User Role Mapping",
                "items": [{
                    key: "userRoles.user_id",
                    type: "lov",
                    lovonly: true,
                    inputMap: {
                        "userId": {
                            "key": "userRoles.user_id"
                        },
                        "userName": {
                            "key": "userRoles.user_name"
                        }
                    },
                    outputMap: {
                        "userId": "userRoles.user_id",
                        "userName": "userRoles.user_name",
                        "roleId": "userRoles.role_id",
                        "roleName": "userRoles.role_name",
                        "userRoleId": "userRoles.user_role_id"
                    },
                    searchHelper: formHelper,
                    search: function(inputModel, form, model) {
                        return RolesPages.searchUsers({
                            userId: inputModel.userId,
                            userName: inputModel.userName
                        }).$promise;
                    },
                    getListDisplayItem: function(item, index) {
                        return [
                            item.userId + ': ' + item.userName,
                            item.roleId ? (item.roleId + ': ' + item.roleName) : ''
                        ];
                    }
                }, {
                    key: "userRoles.user_name",
                    readonly: true
                }, {
                    key: "userRoles.role_id",
                    title: "Role ID",
                    type: "lov",
                    lovonly: true,
                    fieldType: "number",
                    outputMap: {
                        "id": "userRoles.role_id",
                        "name": "userRoles.role_name"
                    },
                    searchHelper: formHelper,
                    search: function(inputModel, form, model) {
                        return RolesPages.allRoles({
                            userid: inputModel.id
                        }).$promise;
                    },
                    getListDisplayItem: function(item, index) {
                        return [
                            item.id,
                            item.name
                        ];
                    }
                }, {
                    key: "userRoles.role_name",
                    title: "Role name",
                    readonly: true
                }]
            }, {
                type: "actionbox",
                condition: "!model.userRoles.user_role_id",
                items: [{
                    type: "submit",
                    title: "Add User Role"
                }]
            }, {
                type: "actionbox",
                condition: "model.userRoles.user_role_id",
                items: [{
                    type: "submit",
                    title: "Update User Role"
                }]
            }],
            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "userRoles": {
                        "type": "object",
                        "properties": {
                            "user_id": {
                                "type": "string",
                                "title": "User ID"
                            },
                            "user_name": {
                                "type": "string",
                                "title": "User Name"
                            },
                            "role_id": {
                                "type": ["null", "string", "number"],
                                "title": "Role ID"
                            },
                            "role_name": {
                                "type": ["null", "string"],
                                "title": "Role Name"
                            }
                        }
                    }
                }
            },
            actions: {
                submit: function(model, form, formName) {
                    Utils.confirm('Are you sure?').then(function() {
                        PageHelper.clearErrors();
                        PageHelper.showLoader();
                        RolesPages.updateUserRole(model.userRoles).$promise.then(function(resp) {
                            model.userRoles = resp;
                            PageHelper.showProgress("user-roles", "Role created/updated " + model.userRoles.user_role_id, 3000);
                        }, function(err) {
                            PageHelper.showErrors(err);
                        }).finally(function() {
                            PageHelper.hideLoader();
                        });
                    });
                }
            }
        };
    }
]);

irf.pageCollection.factory(irf.page("management.ReferenceCodes"), ["$log", "SessionStore", "PageHelper", "formHelper", "ReferenceCode",
    function($log, SessionStore, PageHelper, formHelper, ReferenceCode) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "Reference Codes",
            initialize: function(model, form, formCtrl) {
                model.reference = model.reference || {};
            },
            form: [{
                "type": "box",
                colClass: "col-sm-6",
                "title": "Reference Codes",
                "items": [{
                    key: "reference.ClassifierName",
                    title: "Classifier Name",
                    type: "lov",
                    outputMap: {
                        "name": "reference.ClassifierName"
                    },
                    searchHelper: formHelper,
                    search: function(inputModel, form, model) {
                        return ReferenceCode.allClassifier().$promise;
                    },
                    getListDisplayItem: function(item, index) {
                        return [
                            item.code
                        ];
                    },
                    onSelect: function(result, model, context) {
                        PageHelper.showLoader();
                        ReferenceCode.allCodes({
                            classifier: result.code
                        }).$promise.then(function(result) {
                            if (result && result.body && result.body.length) {
                                model.reference.codes = result.body;
                                model.reference.parentClassifier = result.body[0].parentClassifier;
                            }
                        }).finally(function() {
                            PageHelper.hideLoader();
                        });
                    }
                }, {
                    key: "reference.parentClassifier",
                    condition: "model.reference.codes.length",
                    title: "Parent Classifier",
                    lovonly: true,
                    type: "lov",
                    outputMap: {
                        "name": "reference.parentClassifier"
                    },
                    searchHelper: formHelper,
                    search: function(inputModel, form, model) {
                        return ReferenceCode.allClassifier().$promise;
                    },
                    getListDisplayItem: function(item, index) {
                        return [
                            item.code,
                            item.displayName,
                            item.name
                        ];
                    },
                    onSelect: function(result, model, context) {
                        PageHelper.showLoader();
                        for (var i = 0; i < model.reference.codes.length; i++) {
                            model.reference.codes[i].parentClassifier = result.code;

                        }
                        PageHelper.hideLoader();
                    }
                }, {
                    key: "reference.codes",
                    condition: "model.reference.codes.length",
                    type: "array",
                    //add: null,
                    //remove: null,
                    items: [{
                        key: "reference.codes[].id",
                        title: "Id",
                        readonly: true
                    }, {
                        key: "reference.codes[].name",
                        title: "Name"
                    }, {
                        key: "reference.codes[].code",
                        title: "Code"
                    }, {
                        key: "reference.codes[].parentReferenceCode",
                        title: "Parent Code",
                        type: "lov",
                        lovonly: true,
                        outputMap: {
                            "code": "reference.codes[arrayIndex].parentReferenceCode"
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form, model) {
                            var promise = ReferenceCode.allCodes({
                                classifier: model.reference.parentClassifier
                            }).$promise;

                            return promise;
                        },
                        getListDisplayItem: function(item, index) {
                            return [
                                item.code,
                                item.name
                            ];
                        },
                    }, {
                        key: "reference.codes[].field1",
                        title: "Field1"
                    }, {
                        key: "reference.codes[].field2",
                        title: "Field2"
                    }, {
                        key: "reference.codes[].field3",
                        title: "Field3"
                    }, {
                        key: "reference.codes[].field4",
                        title: "Field4"
                    }, {
                        key: "reference.codes[].field5",
                        title: "Field5"
                    }]
                }, {
                    type: "actionbox",
                    condition: "model.reference.codes.length",
                    items: [{
                        type: "submit",
                        title: "Update"
                    }]
                }]
            }],

            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "reference": {
                        "type": "object",
                        "properties": {
                            "codes": {
                                "type": "array",
                                "title": "Codes",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "number",
                                            "title": "NUMBER"
                                        },
                                        "name": {
                                            "type": "string",
                                            "title": "NUMBER"
                                        },
                                        "parentClassifier": {
                                            "type": "string",
                                            "title": "PARENT_CLASSIFIER"
                                        },
                                        "parentCode": {
                                            "type": "string",
                                            "title": "PARENT_CODE"
                                        },
                                        "field1": {
                                            "type": "string",
                                            "title": "FIELD!"
                                        },
                                        "field2": {
                                            "type": "string",
                                            "title": "FIELD2"
                                        },
                                        "field3": {
                                            "type": "string",
                                            "title": "FIELD3"
                                        },
                                        "field4": {
                                            "type": "string",
                                            "title": "FIELD4"
                                        },
                                        "field5": {
                                            "type": "string",
                                            "title": "FIELD5"
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            },

            actions: {
                submit: function(model, form, formName) {}
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("EnrollmentHouseVerificationQueue"),
["$log", "formHelper", "Enrollment", "$state", "SessionStore",
function($log, formHelper, Enrollment, $state, SessionStore){
	return {
		"type": "search-list",
		"title": "T_HOUSE_VERIFICATION_PENDING_QUEUE",
		"subTitle": "T_ENROLLMENTS_PENDING",
		initialize: function (model, form, formCtrl) {
			$log.info("search-list sample got initialized");
			model.branch = SessionStore.getBranch();
			model.stage = 'Stage02';
		},
		offline: true,
		getOfflineDisplayItem: function(item, index){
			return [
				"Branch: " + item["branch"],
				"Centre: " + item["centre"]
			]
		},
		getOfflinePromise: function(searchOptions){      /* Should return the Promise */
			var promise = Enrollment.search({
				'branchName': searchOptions.branch,
				'centreCode': searchOptions.centre,
				'firstName': searchOptions.first_name,
				'lastName': searchOptions.last_name,
				'page': 1,
				'per_page': 100,
				'stage': "Stage02"
			}).$promise;

			return promise;
		},
		definition: {
			title: "T_SEARCH_CUSTOMERS",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"required":["branch"],
				"properties": {
					"first_name": {
						"title": "CUSTOMER_NAME",
						"type": "string"
					},
					"lastName": {
						"title": "LASTNAME",
						"type": "string"
					},
					"kyc_no": {
						"title": "KYC_NO",
						"type": "string"
					},
					"branch": {
						"title": "BRANCH_NAME",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true
						}
					},
					"centre": {
						"title": "CENTRE",
						"type": "string",
						"enumCode": "centre",
						"x-schema-form": {
							"type": "select",
							"filter": {
								"parentCode as branch": "model.branch"
							},
							"screenFilter": true
						}
					}
				}
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
				var promise = Enrollment.search({
					'branchName': searchOptions.branch,
					'centreCode': searchOptions.centre,
					'firstName': searchOptions.first_name,
					'lastName': searchOptions.lastName,
					'page': pageOpts.pageNo,
					'per_page': pageOpts.itemsPerPage,
					'stage': "Stage02"
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 20;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				itemCallback: function(item, index) {
					$log.info(item);
					$log.info("Redirecting");
					$state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						item.firstName + " " + (item.lastName!=null?item.lastName:""),
						'Customer ID : ' + item.id,
						null
					]
				},
				getActions: function(){
					return [
						{
							name: "Do House Verification",
							desc: "",
							fn: function(item, index){
								$log.info("Redirecting");
								$state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
							},
							isApplicable: function(item, index){
								//if (index%2==0){
								//	return false;
								//}
								return true;
							}
						}
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("CustomerSearch"),
["$log", "formHelper", "Enrollment","$state", "SessionStore", "Utils",
function($log, formHelper, Enrollment,$state, SessionStore, Utils){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "CUSTOMER_SEARCH",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model.branch = branch;
			$log.info("search-list sample got initialized");
			formCtrl.submit();
		},
		definition: {
			title: "Search Customers",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"first_name": {
						"title": "CUSTOMER_NAME",
						"type": "string"
					},
					"lastName": {
						"title": "LASTNAME",
						"type": "string"
					},
					"kyc_no": {
						"title": "KYC_NO",
						"type": "string"
					},
					"urnNo": {
						"title": "URN_NO",
						"type": "number"
					},
					"branch": {
						"title": "BRANCH_NAME",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true
						}
					},
					"centre": {
						"title": "CENTRE",
						"type": "string",
						"enumCode": "centre",
						"x-schema-form": {
							"type": "select",
							"filter": {
								"parentCode as branch": "model.branch"
							},
							"screenFilter": true
						}
					}

				},
				"required":["branch"]
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				var promise = Enrollment.search({
					'branchName': searchOptions.branch,
					'firstName': searchOptions.first_name,
					'centreCode': searchOptions.centre,
					'page': pageOpts.pageNo,
					'per_page': pageOpts.itemsPerPage,
					'kycNumber': searchOptions.kyc_no,
					'lastName': searchOptions.lastName,
					'urnNo': searchOptions.urnNo
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				selectable: true,
				expandable: true,
				listStyle: "table",
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						Utils.getFullName(item.firstName, item.middleName, item.lastName),
						'Customer ID : ' + item.id,
						item.urnNo?('URN : ' + item.urnNo):("{{'CURRENT_STAGE'|translate}} : " + (item.currentStage==='Stage02'?'House verification':
							(item.currentStage==='Stage01'?'Enrollment':item.currentStage))),
						"{{'BRANCH'|translate}} : " + item.kgfsName,
						"{{'CENTRE_CODE'|translate}} : " + item.centreCode,
						"{{'FATHERS_NAME'|translate}} : " + Utils.getFullName(item.fatherFirstName, item.fatherMiddleName, item.fatherLastName)
					]
				},
				getTableConfig: function() {
					return {
						"serverPaginate": true,
						"paginate": true,
						"pageLength": 10
					};
				},
				getColumns: function(){
					return [
						{
							title:'NAME',
							data: 'firstName',
							render: function(data, type, full, meta) {
								return (full.customerType==='Individual'?'<i class="fa fa-user">&nbsp;</i> ':'<i class="fa fa-industry"></i> ') + data;
							}
						},
						{
							title:'URN_NO',
							data: 'urnNo'
							// type: 'html',
						},
						{
							title:'CURRENT_STAGE',
							data: 'currentStage'
						},
						{
							title:'BRANCH',
							data: 'kgfsName'
						},
						{
							title:'CENTRE_CODE',
							data: 'centreCode'
						},
						{
							title:'FATHERS_NAME',
							data: 'fatherFirstName'
						}
					]
				},
				getActions: function(){
					return [
						{
							name: "Enroll Customer",
							desc: "",
							icon: "fa fa-user-plus",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"ProfileInformation",
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='BasicEnrolment')
									return true;
								return false;
							}
						},
						{
							name: "Do House Verification",
							desc: "",
							icon: "fa fa-building",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"AssetsLiabilitiesAndHealth",
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Completed')
									return true;
								return false;
							}
						},
						{
							name: "CUSTOMER_360",
							desc: "",
							icon: "fa fa-user",
							fn: function(item, index){
								$state.go("Page.Customer360",{
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Completed')
									return true;
								return false;
							}
						}
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory("EnrollmentHelper",
["$log", "$q","Enrollment", 'PageHelper', 'irfProgressMessage', 'Utils', 'SessionStore',
function($log, $q, Enrollment, PageHelper, irfProgressMessage, Utils, SessionStore){

    var fixData = function(model){
        /* TODO Validations */

        /* Fix to make additionalKYCs as an array */
        //reqData['customer']['additionalKYCs'] = [reqData['customer']['additionalKYCs']];

        /* Fix to add atleast one fingerprint */
        model['customer']['leftHandIndexImageId'] = "232";

        if (model['customer']['mailSameAsResidence'] === true){
            model['customer']['mailingDoorNo'] = model['customer']['doorNo'];
            model['customer']['mailingStreet'] = model['customer']['street'];
            model['customer']['mailingLocality'] = model['customer']['locality'];
            model['customer']['mailingPostoffice'] = model['customer']['postOffice'];
            model['customer']['mailingDistrict'] = model['customer']['district'];
            model['customer']['mailingPincode'] = model['customer']['pincode'];
            model['customer']['mailingState'] = model['customer']['state'];
        }

        if(model.customer.addressProofSameAsIdProof){

            model.customer.addressProof=_.clone(model.customer.identityProof);
            model.customer.addressProofImageId=_.clone(model.customer.identityProofImageId);
            model.customer.addressProofNo=_.clone(model.customer.identityProofNo);
            model.customer.addressProofIssueDate=_.clone(model.customer.idProofIssueDate);
            model.customer.addressProofValidUptoDate=_.clone(model.customer.idProofValidUptoDate);
            model.customer.addressProofReverseImageId = _.clone(model.customer.identityProofReverseImageId);
        }
        if (model.customer.udf && model.customer.udf.userDefinedFieldValues
            && model.customer.udf.userDefinedFieldValues.udf1) {
            model.customer.udf.userDefinedFieldValues.udf1 =
                model.customer.udf.userDefinedFieldValues.udf1 === true
                || model.customer.udf.userDefinedFieldValues.udf1 === 'true';
        }

        Utils.removeNulls(model,true);
        return model;
    };

    var validateData = function(model) {
        PageHelper.clearErrors();
        if (_.hasIn(model.customer, 'udf') && model.customer.udf && model.customer.udf.userDefinedFieldValues) {
            if (model.customer.udf.userDefinedFieldValues.udf36
                || model.customer.udf.userDefinedFieldValues.udf35
                || model.customer.udf.userDefinedFieldValues.udf34) {
                if (!model.customer.udf.userDefinedFieldValues.udf33) {
                    PageHelper.setError({message:'Spouse ID Proof type is mandatory when Spouse ID Details are given'});
                    return false;
                }
            }
        }
        if (_.hasIn(model.customer, 'additionalKYCs') && model.customer.additionalKYCs[0]
            && (model.customer.additionalKYCs[0].kyc1ProofNumber
            || model.customer.additionalKYCs[0].kyc1ProofType
            || model.customer.additionalKYCs[0].kyc1ImagePath
            || model.customer.additionalKYCs[0].kyc1IssueDate
            || model.customer.additionalKYCs[0].kyc1ValidUptoDate)) {
            if (model.customer.additionalKYCs[0].kyc1ProofNumber
                && model.customer.additionalKYCs[0].kyc1ProofType
                && model.customer.additionalKYCs[0].kyc1ImagePath
                && model.customer.additionalKYCs[0].kyc1IssueDate
                && model.customer.additionalKYCs[0].kyc1ValidUptoDate) {
                if (moment(model.customer.additionalKYCs[0].kyc1IssueDate).isAfter(moment())) {
                    PageHelper.setError({message:'Issue date should be a past date in Additional KYC 1'});
                    return false;
                }
                if (moment(model.customer.additionalKYCs[0].kyc1ValidUptoDate).isBefore(moment())) {
                    PageHelper.setError({message:'Valid upto date should be a future date in Additional KYC 1'});
                    return false;
                }
            } else {
                PageHelper.setError({message:'All fields are mandatory while submitting Additional KYC 1'});
                return false;
            }
        }
        if (_.hasIn(model.customer, 'additionalKYCs')  && model.customer.additionalKYCs[1]
            && (model.customer.additionalKYCs[1].kyc1ProofNumber
            || model.customer.additionalKYCs[1].kyc1ProofType
            || model.customer.additionalKYCs[1].kyc1ImagePath
            || model.customer.additionalKYCs[1].kyc1IssueDate
            || model.customer.additionalKYCs[1].kyc1ValidUptoDate)) {
            if (model.customer.additionalKYCs[1].kyc1ProofNumber
                && model.customer.additionalKYCs[1].kyc1ProofType
                && model.customer.additionalKYCs[1].kyc1ImagePath
                && model.customer.additionalKYCs[1].kyc1IssueDate
                && model.customer.additionalKYCs[1].kyc1ValidUptoDate) {
                if (moment(model.customer.additionalKYCs[1].kyc1IssueDate).isAfter(moment())) {
                    PageHelper.setError({message:'Issue date should be a past date in Additional KYC 2'});
                    return false;
                }
                if (moment(model.customer.additionalKYCs[1].kyc1ValidUptoDate).isBefore(moment())) {
                    PageHelper.setError({message:'Valid upto date should be a future date in Additional KYC 2'});
                    return false;
                }
            } else {
                PageHelper.setError({message:'All fields are mandatory while submitting Additional KYC 2'});
                return false;
            }
        }
        if (model.customer.spouseDateOfBirth && !model.customer.spouseFirstName) {
            PageHelper.setError({message:'Spouse Name is required when Spouse Date of birth is entered'});
            return false;
        }
        return true;
    };
    /*
    * function saveData:
    *
    * if cust id is not set, data is saved and the promise is resolved with SAVE's response
    * if cust id is set, promise is rejected with true (indicates doProceed)
    * if error occurs during save, promise is rejected with false (indicates don't proceed
    * */
    var saveData = function(reqData){

        var deferred = $q.defer();
        $log.info("Attempting Save");
        $log.info(reqData);
        PageHelper.clearErrors();
        PageHelper.showLoader();
        irfProgressMessage.pop('enrollment-save', 'Working...');
        reqData['enrollmentAction'] = 'SAVE';
        /* TODO fix for KYC not saving **/
        if (!_.hasIn(reqData.customer, 'additionalKYCs') || _.isNull(reqData.customer.additionalKYCs)){
            reqData.customer.additionalKYCs = [];
            reqData.customer.additionalKYCs.push({});
        }
        var action = reqData.customer.id ? 'update' : 'save';
        Enrollment[action](reqData, function (res, headers) {
            irfProgressMessage.pop('enrollment-save', 'Data Saved', 2000);
            $log.info(res);
            PageHelper.hideLoader();
            deferred.resolve(res);
        }, function (res) {
            PageHelper.hideLoader();
            irfProgressMessage.pop('enrollment-save', 'Oops. Some error.', 2000);
            PageHelper.showErrors(res);
            deferred.reject(res);
        });
        return deferred.promise;

    };
    /*
    * fn proceedData:
    *
    * if cust id not set, promise rejected with null
    * if cust id set, promise resolved with PROCEED response
    * if error occurs, promise rejected with null.
    * */
    var proceedData = function(res){

        var deferred = $q.defer();
        $log.info("Attempting Proceed");
        $log.info(res);
        if(res.customer.id===undefined || res.customer.id===null){
            $log.info("Customer id null, cannot proceed");
            deferred.reject(null);
        }
        else {
            PageHelper.clearErrors();
            PageHelper.showLoader();
            irfProgressMessage.pop('enrollment-save', 'Working...');
            res.enrollmentAction = "PROCEED";
            Enrollment.updateEnrollment(res, function (res, headers) {
                PageHelper.hideLoader();
                irfProgressMessage.pop('enrollment-save', 'Done. Customer created with ID: ' + res.customer.id, 5000);
                deferred.resolve(res);
            }, function (res, headers) {
                PageHelper.hideLoader();
                irfProgressMessage.pop('enrollment-save', 'Oops. Some error.', 2000);
                PageHelper.showErrors(res);
                deferred.reject(res);
            });
        }
        return deferred.promise;

    };

    var parseAadhaar = function(aadhaarXml) {
        var aadhaarData = {
            "uid" :null,
            "name":null,
            "gender":null,
            "dob":null,
            "yob":null,
            "co":null,
            "house":null,
            "street":null,
            "lm":null,
            "loc":null,
            "vtc":null,
            "dist":null,
            "state":null,
            "pc":null
        };
        var aadhaarDoc = $.parseXML(aadhaarXml);
        aadhaarXmlData = $(aadhaarDoc).find('PrintLetterBarcodeData');
        if (aadhaarXmlData && aadhaarXmlData.length) {
            angular.forEach(aadhaarXmlData[0].attributes, function(attr, i){
                this[attr.name] = attr.value;
            }, aadhaarData);
            aadhaarData['pc'] = Number(aadhaarData['pc']);
            var g = aadhaarData['gender'].toUpperCase();
            aadhaarData['gender'] = (g === 'M' || g === 'MALE') ? 'MALE' : ((g === 'F' || g === 'FEMALE') ? 'FEMALE' : 'OTHERS');
        }
        return aadhaarData;
    };

    var customerAadhaarOnCapture = function(result, model, form) {
        $log.info(result); // spouse id proof
        // "co":""
        // "lm":"" landmark
        var aadhaarData = parseAadhaar(result.text);
        $log.info(aadhaarData);
        model.customer.aadhaarNo = aadhaarData.uid;
        model.customer.firstName = aadhaarData.name;
        model.customer.gender = aadhaarData.gender;
        model.customer.doorNo = aadhaarData.house;
        model.customer.street = aadhaarData.street;
        model.customer.locality = aadhaarData.loc;
        model.customer.villageName = aadhaarData.vtc;
        model.customer.district = aadhaarData.dist;
        model.customer.state = aadhaarData.state;
        model.customer.pincode = aadhaarData.pc;
        if (aadhaarData.dob) {
            $log.debug('aadhaarData dob: ' + aadhaarData.dob);
            if (!isNaN(aadhaarData.dob.substring(2, 3))) {
                model.customer.dateOfBirth = aadhaarData.dob;
            } else {
                model.customer.dateOfBirth = moment(aadhaarData.dob, 'DD/MM/YYYY').format(SessionStore.getSystemDateFormat());
            }
            $log.debug('customer dateOfBirth: ' + model.customer.dateOfBirth);
            model.customer.age = moment().diff(moment(model.customer.dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
        } else if (aadhaarData.yob) {
            $log.debug('aadhaarData yob: ' + aadhaarData.yob);
            model.customer.dateOfBirth = aadhaarData.yob + '-01-01';
            model.customer.age = moment().diff(moment(model.customer.dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
        }
        if (!model.customer.identityProof && !model.customer.identityProofNo
            && !model.customer.addressProof && !model.customer.addressProofNo) {
            model.customer.addressProofSameAsIdProof = true;
        }
        if (!model.customer.identityProof && !model.customer.identityProofNo) {
            model.customer.identityProof = 'Aadhar card';
            model.customer.identityProofNo = aadhaarData.uid;
        }
        if (!model.customer.addressProof && !model.customer.addressProofNo) {
            model.customer.addressProof = 'Aadhar card';
            model.customer.addressProofNo = aadhaarData.uid;
        }
    };

    return {
        fixData: fixData,
        saveData: saveData,
        proceedData: proceedData,
        validateData: validateData,
        parseAadhaar: parseAadhaar,
        customerAadhaarOnCapture: customerAadhaarOnCapture
    };
}]);

irf.pageCollection.factory(irf.page("ProfileInformation"),
["$log", "$q","Enrollment", 'EnrollmentHelper', 'PageHelper','formHelper',"elementsUtils",
'irfProgressMessage','SessionStore',"$state", "$stateParams",
function($log, $q, Enrollment, EnrollmentHelper, PageHelper,formHelper,elementsUtils,
    irfProgressMessage,SessionStore,$state,$stateParams){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "CUSTOMER_ENROLLMENT",
        "subTitle": "STAGE_1",
        initialize: function (model, form, formCtrl) {
            model.customer = model.customer || {};
            model.branchId = SessionStore.getBranchId() + '';
            $log.info(formHelper.enum('bank'));
            $log.info("ProfileInformation page got initialized:"+model.branchId);
        },
        modelPromise: function(pageId, _model) {
            var deferred = $q.defer();
            PageHelper.showLoader();
            irfProgressMessage.pop("enrollment-save","Loading Customer Data...");
            Enrollment.getCustomerById({id:pageId},function(resp,header){
                var model = {$$OFFLINE_FILES$$:_model.$$OFFLINE_FILES$$};
                model.customer = resp;
                model = EnrollmentHelper.fixData(model);
                model._mode = 'EDIT';
                if (model.customer.currentStage==='Stage01') {
                    irfProgressMessage.pop("enrollment-save","Load Complete",2000);
                    deferred.resolve(model);
                    window.scrollTo(0, 0);
                } else {
                    irfProgressMessage.pop("enrollment-save","Customer "+model.customer.id+" already enrolled", 5000);
                    $state.go("Page.Landing");
                }
                PageHelper.hideLoader();
            },function(resp){
                PageHelper.hideLoader();
                irfProgressMessage.pop("enrollment-save","An Error Occurred. Failed to fetch Data",5000);
                $state.go("Page.Engine",{
                    pageName:"CustomerSearch",
                    pageId:null
                });
            });
            return deferred.promise;
        },
        offline: true,
        getOfflineDisplayItem: function(item, index){
            return [
                item.customer.urnNo,
                Utils.getFullName(item.customer.firstName, item.customer.middleName, item.customer.lastName),
                item.customer.villageName
            ]
        },
        form: [{
            "type": "box",
            "title": "CUSTOMER_INFORMATION",
            "items": [
                {
                    key: "customer.firstName",
                    title:"FULL_NAME",
                    type:"qrcode",
                    onCapture: EnrollmentHelper.customerAadhaarOnCapture
                },
                {
                    key:"customer.photoImageId",
                    type:"file",
                    fileType:"image/*",
                    "offline": true
                },
                {
                    key:"customer.centreCode",
                    type:"select",
                    filter: {
                        "parentCode": "model.branchId"
                    },
                    screenFilter: true
                },
                {
                    key:"customer.enrolledAs",
                    type:"radios"
                },
                {
                    key:"customer.gender",
                    type:"radios"
                },
                {
                    key:"customer.age",
                    title: "AGE",
                    type:"number",
                    "onChange": function(modelValue, form, model) {
                        if (model.customer.age > 0) {
                            if (model.customer.dateOfBirth) {
                                model.customer.dateOfBirth = moment(new Date()).subtract(model.customer.age, 'years').format('YYYY-') + moment(model.customer.dateOfBirth, 'YYYY-MM-DD').format('MM-DD');
                            } else {
                                model.customer.dateOfBirth = moment(new Date()).subtract(model.customer.age, 'years').format('YYYY-MM-DD');
                            }
                        }
                    }
                },
                {
                    key:"customer.dateOfBirth",
                    type:"date",
                    "onChange": function(modelValue, form, model) {
                        if (model.customer.dateOfBirth) {
                            model.customer.age = moment().diff(moment(model.customer.dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                        }
                    }
                },
                {
                    key: "customer.fatherFirstName",
                    title: "FATHER_FULL_NAME"
                },
                {
                    key:"customer.maritalStatus",
                    type:"select"
                },
                {
                    key: "customer.spouseFirstName",
                    title: "SPOUSE_FULL_NAME",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    type:"qrcode",
                    onCapture: function(result, model, form) {
                        $log.info(result); // spouse id proof
                        var aadhaarData = EnrollmentHelper.parseAadhaar(result.text);
                        $log.info(aadhaarData);
                        model.customer.udf.userDefinedFieldValues.udf33 = 'Aadhar card';
                        model.customer.udf.userDefinedFieldValues.udf36 = aadhaarData.uid;
                        model.customer.spouseFirstName = aadhaarData.name;
                        if (aadhaarData.yob) {
                            model.customer.spouseDateOfBirth = aadhaarData.yob + '-01-01';
                            model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                        }
                    }
                },
                {
                    key:"customer.spouseAge",
                    title: "SPOUSE_AGE",
                    type:"number",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    "onChange": function(modelValue, form, model) {
                        if (model.customer.spouseAge > 0) {
                            if (model.customer.spouseDateOfBirth) {
                                model.customer.spouseDateOfBirth = moment(new Date()).subtract(model.customer.spouseAge, 'years').format('YYYY-') + moment(model.customer.spouseDateOfBirth, 'YYYY-MM-DD').format('MM-DD');
                            } else {
                                model.customer.spouseDateOfBirth = moment(new Date()).subtract(model.customer.spouseAge, 'years').format('YYYY-MM-DD');
                            }
                        }
                    }
                },
                {
                    key:"customer.spouseDateOfBirth",
                    type:"date",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    "onChange": function(modelValue, form, model) {
                        if (model.customer.spouseDateOfBirth) {
                            model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                        }
                    }
                },
                {
                    key:"customer.udf.userDefinedFieldValues.udf1",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    title:"SPOUSE_LOAN_CONSENT"

                }

            ]
        },
        {
            "type": "box",
            "title": "CONTACT_INFORMATION",
            "items":[{
                type: "fieldset",
                title: "CUSTOMER_RESIDENTIAL_ADDRESS",
                items: [

                        "customer.doorNo",
                        "customer.street",
                        "customer.locality",
                        {
                            key:"customer.villageName",
                            type:"select",
                            filter: {
                                'parentCode': 'model.branchId'
                            },
                            screenFilter: true
                        },
                        "customer.postOffice",
                        {
                            key:"customer.district",
                            type:"select",
                            screenFilter: true
                        },
                        "customer.pincode",
                        {
                            key:"customer.state",
                            type:"select",
                            screenFilter: true
                        },
                        "customer.stdCode",
                        "customer.landLineNo",
                        "customer.mobilePhone",
                        "customer.mailSameAsResidence"
                    ]
                },{
                    type: "fieldset",
                    title: "CUSTOMER_PERMANENT_ADDRESS",
                    condition:"!model.customer.mailSameAsResidence",
                    items: [
                        "customer.mailingDoorNo",
                        "customer.mailingStreet",
                        "customer.mailingLocality",
                        "customer.mailingPostoffice",
                        {
                            key:"customer.mailingDistrict",
                            type:"select",
                            screenFilter: true
                        },
                        "customer.mailingPincode",
                        {
                            key:"customer.mailingState",
                            type:"select",
                            screenFilter: true
                        }
                    ]
                }
            ]
        },
        {
            type:"box",
            title:"KYC",
            items:[
                {
                    "key": "customer.aadhaarNo",
                    type:"qrcode",
                    onChange:"actions.setProofs(model)",
                    onCapture: EnrollmentHelper.customerAadhaarOnCapture
                },
                {
                    type:"fieldset",
                    title:"IDENTITY_PROOF",
                    items:[
                        {
                            key:"customer.identityProof",
                            type:"select"
                        },
                        {
                            key:"customer.identityProofImageId",
                            type:"file",
                            fileType:"image/*",
                            "offline": true
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf30",
                            type:"file",
                            fileType:"image/*",
                            "offline": true
                        },
                        {
                            key:"customer.identityProofNo",
                            type:"barcode",
                            onCapture: function(result, model, form) {
                                $log.info(result);
                                model.customer.identityProofNo = result.text;
                            }
                        },
                        {
                            key:"customer.idProofIssueDate",
                            type:"date"
                        },
                        {
                            key:"customer.idProofValidUptoDate",
                            type:"date"
                        },
                        {
                            key:"customer.addressProofSameAsIdProof"
                        }
                    ]
                },
                {
                    type:"fieldset",
                    title:"ADDRESS_PROOF",
                    condition:"!model.customer.addressProofSameAsIdProof",
                    items:[
                        {
                            key:"customer.addressProof",
                            type:"select"
                        },
                        {
                            key:"customer.addressProofImageId",
                            type:"file",
                            fileType:"image/*",
                            "offline": true
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf29",
                            type:"file",
                            fileType:"image/*",
                            "offline": true
                        },
                        {
                            key:"customer.addressProofNo",
                            type:"barcode",
                            onCapture: function(result, model, form) {
                                $log.info(result);
                                model.customer.addressProofNo = result.text;
                            }
                        },
                        {
                            key:"customer.addressProofIssueDate",
                            type:"date"
                        },
                        {
                            key:"customer.addressProofValidUptoDate",
                            type:"date"
                        },
                    ]
                },
                {
                    type:"fieldset",
                    title:"SPOUSE_IDENTITY_PROOF",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    items:[
                        {
                            key:"customer.udf.userDefinedFieldValues.udf33",
                            type:"select",
                            onChange: function(modelValue) {
                                $log.info(modelValue);
                            }
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf34",
                            type:"file",
                            fileType:"image/*",
                            "offline": true
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf35",
                            type:"file",
                            fileType:"image/*",
                            "offline": true
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf36",
                            condition: "model.customer.udf.userDefinedFieldValues.udf33 !== 'Aadhar card'",
                            type:"barcode",
                            onCapture: function(result, model, form) {
                                $log.info(result); // spouse id proof
                                model.customer.udf.userDefinedFieldValues.udf36 = result.text;
                            }
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf36",
                            condition: "model.customer.udf.userDefinedFieldValues.udf33 === 'Aadhar card'",
                            type:"qrcode",
                            onCapture: function(result, model, form) {
                                $log.info(result); // spouse id proof
                                var aadhaarData = EnrollmentHelper.parseAadhaar(result.text);
                                $log.info(aadhaarData);
                                model.customer.udf.userDefinedFieldValues.udf36 = aadhaarData.uid;
                                model.customer.spouseFirstName = aadhaarData.name;
                                if (aadhaarData.yob) {
                                    model.customer.spouseDateOfBirth = aadhaarData.yob + '-01-01';
                                    model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                                }
                            }
                        }
                    ]
                }

            ]
        },{
            "type":"box",
            "title":"ADDITIONAL_KYC",
            "items":[
                {
                    "key":"customer.additionalKYCs",
                    "type":"array",
                    "add":null,
                    "remove":null,
                    "title":"ADDITIONAL_KYC",
                    "items":[
                        {
                            key:"customer.additionalKYCs[].kyc1ProofNumber",
                            type:"barcode",
                            onCapture: function(result, model, form) {
                                $log.info(result);
                                model.customer.additionalKYCs[form.arrayIndex].kyc1ProofNumber = result.text;
                            }

                        },
                        {
                            key:"customer.additionalKYCs[].kyc1ProofType",
                            type:"select"
                        },
                        {
                            key:"customer.additionalKYCs[].kyc1ImagePath",
                            type:"file",
                            fileType:"image/*",
                            "offline": true
                        },
                        {
                            key:"customer.additionalKYCs[].kyc1IssueDate",
                            type:"date"
                        },
                        {
                            key:"customer.additionalKYCs[].kyc1ValidUptoDate",
                            type:"date"
                        },
                        {
                            key:"customer.additionalKYCs[].kyc2ProofNumber",
                            type:"barcode",
                            onCapture: function(result, model, form) {
                                $log.info(result);
                                model.customer.additionalKYCs[form.arrayIndex].kyc2ProofNumber = result.text;
                            }
                        },
                        {
                            key:"customer.additionalKYCs[].kyc2ProofType",
                            type:"select"
                        },
                        {
                            key:"customer.additionalKYCs[].kyc2ImagePath",
                            type:"file",
                            fileType:"image/*",
                            "offline": true
                        },
                        {
                            key:"customer.additionalKYCs[].kyc2IssueDate",
                            type:"date"
                        },
                        {
                            key:"customer.additionalKYCs[].kyc2ValidUptoDate",
                            type:"date"
                        }
                    ]
                }
            ]
        },{
            "type": "actionbox",
            "condition": "model._mode != 'EDIT'",
            "items": [{
                "type": "save",
                "title": "SAVE_OFFLINE",
            },{
                "type": "submit",
                "title": "SUBMIT"
            }]
        },{
            "type": "actionbox",
            "condition": "model._mode == 'EDIT'",
            "items": [{
                "type": "save",
                "title": "SAVE_OFFLINE",
            },{
                "type": "submit",
                "title": "SUBMIT"
            },{
                "type": "button",
                "icon": "fa fa-user-plus",
                "title": "ENROLL_CUSTOMER",
                "onClick": "actions.proceed(model, formCtrl, form, $event)"
            },{
                "type": "button",
                "icon": "fa fa-refresh",
                "title": "RELOAD",
                "onClick": "actions.reload(model, formCtrl, form, $event)"
            }]
        }],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            setProofs:function(model){
                model.customer.addressProofNo=model.customer.aadhaarNo;
                model.customer.identityProofNo=model.customer.aadhaarNo;
                model.customer.identityProof='Aadhar card';
                model.customer.addressProof='Aadhar card';
                model.customer.addressProofSameAsIdProof = true;
                if (model.customer.yearOfBirth) {
                    model.customer.dateOfBirth = model.customer.yearOfBirth + '-01-01';
                }
            },
            preSave: function(model, form, formName) {
                var deferred = $q.defer();
                if (model.customer.firstName) {
                    deferred.resolve();
                } else {
                    irfProgressMessage.pop('enrollment-save', 'Customer Name is required', 3000);
                    deferred.reject();
                }
                return deferred.promise;
            },
            submit: function(model, form, formName){
                $log.info("Inside submit()");
                $log.warn(model);
                if (!EnrollmentHelper.validateData(model)) {
                    $log.warn("Invalid Data, returning false");
                    return false;
                }
                var sortFn = function(unordered){
                    var out = {};
                    Object.keys(unordered).sort().forEach(function(key) {
                        out[key] = unordered[key];
                    });
                    return out;
                };
                var reqData = _.cloneDeep(model);
                EnrollmentHelper.fixData(reqData);
                $log.info(JSON.stringify(sortFn(reqData)));
                EnrollmentHelper.saveData(reqData).then(function(res){
                    model.customer = _.clone(res.customer);
                    model = EnrollmentHelper.fixData(model);
                    /*reqData = _.cloneDeep(model);
                    EnrollmentHelper.proceedData(reqData).then(function(res){
                        $state.go("Page.Landing");
                    });*/
                    $state.go("Page.Engine", {
                        pageName: 'ProfileInformation',
                        pageId: model.customer.id
                    });
                });
            },
            proceed: function(model, formCtrl, form, $event) {
                var reqData = _.cloneDeep(model);
                if(reqData.customer.id && reqData.customer.currentStage === 'Stage01'){
                    $log.info("Customer id not null, skipping save");
                    EnrollmentHelper.proceedData(reqData).then(function (res) {
                        $state.go("Page.Landing");
                    });
                }
            },
            reload: function(model, formCtrl, form, $event) {
                $state.go("Page.Engine", {
                    pageName: 'ProfileInformation',
                    pageId: model.customer.id
                },{
                    reload: true,
                    inherit: false,
                    notify: true
                });
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("AssetsLiabilitiesAndHealth"),
["$log","formHelper","Enrollment", '$state','$stateParams', '$q', 'irfProgressMessage', 'PageHelper',
    'SessionStore','Utils','authService', 'BiometricService', 'Files',
function($log,formHelper,Enrollment,$state, $stateParams, $q, irfProgressMessage, PageHelper,
         SessionStore,Utils,authService, BiometricService, Files) {
    return {
        "type": "schema-form",
        "title": "HOUSE_VERIFICATION",
        "subTitle": "Enrollment Stage 2",
        initialize: function (model, form, formCtrl) {
            $log.info("I got initialized");
            $log.info($stateParams);

            if (!(model && model.customer && model.customer.id && model.$$STORAGE_KEY$$)) {

                PageHelper.showLoader();
                PageHelper.showProgress("page-init","Loading...");
                var expenditureSourcesTitlemap = formHelper.enum('expenditure').data;
                var customerId = $stateParams.pageId;
                if (!customerId) {
                    PageHelper.hideLoader();
                    $state.go("Page.Engine",{
                        pageName:"EnrollmentHouseVerificationQueue",
                        pageId:null
                    });
                    return;
                }
                Enrollment.get({id: customerId},
                    function(res){
                        _.assign(model.customer, res);

                        model.customer.expenditures = [];
                        model.customer.date = model.customer.date || Utils.getCurrentDate();

                        _.forEach(expenditureSourcesTitlemap, function(v){
                            if (v.value !== 'Other')
                                model.customer.expenditures.push({expenditureSource:v.value,frequency:'Monthly',annualExpenses:0});
                        });

                        model.customer.familyMembers = model.customer.familyMembers || [];
                        var self = null;
                        var spouse = null;
                        _.each(model.customer.familyMembers, function(v){
                            if (v.relationShip === 'Self') {
                                self = v;
                            } else if (v.relationShip === 'Husband' || v.relationShip === 'Wife') {
                                spouse = v;
                            }
                        });
                        if (!self) {
                            self = {
                                customerId: model.customer.id,
                                familyMemberFirstName: model.customer.firstName,
                                relationShip: 'Self',
                                gender: model.customer.gender,
                                dateOfBirth: model.customer.dateOfBirth,
                                maritalStatus: model.customer.maritalStatus,
                                mobilePhone: model.customer.mobilePhone || '',
                                age: moment().diff(moment(model.customer.dateOfBirth, SessionStore.getSystemDateFormat()), 'years')
                            };
                            model.customer.familyMembers.push(self);
                        } else {
                            // TODO already self available, can verify here
                        }
                        if (!spouse) {
                            spouse = {
                                familyMemberFirstName: model.customer.spouseFirstName,
                                relationShip: model.customer.gender === 'MALE' ? 'Wife':'Husband',
                                gender: model.customer.gender === 'MALE' ? 'FEMALE':'MALE',
                                dateOfBirth: model.customer.spouseDateOfBirth,
                                maritalStatus: model.customer.maritalStatus,
                                age: moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years')
                            };
                            model.customer.familyMembers.push(spouse);
                        } else {
                            // TODO already spouse available, can verify here
                        }

                        model.customer.nameOfRo = model.customer.nameOfRo || SessionStore.getLoginname();
                        try {
                            if (model.customer.verifications.length < 1) {
                                model.customer.verifications = [
                                    {
                                        "relationship": "Neighbour"
                                    },
                                    {
                                        "relationship": "Neighbour"
                                    }
                                ];
                            }
                        }catch(err){
                            model.customer.verifications = [
                                {
                                    "relationship": "Neighbour"
                                },
                                {
                                    "relationship": "Neighbour"
                                }
                            ];
                        }
                        model = Utils.removeNulls(model,true);

                        PageHelper.hideLoader();
                        PageHelper.showProgress("page-init","Done.",2000);

                    },
                    function(res){
                        PageHelper.hideLoader();
                        PageHelper.showProgress("page-init","Error in loading customer.",2000);
                        PageHelper.showErrors(res);
                        $state.go("Page.Engine", {
                            pageName: 'EnrollmentHouseVerificationQueue',
                            pageId: null
                        });
                    }
                );
            }

            model.isFPEnrolled = function(fingerId){
                //$log.info("Inside isFPEnrolled: " + BiometricService.getFingerTF(fingerId) + " :"  + fingerId);
                if (model.customer[BiometricService.getFingerTF(fingerId)]!=null || (typeof(model.customer.$fingerprint)!='undefined' && typeof(model.customer.$fingerprint[fingerId])!='undefined' && model.customer.$fingerprint[fingerId].data!=null )) {
                    //$log.info("Inside isFPEnrolled: :true");
                    return "fa-check text-success";
                }
                //$log.info("Inside isFPEnrolled: false");
                return "fa-close text-danger";
            }

            model.getFingerLabel = function(fingerId){
                return BiometricService.getLabel(fingerId);
            }

        },
        offline: true,
        getOfflineDisplayItem: function(item, index){
            return [
                item["customer"]["urnNo"],
                item["customer"]["firstName"]
            ]
        },
        //modelPromise: function(pageId) {
        //    var deferred = $q.defer();
        //    Enrollment.get({id:pageId}).$promise.then(function(data){
        //        deferred.resolve({customer:data});
        //    });
        //    return deferred.promise;
        //},
        form: [
            {
                "type": "box",
                "title": "T_FAMILY_DETAILS",
                "items": [{
                    key:"customer.familyMembers",
                    type:"array",
                    startEmpty: true,
                    items: [
                        {
                            key:"customer.familyMembers[].customerId",
                            type:"lov",
                            "inputMap": {
                                "firstName": {
                                    "key": "customer.firstName",
                                    "title": "CUSTOMER_NAME"
                                },
                                "branchName": {
                                    "key": "customer.kgfsName",
                                    "type": "select"
                                },
                                "centreCode": {
                                    "key": "customer.centreCode",
                                    "type": "select"
                                }
                            },
                            "outputMap": {
                                "id": "customer.familyMembers[arrayIndex].customerId",
                                "firstName": "customer.familyMembers[arrayIndex].familyMemberFirstName"

                            },
                            "searchHelper": formHelper,
                            "search": function(inputModel, form) {
                                $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                var promise = Enrollment.search({
                                    'branchName': SessionStore.getBranch() || inputModel.branchName,
                                    'firstName': inputModel.first_name,
                                }).$promise;
                                return promise;
                            },
                            getListDisplayItem: function(data, index) {
                                return [
                                    [data.firstName, data.fatherFirstName].join(' '),
                                    data.id
                                ];
                            }
                        },
                        {
                            key:"customer.familyMembers[].familyMemberFirstName",
                            title:"FAMILY_MEMBER_FULL_NAME"
                        },
                        {
                            key:"customer.familyMembers[].relationShip",
                            type:"select",
                            title: "T_RELATIONSHIP"
                        },
                        {
                            key: "customer.familyMembers[].gender",
                            type: "radios",
                            title: "T_GENDER"
                        },
                        {
                            key:"customer.familyMembers[].age",
                            title: "AGE",
                            type:"number",
                            "onChange": function(modelValue, form, model, formCtrl, event) {
                                if (model.customer.familyMembers[form.arrayIndex].age > 0) {
                                    if (model.customer.familyMembers[form.arrayIndex].dateOfBirth) {
                                        model.customer.familyMembers[form.arrayIndex].dateOfBirth = moment(new Date()).subtract(model.customer.familyMembers[form.arrayIndex].age, 'years').format('YYYY-') + moment(model.customer.familyMembers[form.arrayIndex].dateOfBirth, 'YYYY-MM-DD').format('MM-DD');
                                    } else {
                                        model.customer.familyMembers[form.arrayIndex].dateOfBirth = moment(new Date()).subtract(model.customer.familyMembers[form.arrayIndex].age, 'years').format('YYYY-MM-DD');
                                    }
                                }
                            }
                        },
                        {
                            key: "customer.familyMembers[].dateOfBirth",
                            type:"date",
                            title: "T_DATEOFBIRTH",
                            "onChange": function(modelValue, form, model, formCtrl, event) {
                                if (model.customer.familyMembers[form.arrayIndex].dateOfBirth) {
                                    model.customer.familyMembers[form.arrayIndex].age = moment().diff(moment(model.customer.familyMembers[form.arrayIndex].dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                                }
                            }
                        },
                        {
                            key:"customer.familyMembers[].educationStatus",
                            type:"select",
                            title: "T_EDUCATION_STATUS"
                        },
                        {
                            key:"customer.familyMembers[].maritalStatus",
                            type:"select",
                            title: "T_MARITAL_STATUS"
                        },

                        "customer.familyMembers[].mobilePhone",
                        {
                            key:"customer.familyMembers[].healthStatus",
                            type:"radios",
                            titleMap:{
                                "GOOD":"GOOD",
                                "BAD":"BAD"
                            },

                        },
                        {
                            key:"customer.familyMembers[].incomes",
                            type:"array",
                            startEmpty: true,
                            items:[
                                {
                                    key: "customer.familyMembers[].incomes[].incomeSource",
                                    type:"select"
                                },
                                "customer.familyMembers[].incomes[].incomeEarned",
                                {
                                    key: "customer.familyMembers[].incomes[].frequency",
                                    type: "select"
                                }

                            ]

                        }
                    ]
                },
                    {
                        "type": "fieldset",
                        "title": "EXPENDITURES",
                        "items": [{
                            key:"customer.expenditures",
                            type:"array",
                            remove: null,
                            view: "fixed",
                            titleExpr: "model.customer.expenditures[arrayIndex].expenditureSource | translate",
                            items:[{
                                type: 'section',
                                htmlClass: 'row',
                                items: [{
                                    type: 'section',
                                    htmlClass: 'col-xs-6',
                                    items: [{
                                        key:"customer.expenditures[].frequency",
                                        type:"select",
                                        notitle: true
                                    }]
                                },{
                                    type: 'section',
                                    htmlClass: 'col-xs-6',
                                    items: [{
                                        key: "customer.expenditures[].annualExpenses",
                                        type:"amount",
                                        notitle: true
                                    }]
                                }]
                            }]
                        }]
                    }]
            },
            {
                "type":"box",
                "title":"BUSINESS_OCCUPATION_DETAILS",
                "items":[
                    {
                        key:"customer.udf.userDefinedFieldValues.udf13",
                        type:"select"


                    },
                    {
                        type:"fieldset",
                        condition:"model.customer.udf.userDefinedFieldValues.udf13=='Business' || model.customer.udf.userDefinedFieldValues.udf13=='Employed'",
                        items:[
                            {
                                key:"customer.udf.userDefinedFieldValues.udf14",
                                type:"select"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf7"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf22"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf8"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf9"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf10"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf11"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf12"
                            },

                            {
                                key:"customer.udf.userDefinedFieldValues.udf23",
                                type:"radios"
                            },

                            {
                                key:"customer.udf.userDefinedFieldValues.udf17"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf16",
                                type:"select"
                            },

                            {
                                key:"customer.udf.userDefinedFieldValues.udf18",
                                type:"select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf19",
                                type:"radios"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf20",
                                type:"select"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf21",
                                condition:"model.customer.udf.userDefinedFieldValues.udf20=='OTHERS'"
                            }
                        ]
                    },
                    {
                        type:"fieldset",
                        condition:"model.customer.udf.userDefinedFieldValues.udf13=='Agriculture'",
                        title:"AGRICULTURE_DETAILS",
                        items:[
                            {
                                key:"customer.udf.userDefinedFieldValues.udf24",
                                type:"select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf25",
                                type:"select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf15"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf26"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf27",
                                type:"select"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf28"
                            }
                        ]
                    }

                ]
            },
            {
                "type": "box",
                "title": "T_ASSETS",
                "items": [
                    {
                        key: "customer.physicalAssets",
                        type: "array",
                        startEmpty: true,
                        items: [
                            {
                                key:"customer.physicalAssets[].ownedAssetDetails",
                                type:"select"

                            },
                            "customer.physicalAssets[].numberOfOwnedAsset",
                            {
                                key:"customer.physicalAssets[].ownedAssetValue",
                            }
                        ]
                    },
                    {
                        key: "customer.financialAssets",
                        title:"FINANCIAL_ASSETS",
                        type: "array",
                        startEmpty: true,
                        items: [
                            {
                                key:"customer.financialAssets[].instrumentType",
                                type:"select"
                            },
                            "customer.financialAssets[].nameOfInstitution",
                            {
                                key:"customer.financialAssets[].instituteType",
                                type:"select"
                            },
                            {
                                key: "customer.financialAssets[].amountInPaisa",
                                type: "amount"
                            },
                            {
                                key:"customer.financialAssets[].frequencyOfDeposite",
                                type:"select"
                            },
                            {
                                key:"customer.financialAssets[].startDate",
                                type:"date"
                            },
                            {
                                key:"customer.financialAssets[].maturityDate",
                                type:"date"
                            }
                        ]
                    }]

            },
            {
                type:"box",
                title:"T_LIABILITIES",
                items:[
                    {
                        key:"customer.liabilities",
                        type:"array",
                        startEmpty: true,
                        title:"FINANCIAL_LIABILITIES",
                        items:[
                            {
                                key:"customer.liabilities[].loanType",
                                type:"select"
                            },
                            {
                                key:"customer.liabilities[].loanSource",
                                type:"select"
                            },
                            "customer.liabilities[].instituteName",
                            {
                                key: "customer.liabilities[].loanAmountInPaisa",
                                type: "amount"
                            },
                            {
                                key: "customer.liabilities[].installmentAmountInPaisa",
                                type: "amount"
                            },
                            {
                                key: "customer.liabilities[].startDate",
                                type:"date"
                            },
                            {
                                key:"customer.liabilities[].maturityDate",
                                type:"date"
                            },
                            {
                                key:"customer.liabilities[].frequencyOfInstallment",
                                type:"select"
                            },
                            {
                                key:"customer.liabilities[].liabilityLoanPurpose",
                                type:"select"
                            }

                        ]
                    }
                ]
            },
            {
                "type": "box",
                "title": "BIOMETRIC",
                "items": [
                    {
                        type: "button",
                        title: "CAPTURE_FINGERPRINT",
                        notitle: true,
                        fieldHtmlClass: "btn-block",
                        onClick: function(model, form, formName){
                            var promise = BiometricService.capture(model);
                            promise.then(function(data){
                                model.customer.$fingerprint = data;
                            }, function(reason){
                                console.log(reason);
                            })
                        }
                    },
                    {
                        "type": "section",
                        "html": '<div class="row"> <div class="col-xs-6">' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftThumb\')"></i> {{ model.getFingerLabel(\'LeftThumb\') }}</span><br>' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftIndex\')"></i> {{ model.getFingerLabel(\'LeftIndex\') }}</span><br>' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftMiddle\')"></i> {{ model.getFingerLabel(\'LeftMiddle\') }}</span><br>' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftRing\')"></i> {{ model.getFingerLabel(\'LeftRing\') }}</span><br>' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftLittle\')"></i> {{ model.getFingerLabel(\'LeftLittle\') }}</span><br>' +
                        '</div> <div class="col-xs-6">' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightThumb\')"></i> {{ model.getFingerLabel(\'RightThumb\') }}</span><br>' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightIndex\')"></i> {{ model.getFingerLabel(\'RightIndex\') }}</span><br>' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightMiddle\')"></i> {{ model.getFingerLabel(\'RightMiddle\') }}</span><br>' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightRing\')"></i> {{ model.getFingerLabel(\'RightRing\') }}</span><br>' +
                        '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightLittle\')"></i> {{ model.getFingerLabel(\'RightLittle\') }}</span><br>' +
                        '</div></div>'
                    }
                ]
            },
            {
                "type": "box",
                "title": "T_HOUSE_VERIFICATION",
                "items": [
                    {
                        "key": "customer.firstName",
                        "title": "CUSTOMER_NAME",
                        "readonly": true
                    },
                    {
                        key:"customer.nameInLocalLanguage"
                    },
                    {
                        key:"customer.addressInLocalLanguage",
                        type:"textarea"
                    },

                    {
                        key:"customer.religion",
                        type:"select"
                    },
                    {
                        key:"customer.caste",
                        type:"select"
                    },
                    {
                        key:"customer.language",
                        type:"select"
                    },
                    {
                        type:"fieldset",
                        title:"HOUSE_DETAILS",
                        items:[
                            {
                                key:"customer.udf.userDefinedFieldValues.udf3",
                                type:"select"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf2",
                                condition:"model.customer.udf.userDefinedFieldValues.udf3=='RENTED'"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf4",

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf5",
                                type:"radios"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf31",
                                "type":"select"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf32"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf6"
                            }
                        ]
                    },
                    {
                        "key": "customer.latitude",
                        "title": "HOUSE_LOCATION",
                        "type": "geotag",
                        "latitude": "customer.latitude",
                        "longitude": "customer.longitude"
                    },
                    "customer.nameOfRo",
                    {
                        key:"customer.houseVerificationPhoto",
                        offline: true,
                        type:"file",
                        fileType:"image/*"
                    },
                    {
                        "key":"customer.verifications",
                        "title":"VERIFICATION",
                        "add":null,
                        "remove":null,
                        "items":[
                            {
                                key:"customer.verifications[].houseNo"
                            },
                            {
                                key:"customer.verifications[].houseNoIsVerified"
                            },
                            {
                                key:"customer.verifications[].referenceFirstName"
                            },
                            {
                                key:"customer.verifications[].relationship",
                                type:"select"
                            }

                        ]
                    },
                    {
                        key: "customer.date",
                        type:"date"
                    },
                    "customer.place"
                ]
            },
            {
                "type": "actionbox",
                "items": [{
                    "type": "save",
                    "title": "Save Offline",
                },{
                    "type": "submit",
                    "title": "Submit"
                }]
            }

        ],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                $log.info("Inside submit()");
                $log.info(model);
                PageHelper.clearErrors();
                PageHelper.showLoader();

                var out = model.customer.$fingerprint;
                var fpPromisesArr = [];
                for (var key in out) {
                    if (out.hasOwnProperty(key) && out[key].data!=null) {
                        (function(obj){
                            var promise = Files.uploadBase64({file: obj.data, type: 'CustomerEnrollment', subType: 'FINGERPRINT', extn:'iso'}, {}).$promise;
                            promise.then(function(data){
                                model.customer[obj.table_field] = data.fileId;
                                delete model.customer.$fingerprint[obj.fingerId];
                            });
                            fpPromisesArr.push(promise);
                        })(out[key]);
                    } else {
                        if (out[key].data == null){
                            delete out[key];
                        }

                    }
                }
                $q.all(fpPromisesArr).then(function(){

                    var reqData = _.cloneDeep(model);

                    if (reqData['customer']['miscellaneous']){
                        var misc = reqData['customer']['miscellaneous'];
                        if (misc['alcoholConsumption']){
                            misc['alcoholConsumption'] = "Yes"
                        } else {
                            misc['alcoholConsumption'] = "No"
                        }

                        if (misc['narcoticsConsumption']){
                            misc['narcoticsConsumption'] = "Yes"
                        } else {
                            misc['narcoticsConsumption'] = "No"
                        }

                        if (misc['tobaccoConsumption']){
                            misc['tobaccoConsumption'] = "Yes"
                        } else {
                            misc['tobaccoConsumption'] = "No"
                        }
                    }

                    try{
                        var liabilities = reqData['customer']['liabilities'];
                        if (liabilities && liabilities!=null && typeof liabilities.length == "number" && liabilities.length >0 ){
                            for (var i=0; i<liabilities.length;i++){
                                var l = liabilities[i];
                                l.loanAmountInPaisa = l.loanAmountInPaisa * 100;
                                l.installmentAmountInPaisa = l.installmentAmountInPaisa * 100;
                            }
                        }

                        var financialAssets = reqData['customer']['financialAssets'];
                        if (financialAssets && financialAssets!=null && typeof financialAssets.length == "number" && financialAssets.length >0 ){
                            for (var i=0; i<financialAssets.length;i++){
                                var f = financialAssets[i];
                                f.amountInPaisa = f.amountInPaisa * 100;
                            }
                        }
                    } catch(e){
                        $log.info("Error trying to change amount info.");
                    }

                    reqData['enrollmentAction'] = 'PROCEED';

                    irfProgressMessage.pop('enrollment-submit', 'Working... Please wait.');

                    reqData.customer.verified = true;
                    if (reqData.customer.hasOwnProperty('verifications')){
                        var verifications = reqData.customer['verifications'];
                        for (var i=0; i<verifications.length; i++){
                            if (verifications[i].houseNoIsVerified){
                                verifications[i].houseNoIsVerified=1;
                            }
                            else{
                                verifications[i].houseNoIsVerified=0;
                            }
                        }
                    }
                    try{
                        for(var i=0;i<reqData.customer.familyMembers.length;i++){
                            var incomes = reqData.customer.familyMembers[i].incomes;

                            for(var j=0;j<incomes.length;j++){
                                switch(incomes[i].frequency){
                                    case 'M': incomes[i].monthsPerYear=12; break;
                                    case 'Monthly': incomes[i].monthsPerYear=12; break;
                                    case 'D': incomes[i].monthsPerYear=365; break;
                                    case 'Daily': incomes[i].monthsPerYear=365; break;
                                    case 'W': incomes[i].monthsPerYear=52; break;
                                    case 'Weekly': incomes[i].monthsPerYear=52; break;
                                    case 'F': incomes[i].monthsPerYear=26; break;
                                    case 'Fornightly': incomes[i].monthsPerYear=26; break;
                                    case 'Fortnightly': incomes[i].monthsPerYear=26; break;
                                }
                            }
                        }

                    }catch(err){
                        console.error(err);
                    }
                    Utils.removeNulls(reqData,true);
                    $log.info(reqData);
                    Enrollment.updateEnrollment(reqData,
                        function(res, headers){
                            PageHelper.hideLoader();
                            irfProgressMessage.pop('enrollment-submit', 'Done. Customer URN created : ' + res.customer.urnNo, 5000);
                            $log.info("Inside updateEnrollment Success!");
                            $state.go("Page.Landing");
                        },
                        function(res, headers){
                            PageHelper.hideLoader();
                            irfProgressMessage.pop('enrollment-submit', 'Oops. Some error.', 2000);
                            PageHelper.showErrors(res);
                        })
                    $log.info(reqData);
                })

            }

        }
    }
}]);

irf.pageCollection.factory(irf.page("CBCheck"),
	["$log", "formHelper", "Enrollment", "CreditBureau", "SessionStore", "$state", "entityManager",
	function($log, formHelper, Enrollment, CreditBureau, SessionStore, $state, entityManager){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "CREDIT_BUREAU_CHECK",
		"subTitle": "CUSTOMER_SEARCH",
		initialize: function (model, form, formCtrl) {
			model.branchName = branch;
			$log.info("search-CustomerCBCheck got initialized");
		},
		definition: {
			title: "SEARCH_CUSTOMERS",
			pageName: "CustomerCBCheck",
			searchForm: ["*"],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"required": ["branchName"],
				"properties": {
					"firstName": {
						"title": "FULL_NAME",
						"type": "string"
					},
					"lastName": {
						"title": "LASTNAME",
						"type": "string"
					},
					"kycNumber": {
						"title": "KYC_NO",
						"type": "string"
					},
					"urnNo": {
						"title": "URN_NO",
						"type": "number"
					},
					"branchName": {
						"title": "BRANCH_NAME",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true,
						}
					},
					"centreCode": {
						"title": "CENTRE_CODE",
						"type": "string",
						"enumCode": "centre",
						"x-schema-form": {
							"type": "select",
							"filter": {
								"parentCode as branch": "model.branchName"
							},
							"screenFilter": true
						}
					}
				}
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){
				var promise = Enrollment.search({
					'branchName': searchOptions.branchName,
					'firstName': searchOptions.firstName,
					'centreCode': searchOptions.centreCode,
					'kycNumber': searchOptions.kycNumber,
					'page': pageOpts.pageNo,
					'per_page': pageOpts.itemsPerPage,
					'lastName': searchOptions.lastName,
					'urnNo': searchOptions.urnNo
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 20;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				itemCallback: function(item, index) {
					$log.info(item);
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						item.firstName + " " + (item.lastName!=null?item.lastName:""),
						'Customer ID : ' + item.id,
						null
					]
				},
				getActions: function(){
					return [
						{
							name: "Capture CB check info",
							desc: "",
							fn: function(item, index) {
								$log.info(item.urnNo);
								entityManager.setModel('CBCheckCapture', {_request:item});
								$state.go("Page.Engine", {pageName:"CBCheckCapture", pageId:null});

/*"id": 327989,
"enrollmentId": "50862105161045482653",
"urnNo": null,
"firstName": "Test user",
"lastName": null,
"middleName": null,
"fatherFirstName": "Test father",
"fatherLastName": null,
"fatherMiddleName": null,
"verified": false,
"kgfsName": "Karambayam",
"kgfsBankName": "Pudhuaaru",
"enrolledAs": "CUSTOMER",
"parentCustomerId": null,
"centreCode": null*/
							},
							isApplicable: function(item, index){
								return true;
							}
						}
					];
				}
			}


		}
	};
}]);

irf.pageCollection.factory(irf.page("CBCheckCapture"),
	["$log", "$q", "CreditBureau", "SessionStore", "$state", "entityManager", "formHelper", "$stateParams", "irfProgressMessage",
	function($log, $q, CreditBureau, SessionStore, $state, entityManager, formHelper, $stateParams, PM){
	return {
		"type": "schema-form",
		"title": "CREDIT_BUREAU_CHECK",
		"subTitle": "LOAN_DATA_CAPTURE",
		initialize: function (model, form, formCtrl) {
			model.creditBureau = "AOR";
			if (model._request) {
				model.customerName = model._request.firstName;
				model.customerId = model._request.id;
			} else {
				$state.go("Page.Engine", {pageName:"CBCheck", pageId:null});
			}
			$log.info("I got initialized");
		},
		form: [{
			"type": "box",
			"title": "CREDIT_BUREAU_CHECK",
			"items": [
				{
					"key": "customerName",
					"readonly": true
				},
				"partner",
				{
					"key":"productCode",
					"filter": {
						"parentCode as partner": "model.partner",
						"field2": "'JLG'"
					}
				},/*
				{
					"key": "creditBureau",
					"titleMap": [{
						"value": "AOR",
						"name": "Highmark - AOR"
					},{
						"value": "Base",
						"name": "Highmark - Base"
					}]
				},*/
				"loanAmount",
				"loanPurpose1"/*,
				{
					"key":"loanPurpose2",
					"filter": {
						"parentCode as loan_purpose_1": "model.loanPurpose1"
					}
				},
				{
					"key":"loanPurpose3",
					"filter": {
						"parentCode as loan_purpose_2": "model.loanPurpose2"
					}
				}*/
			]
		},{
			"type": "actionbox",
			"items": [{
				"type": "submit",
				"title": "SEND_FOR_CB_CHECK"
			}]
		}],
		schema: {
			"type": 'object',
			"required":[
				"customerId",
				"customerName",
				"partner",
				"productCode",
				"creditBureau",
				"loanAmount",
				"loanPurpose1",
				"loanPurpose2",
				"loanPurpose3"
			],
			"properties": {
				"customerId": {
					"title": "CUSTOMER_ID",
					"type": "string"
				},
				"customerName": {
					"title": "CUSTOMER_NAME",
					"type": "string"
				},
				"partner": {
					"title": "PARTNER",
					"type": "string",
					"enumCode":"partner",
					"x-schema-form":{
						"type":"select"
					}
				},
				"productCode": {
					"title": "PRODUCT",
					"type": "string",
					"enumCode":"loan_product",
					"x-schema-form":{
						"type":"select"
					}
				},
				"creditBureau": {
					"title": "CREDIT_BUREAU",
					"type": "string",
					"enum":["AOR", "Base"],
					"x-schema-form":{
						"type":"select"
					}
				},
				"loanAmount": {
					"title": "LOAN_AMOUNT",
					"type": "number",
					"x-schema-form":{
						"type":"amount"
					}
				},
				"loanPurpose1": {
					"title": "LOAN_PURPOSE",
					"type": "string",
					"enumCode": "loan_purpose_1",
					"x-schema-form":{
						"type":"select"
					}
				}
			}
		},
		actions: {
			submit: function(model, form, formName) {
				$log.info("form.$valid: " + form.$valid);
				if (form.$valid) {
					PM.pop('cbcheck-submit', 'CB Check Submitting...');
					CreditBureau.creditBureauCheck({
						customerId: model.customerId,
						highMarkType: model.creditBureau,
						purpose: model.loanPurpose1,
						loanAmount: model.loanAmount
					}, function(response){
						PM.pop('cbcheck-submit', 'CB Check successfully sent for ' + model.customerName, 5000);
						$state.go("Page.Engine", {pageName:"CBCheck", pageId:null});
					}, function(errorResponse){
						PM.pop('cbcheck-submit', 'CB Check Failed for ' + model.customerName, 5000);
					});
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("CBCheckStatusQueue"),
["$log", "formHelper", "CreditBureau", "CreditBureau", "SessionStore", "$state", "entityManager",
"irfProgressMessage", "irfSimpleModal", "PageHelper",
function($log, formHelper, CreditBureau, CreditBureau, SessionStore, $state, entityManager,
	PM, showModal, PageHelper){
	var branch = SessionStore.getBranch();
	var nDays = 15;
	return {
		"type": "search-list",
		"title": "CREDIT_BUREAU_CHECK",
		"subTitle": "CUSTOMER_STATUS_QUEUE",
		initialize: function (model, form, formCtrl) {
			model.branchName = branch;
			$log.info("search-list sample got initialized");
		},
		definition: {
			title: "CB_STATUS_LAST_15_DAYS",
			pageName: "CBCheckStatusQueue",
			searchForm: ["*"],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"required": ["branchName"],
				"properties": {
					"status": {
						"title": "STATUS",
						"type": "string",
						"enum": ["PROCESSED", "PENDING", "ERROR"],
						"x-schema-form": {
							"type": "select",
							"titleMap": [
								{"name":"All", "value":""},
								{"name":"Processed", "value":"PROCESSED"},
								{"name":"Pending", "value":"PENDING"},
								{"name":"Error", "value":"ERROR"}
							]
						}
					},/*
					"branchName": {
						"title": "BRANCH_NAME",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select"
						}
					},*/
					"centreCode": {
						"title": "CENTRE",
						"type": "string",
						"enumCode": "centre",
						"x-schema-form": {
							"type": "select",
							"filter": {
								"parentCode as branch": "model.branchName"
							},
							"screenFilter": true
						}
					}
				}
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){
				var today = moment(new Date());
				var nDaysBack = moment(new Date()).subtract(nDays, 'days');
                console.log(searchOptions);
				var promise = CreditBureau.listCreditBureauStatus({
					'branchName': searchOptions.branchName,
                    'status': searchOptions.status,
					'centreCode': searchOptions.centreCode,
					'fromDate': nDaysBack.format('YYYY-MM-DD'),
					'toDate': today.format('YYYY-MM-DD')
				}).$promise;
				return promise;
			},
			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 20;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				// listStyle: "simple",
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						item.customerId + ': ' + item.firstName,
						item.status + ' / Loan Amount: ' + item.loanAmount,
						item.reportType + ' - ' + item.requestType
					]
				},
				getActions: function(){
					return [{
						name: "View CB Status",
						icon: "fa fa-star-half-o",
						desc: "",
						fn: function(item, index) {
							PM.pop('cbcheck-submit', 'Checking status...');
							$log.info(item.customerId);
							CreditBureau.DSCpostCB(
								{customerId:item.customerId},
								function(response){
									PM.pop('cbcheck-submit', 'Checking status...', 10);
									showModal("DSC post CB",
										"<dl class='dl-horizontal'><dt>stopResponse</dt><dd>" + response.stopResponse
										+ "</dd><dt>response</dt><dd>" + response.response
										+ "</dd></dl>"
									);
								},
								function(errorResponse){
									$log.error(errorResponse);
									PM.pop('cbcheck-submit', 'Error checking status...', 3000);
								});
						},
						isApplicable: function(item, index){
							return true;
						}
					},{
						name: "Reinitiate CB Check",
						icon: "fa fa-share-square",
						desc: "",
						fn: function(item, index) {
							$log.info(item.id);
							PM.pop('cbcheck-submit', 'Reinitiating CB Check...');
							CreditBureau.reinitiateCBCheck(
								{creditBureauId:item.id},
								function(response){
									$log.info(response);
									PM.pop('cbcheck-submit', 'CB Check reinitiated ...', 3000);
								},
								function(errorResponse){
									$log.error(errorResponse);
									PM.pop('cbcheck-submit', 'Error reinitiating...', 3000);
									var data = errorResponse.data;
									var errors = [];
									if (data.errors){
										_.forOwn(data.errors, function(keyErrors, key){
											var keyErrorsLength = keyErrors.length;
											for (var i=0;i<keyErrorsLength; i++){
												var error  = {"message": "<strong>" + key  + "</strong>: " + keyErrors[i]};
												errors.push(error);
											}
										})
										PageHelper.setErrors(errors);
									} else if (data.error) {
										errors.push({"message": data.error});
										PageHelper.setErrors(errors);
									}
								});
						},
						isApplicable: function(item, index){
							if (item.status === 'PENDING') {
								return true;
							}
							return false;
						}
					},{
						name: "Enroll Customer",
						icon: "fa fa-user-plus",
						desc: "",
						fn: function(item, index) {
							$log.info(item.id);
							PM.pop('cbcheck-submit', 'Reinitiating CB Check...');
							CreditBureau.reinitiateCBCheck(
								{creditBureauId:item.id},
								function(response){
									$log.info(response);
									PM.pop('cbcheck-submit', 'CB Check reinitiated ...', 3000);
								},
								function(errorResponse){
									$log.error(errorResponse);
									PM.pop('cbcheck-submit', 'Error reinitiating...', 3000);
									var data = errorResponse.data;
									var errors = [];
									if (data.errors){
										_.forOwn(data.errors, function(keyErrors, key){
											var keyErrorsLength = keyErrors.length;
											for (var i=0;i<keyErrorsLength; i++){
												var error  = {"message": "<strong>" + key  + "</strong>: " + keyErrors[i]};
												errors.push(error);
											}
										})
										PageHelper.setErrors(errors);
									} else if (data.error) {
										errors.push({"message": data.error});
										PageHelper.setErrors(errors);
									}
								});
						},
						isApplicable: function(item, index){
							if (item.status === 'PENDING') {
								return true;
							}
							return false;
						}
					}];
				}
			}


		}
	};
}]);

irf.pageCollection.factory(irf.page("customer.EnterpriseEnrollment"),
["$log", "$q","Enrollment", 'EnrollmentHelper', 'PageHelper','formHelper',"elementsUtils",
'irfProgressMessage','SessionStore',"$state", "$stateParams", "Queries", "Utils", "CustomerBankBranch",
function($log, $q, Enrollment, EnrollmentHelper, PageHelper,formHelper,elementsUtils,
    irfProgressMessage,SessionStore,$state,$stateParams, Queries, Utils, CustomerBankBranch){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "ENTITY_ENROLLMENT",
        "subTitle": "BUSINESS",
        initialize: function (model, form, formCtrl) {
            model.customer = model.customer || {};
            //model.branchId = SessionStore.getBranchId() + '';
            //model.customer.kgfsName = SessionStore.getBranch();
            model.customer.customerType = "Enterprise";
        },
        offline: false,
        getOfflineDisplayItem: function(item, index){
            return [
                item.customer.firstName,
                item.customer.centreCode,
                item.customer.id ? '{{"CUSTOMER_ID"|translate}} :' + item.customer.id : ''
            ]
        },
        form: [
            {
                "type": "box",
                "title": "ENTITY_INFORMATION",
                "items": [
                    {
                        key: "customer.customerBranchId",
                        title:"BRANCH_NAME",
                        type: "select"
                    },
                    {
                        key: "customer.id",
                        condition: "model.customer.id",
                        title:"ENTITY_ID",
                        readonly: true
                    },
                    {
                        key: "customer.urnNo",
                        condition: "model.customer.urnNo",
                        title:"URN_NO",
                        readonly: true
                    },
                    {
                        key:"customer.centreId",
                        type:"select",
                        /*filter: {
                            "parentCode": "model.branch_id"
                        },*/
                        parentEnumCode:"branch_id"
                    },
                    {
                        key: "customer.oldCustomerId",
                        title:"ENTITY_ID",
                        titleExpr:"('ENTITY_ID'|translate)+' (Artoo)'",
                        condition: "model.customer.oldCustomerId",
                        readonly: true
                    },
                    {
                        key: "customer.firstName",
                        title:"ENTITY_NAME"
                    },
                    {
                        key: "customer.enterprise.referredBy",
                        title:"REFERRED_BY",
                        type: "select",
                        enumCode: "referredBy"
                    },
                    {
                        key: "customer.enterprise.referredName",
                        title:"REFERRED_NAME"
                    },/*
                    {
                        key: "customer.enterprise.businessName",
                        title:"COMPANY_NAME"
                    },*/
                    { /*TODO Not working when this is enabled */
                       key: "customer.enterprise.companyOperatingSince",
                       title:"OPERATING_SINCE",
                       type: "date"
                    },
                    {
                        "key": "customer.latitude",
                        "title": "BUSINESS_LOCATION",
                        "type": "geotag",
                        "latitude": "customer.latitude",
                        "longitude": "customer.longitude"
                    },
                    {
                        key: "customer.enterprise.ownership",
                        title: "OWNERSHIP",
                        type: "select",
                        enumCode: "ownership"
                    },
                    {
                        key: "customer.enterprise.businessConstitution",
                        title: "CONSTITUTION",
                        type: "select",
                        enumCode: "constitution"
                    },
                    {
                        key: "customer.enterprise.companyRegistered",
                        type: "radios",
                        titleMap: {
                            "YES": "Yes",
                            "NO": "No"
                        },
                        title: "IS_REGISTERED"
                    },
                    {
                        key: "customer.enterprise.registrationType",
                        condition: "model.customer.enterprise.companyRegistered === 'YES'",
                        title: "REGISTRATION_TYPE",
                        type: "select",
                        enumCode: "business_registration_type"
                    },
                    {
                        key: "customer.enterprise.registrationNumber",
                        condition: "model.customer.enterprise.companyRegistered === 'YES'",
                        title: "REGISTRATION_NUMBER"
                    },
                    {
                        key: "customer.enterprise.registrationDate",
                        condition: "model.customer.enterprise.companyRegistered === 'YES'",
                        type: "date",
                        title: "REGISTRATION_DATE"
                    },
                    {
                        key: "customer.enterprise.businessType",
                        title: "BUSINESS_TYPE",
                        type: "select",
                        enumCode: "businessType"
                    },
                    {
                        key: "customer.enterprise.businessLine",
                        title: "BUSINESS_LINE",
                        type: "select",
                        enumCode: "businessLine",
                        parentEnumCode: "businessType"
                    },
                    {
                        key: "customer.enterprise.businessSector",
                        title: "BUSINESS_SECTOR",
                        type: "select",
                        enumCode: "businessSector",
                        parentEnumCode: "businessType"
                    },
                    {
                        key: "customer.enterprise.businessSubsector",
                        title: "BUSINESS_SUBSECTOR",
                        type: "select",
                        enumCode: "businessSubSector",
                        parentEnumCode: "businessSector"
                    },
                    {
                        key: "customer.enterpriseCustomerRelations",
                        type: "array",
                        title: "RELATIONSHIP_TO_BUSINESS",
                        items: [
                            {
                                key: "customer.enterpriseCustomerRelations[].relationshipType",
                                title: "RELATIONSHIP_TYPE",
                                type: "select",
                                enumCode: "relationship_type"
                            },
                            {
                                key: "customer.enterpriseCustomerRelations[].linkedToCustomerId",
                                type: "lov",
                                title: "CUSTOMER_ID",
                                inputMap: {
                                    "firstName": {
                                        "key": "customer.firstName",
                                        "title": "CUSTOMER_NAME"
                                    },
                                    "branchName": {
                                        "key": "customer.kgfsName",
                                        "type": "select"
                                    },
                                    "centreId": {
                                        "key": "customer.centreId",
                                        "type": "select"
                                    }
                                },
                                outputMap: {
                                    "id": "customer.enterpriseCustomerRelations[arrayIndex].linkedToCustomerId",
                                    "firstName": "customer.enterpriseCustomerRelations[arrayIndex].linkedToCustomerName"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                    $log.info("inputModel.centreId: " + inputModel.centreId);
                                    if (!inputModel.branchName)
                                        inputModel.branchName = SessionStore.getBranch();
                                    var promise = Enrollment.search({
                                        'branchName': inputModel.branchName,
                                        'firstName': inputModel.firstName,
                                        'centreId': inputModel.centreId,
                                        'customerType': 'Individual'
                                    }).$promise;
                                    return promise;
                                },
                                getListDisplayItem: function(data, index) {
                                    return [
                                        [data.firstName, data.fatherFirstName].join(' '),
                                        data.id
                                    ];
                                }
                            },
                            {
                                key: "customer.enterpriseCustomerRelations[].linkedToCustomerName",
                                readonly: true,
                                title: "CUSTOMER_NAME"
                            }
                        ]
                    },
                    {
                        key: "customer.enterpriseRegistrations",
                        type: "array",
                        title: "ADDITIONAL_REGISTRATION",
                        condition: "model.customer.enterprise.companyRegistered === 'YES'",
                        startEmpty: true,
                        items: [
                            {
                                key: "customer.enterpriseRegistrations[].registrationType",
                                title: "REGISTRATION_TYPE",
                                type: "select",
                                enumCode: "business_registration_type"
                            },
                            {
                                key: "customer.enterpriseRegistrations[].registrationNumber",
                               title: "REGISTRATION_NUMBER"
                            },
                            {
                                key: "customer.enterpriseRegistrations[].registeredDate",
                                type: "date",
                                title: "REGISTRATION_DATE"
                            },
                        ]
                    }
                ]
            },
            {
                "type": "box",
                "title": "CONTACT_INFORMATION",
                "items":[
                    "customer.mobilePhone",
                    "customer.landLineNo",
                    "customer.doorNo",
                    "customer.street",
                    "customer.enterprise.landmark",
                    {
                        key: "customer.pincode",
                        type: "lov",
                        fieldType: "number",
                        autolov: true,
                        inputMap: {
                            "pincode": "customer.pincode",
                            "district": {
                                key: "customer.district"
                            },
                            "state": {
                                key: "customer.state"
                            }
                        },
                        outputMap: {
                            "division": "customer.locality",
                            "region": "customer.villageName",
                            "pincode": "customer.pincode",
                            "district": "customer.district",
                            "state": "customer.state"
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form, model) {
                            if (!inputModel.pincode) {
                                return $q.reject();
                            }
                            return Queries.searchPincodes(inputModel.pincode, inputModel.district, inputModel.state);
                        },
                        getListDisplayItem: function(item, index) {
                            return [
                                item.division + ', ' + item.region,
                                item.pincode,
                                item.district + ', ' + item.state
                            ];
                        }
                    },
                    "customer.locality",
                    "customer.villageName",
                    "customer.district",
                    "customer.state",
                    {
                       key: "customer.udf.userDefinedFieldValues.udf31", // customer.enterprise.businessInPresentAreaSince
                       type: "select"
                    },
                    {
                        key: "customer.udf.userDefinedFieldValues.udf32", // customer.enterprise.businessInCurrentAddressSince
                        type: "select"
                    }
                ]
            },
            {
                type: "box",
                title: "CUSTOMER_BANK_ACCOUNTS",
                items: [
                    {
                        key: "customer.customerBankAccounts",
                        type: "array",
                        title: "BANK_ACCOUNTS",
                        startEmpty: true,
                        items: [
                            {
                                key: "customer.customerBankAccounts[].ifscCode",
                                type: "lov",
                                lovonly: true,
                                inputMap: {
                                    "ifscCode": {
                                        "key": "customer.customerBankAccounts[].ifscCode"
                                    },
                                    "bankName": {
                                        "key": "customer.customerBankAccounts[].customerBankName"
                                    },
                                    "branchName": {
                                        "key": "customer.customerBankAccounts[].customerBankBranchName"
                                    }
                                },
                                outputMap: {
                                    "bankName": "customer.customerBankAccounts[arrayIndex].customerBankName",
                                    "branchName": "customer.customerBankAccounts[arrayIndex].customerBankBranchName",
                                    "ifscCode": "customer.customerBankAccounts[arrayIndex].ifscCode"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form) {
                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                    var promise = CustomerBankBranch.search({
                                        'bankName': inputModel.bankName,
                                        'ifscCode': inputModel.ifscCode,
                                        'branchName': inputModel.branchName
                                    }).$promise;
                                    return promise;
                                },
                                getListDisplayItem: function(data, index) {
                                    return [
                                        data.ifscCode,
                                        data.branchName,
                                        data.bankName
                                    ];
                                }
                            },
                            {
                                key: "customer.customerBankAccounts[].customerBankName",
                                readonly: true
                            },
                            {
                                key: "customer.customerBankAccounts[].customerBankBranchName",
                                readonly: true
                            },
                            {
                                key: "customer.customerBankAccounts[].customerNameAsInBank"
                            },
                            {
                                key: "customer.customerBankAccounts[].accountNumber"
                            },
                            {
                                key: "customer.customerBankAccounts[].accountType",
                                type: "select"
                            },
                            {
                                key: "customer.customerBankAccounts[].isDisbersementAccount",
                                type: "radios",
                                titleMap: [{
                                    value: true,
                                    name: "Yes"
                                },{
                                    value: false,
                                    name: "No"
                                }]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "actionbox",
                "items": [/*{
                    "type": "save",
                    "title": "SAVE_OFFLINE",
                },*/{
                    "type": "submit",
                    "title": "SUBMIT"
                }]
            }
        ],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            preSave: function(model, form, formName) {
                var deferred = $q.defer();
                if (model.customer.firstName) {
                    deferred.resolve();
                } else {
                    irfProgressMessage.pop('enrollment-save', 'Customer Name is required', 3000);
                    deferred.reject();
                }
                return deferred.promise;
            },
            submit: function(model, form, formName){
                $log.info("Inside submit()");
                $log.warn(model);
                var sortFn = function(unordered){
                    var out = {};
                    Object.keys(unordered).sort().forEach(function(key) {
                        out[key] = unordered[key];
                    });
                    return out;
                };
                var reqData = _.cloneDeep(model);
                EnrollmentHelper.fixData(reqData);
                if (reqData.customer.id) {
                    EnrollmentHelper.proceedData(reqData).then(function(resp){
                        // Utils.removeNulls(resp.customer,true);
                        // model.customer = resp.customer;
                        $state.go('Page.Landing', null);
                    });
                } else {
                    EnrollmentHelper.saveData(reqData).then(function(res){
                        EnrollmentHelper.proceedData(res).then(function(resp){
                            // Utils.removeNulls(resp.customer,true);
                            // model.customer = resp.customer;
                            $state.go('Page.Landing', null);
                        }, function(err) {
                            Utils.removeNulls(res.customer,true);
                            model.customer = res.customer;
                        });
                    });
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("customer.IndividualEnrollment"),
["$log", "$filter","$state", "Enrollment", "EnrollmentHelper", "SessionStore", "formHelper", "$q", "irfProgressMessage",
"PageHelper", "Utils", "BiometricService", "PagesDefinition", "Queries", "CustomerBankBranch",
function($log,$filter, $state, Enrollment, EnrollmentHelper, SessionStore, formHelper, $q, irfProgressMessage,
    PageHelper, Utils, BiometricService, PagesDefinition, Queries, CustomerBankBranch){

    return {
        "type": "schema-form",
        "title": "INDIVIDUAL_ENROLLMENT",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            model.customer = model.customer || {};
            //model.branchId = SessionStore.getBranchId() + '';

            model.customer.date = model.customer.date || Utils.getCurrentDate();
            model.customer.nameOfRo = model.customer.nameOfRo || SessionStore.getLoginname();

            model = Utils.removeNulls(model,true);
            //model.customer.kgfsName = SessionStore.getBranch();
            model.customer.customerType = 'Individual';
            model.customer.kgfsName = 'Bommasandra';
        },
        offline: false,
        getOfflineDisplayItem: function(item, index){
            return [
                item.customer.urnNo,
                Utils.getFullName(item.customer.firstName, item.customer.middleName, item.customer.lastName),
                item.customer.villageName
            ]
        },
        form: [{
            "type": "box",
            "title": "PERSONAL_INFORMATION",
            "items": [
            {
                type: "section",
                html: "<pre>{{model|json}}</pre>"
            },
                {
                    key: "customer.kgfsName",
                    title:"BRANCH_NAME",
                    type: "uiselect",
                    selection: "single",
                    getTitleMap: "helper.titleMap('branch')",
                   /* getTitleMap: function(modelValue, form, model, titleMap) {
                        if (titleMap && titleMap.length) {
                            return titleMap;
                        }
                        return [{
                            "name": "Branch 1",
                            "value": "branch1"
                        }, {
                            "name": "Branch 2",
                            "value": "branch2"
                        }];
                    },*/
                    onChange: function(modelValue) {
                        $log.info(modelValue);
                    },
                    returns: "value"
                },
                {
                    key:"customer.centreId",
                    type:"uiselect",
                    getTitleMap: "helper.titleMap('centre')",
                    refreshTitleMap: true,
                    filters: [{
                        "filterOn": "parentCode",
                        // 1.
                        //"filteredBy": "model.customer.kgfsName",

                        // 2.
                       // "getFilteredBy": "helper.filterByParentCode(model.customer.kgfsName, 'branch')",

                        // 3.
                       // "getFilteredBy": "actions.filterCentreId(model, form, filters)",

                        // 4.
                        "getFilteredBy": function(model, form, filter) {
                            return $filter('filter')(formHelper.enum('branch').data, {value: model.customer.kgfsName},true)[0].code;
                        }
                    }],
                    onChange: function(modelValue,form, model, event) {

                    }
                },
                {
                    key: "customer.oldCustomerId",
                    title:"CUSTOMER_ID",
                    titleExpr:"('CUSTOMER_ID'|translate)+' (Artoo)'",
                    condition: "model.customer.oldCustomerId",
                    readonly: true
                },
                {
                    key: "customer.id",
                    condition: "model.customer.id",
                    title:"CUSTOMER_ID",
                    readonly: true
                },
                {
                    key: "customer.urnNo",
                    condition: "model.customer.urnNo",
                    title:"URN_NO",
                    readonly: true
                },
                {
                    key:"customer.photoImageId",
                    type:"file",
                    fileType:"image/*"
                },
                {
                    key: "customer.firstName",
                    title:"FULL_NAME",
                    type:"qrcode",
                    onCapture: EnrollmentHelper.customerAadhaarOnCapture
                },
                {
                    key:"customer.enrolledAs",
                    type:"radios"
                },
                {
                    key:"customer.gender",
                    type:"radios"
                },
                {
                    key:"customer.dateOfBirth",
                    type:"date",
                    "onChange": function(modelValue, form, model) {
                        if (model.customer.dateOfBirth) {
                            model.customer.age = moment().diff(moment(model.customer.dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                        }
                    }
                },
                {
                    key:"customer.age",
                    title: "AGE",
                    type:"number",
                    "onChange": function(modelValue, form, model) {
                        if (model.customer.age > 0) {
                            if (model.customer.dateOfBirth) {
                                model.customer.dateOfBirth = moment(new Date()).subtract(model.customer.age, 'years').format('YYYY-') + moment(model.customer.dateOfBirth, 'YYYY-MM-DD').format('MM-DD');
                            } else {
                                model.customer.dateOfBirth = moment(new Date()).subtract(model.customer.age, 'years').format('YYYY-MM-DD');
                            }
                        }
                    }
                },
                {
                    key:"customer.religion",
                    type:"select"
                },
                {
                    key: "customer.fatherFirstName",
                    title: "FATHER_FULL_NAME"
                },
                {
                    key:"customer.maritalStatus",
                    type:"select"
                },
                {
                    key: "customer.spouseFirstName",
                    title: "SPOUSE_FULL_NAME",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    type:"qrcode",
                    onCapture: function(result, model, form) {
                        $log.info(result); // spouse id proof
                        var aadhaarData = EnrollmentHelper.parseAadhaar(result.text);
                        $log.info(aadhaarData);
                        model.customer.udf.userDefinedFieldValues.udf33 = 'Aadhar card';
                        model.customer.udf.userDefinedFieldValues.udf36 = aadhaarData.uid;
                        model.customer.spouseFirstName = aadhaarData.name;
                        if (aadhaarData.yob) {
                            model.customer.spouseDateOfBirth = aadhaarData.yob + '-01-01';
                            model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                        }
                    }
                },
                {
                    key:"customer.spouseAge",
                    title: "SPOUSE_AGE",
                    type:"number",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    "onChange": function(modelValue, form, model) {
                        if (model.customer.spouseAge > 0) {
                            if (model.customer.spouseDateOfBirth) {
                                model.customer.spouseDateOfBirth = moment(new Date()).subtract(model.customer.spouseAge, 'years').format('YYYY-') + moment(model.customer.spouseDateOfBirth, 'YYYY-MM-DD').format('MM-DD');
                            } else {
                                model.customer.spouseDateOfBirth = moment(new Date()).subtract(model.customer.spouseAge, 'years').format('YYYY-MM-DD');
                            }
                        }
                    }
                },
                {
                    key:"customer.spouseDateOfBirth",
                    type:"date",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    "onChange": function(modelValue, form, model) {
                        if (model.customer.spouseDateOfBirth) {
                            model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                        }
                    }
                }
            ]
        },
        {
            "type": "box",
            "title": "CONTACT_INFORMATION",
            "items": [
                "customer.mobilePhone",
                "customer.landLineNo",
                {
                    type: "fieldset",
                    title: "CUSTOMER_RESIDENTIAL_ADDRESS",
                    items: [
                        "customer.doorNo",
                        "customer.street",
                        "customer.postOffice",
                        "customer.landmark",
                        {
                            key: "customer.pincode",
                            type: "lov",
                            fieldType: "number",
                            autolov: true,
                            inputMap: {
                                "pincode": "customer.pincode",
                                "district": {
                                    key: "customer.district"
                                },
                                "state": {
                                    key: "customer.state"
                                }
                            },
                            outputMap: {
                                "division": "customer.locality",
                                "region": "customer.villageName",
                                "pincode": "customer.pincode",
                                "district": "customer.district",
                                "state": "customer.state"
                            },
                            searchHelper: formHelper,
                            initialize: function(inputModel) {
                                $log.warn('in pincode initialize');
                                $log.info(inputModel);
                            },
                            search: function(inputModel, form, model) {
                                if (!inputModel.pincode) {
                                    return $q.reject();
                                }
                                return Queries.searchPincodes(
                                    inputModel.pincode,
                                    inputModel.district,
                                    inputModel.state
                                );
                            },
                            getListDisplayItem: function(item, index) {
                                return [
                                    item.division + ', ' + item.region,
                                    item.pincode,
                                    item.district + ', ' + item.state
                                ];
                            },
                            onSelect: function(result, model, context) {
                                $log.info(result);
                            }
                        },
                        "customer.locality",
                        "customer.villageName",
                        "customer.district",
                        "customer.state",
                        "customer.mailSameAsResidence"
                    ]
                },
                {
                    type: "fieldset",
                    title: "CUSTOMER_PERMANENT_ADDRESS",
                    condition:"!model.customer.mailSameAsResidence",
                    items: [
                        "customer.mailingDoorNo",
                        "customer.mailingStreet",
                        "customer.mailingPostoffice",
                        {
                            key: "customer.mailingPincode",
                            type: "lov",
                            fieldType: "number",
                            autolov: true,
                            inputMap: {
                                "pincode": "customer.mailingPincode",
                                "district": {
                                    key: "customer.mailingDistrict"
                                },
                                "state": {
                                    key: "customer.mailingState"
                                }
                            },
                            outputMap: {
                                "pincode": "customer.mailingPincode",
                                "district": "customer.mailingDistrict",
                                "state": "customer.mailingState"
                            },
                            searchHelper: formHelper,
                            search: function(inputModel, form, model) {
                                if (!inputModel.pincode) {
                                    return $q.reject();
                                }
                                return Queries.searchPincodes(
                                    inputModel.pincode,
                                    inputModel.district,
                                    inputModel.state
                                );
                            },
                            getListDisplayItem: function(item, index) {
                                return [
                                    item.pincode,
                                    item.district + ', ' + item.state
                                ];
                            }
                        },
                        "customer.mailingLocality",
                        "customer.mailingDistrict",
                        "customer.mailingState"
                    ]
                }
            ]
        },
        {
            type:"box",
            title:"KYC",
            items:[
                {
                    "key": "customer.aadhaarNo",
                    type:"qrcode",
                    onChange:"actions.setProofs(model)",
                    onCapture: function(result, model, form) {
                        EnrollmentHelper.customerAadhaarOnCapture(result, model, form);
                        this.actions.setProofs(model);
                    }
                },
                {
                    type:"fieldset",
                    title:"IDENTITY_PROOF",
                    items:[
                        {
                            key:"customer.identityProof",
                            type:"select"
                        },
                        {
                            key:"customer.identityProofImageId",
                            type:"file",
                            required: false,
                            fileType:"image/*"
                        },
                        {
                            key:"customer.identityProofReverseImageId",
                            type:"file",
                            fileType:"image/*"
                        },
                        {
                            key:"customer.identityProofNo",
                            type:"barcode",
                            onCapture: function(result, model, form) {
                                $log.info(result);
                                model.customer.identityProofNo = result.text;
                            }
                        },
                        {
                            key:"customer.idProofIssueDate",
                            type:"date"
                        },
                        {
                            key:"customer.idProofValidUptoDate",
                            type:"date"
                        },
                        {
                            key:"customer.addressProofSameAsIdProof"
                        }
                    ]
                },
                {
                    type:"fieldset",
                    title:"ADDRESS_PROOF",
                    condition:"!model.customer.addressProofSameAsIdProof",
                    items:[
                        {
                            key:"customer.addressProof",
                            type:"select"
                        },
                        {
                            key:"customer.addressProofImageId",
                            type:"file",
                            required: false,
                            fileType:"image/*"
                        },
                        {
                            key:"customer.addressProofReverseImageId",
                            type:"file",
                            fileType:"image/*"
                        },
                        {
                            key:"customer.addressProofNo",
                            type:"barcode",
                            onCapture: function(result, model, form) {
                                $log.info(result);
                                model.customer.addressProofNo = result.text;
                            }
                        },
                        {
                            key:"customer.addressProofIssueDate",
                            type:"date"
                        },
                        {
                            key:"customer.addressProofValidUptoDate",
                            type:"date"
                        },
                    ]
                },
                {
                    type:"fieldset",
                    title:"SPOUSE_IDENTITY_PROOF",
                    condition:"model.customer.maritalStatus==='MARRIED'",
                    items:[
                        {
                            key:"customer.udf.userDefinedFieldValues.udf33",
                            type:"select",
                            onChange: function(modelValue) {
                                $log.info(modelValue);
                            }
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf34",
                            type:"file",
                            fileType:"image/*"
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf35",
                            type:"file",
                            fileType:"image/*"
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf36",
                            condition: "model.customer.udf.userDefinedFieldValues.udf33 !== 'Aadhar card'",
                            type:"barcode",
                            onCapture: function(result, model, form) {
                                $log.info(result); // spouse id proof
                                model.customer.udf.userDefinedFieldValues.udf36 = result.text;
                            }
                        },
                        {
                            key:"customer.udf.userDefinedFieldValues.udf36",
                            condition: "model.customer.udf.userDefinedFieldValues.udf33 === 'Aadhar card'",
                            type:"qrcode",
                            onCapture: function(result, model, form) {
                                $log.info(result); // spouse id proof
                                var aadhaarData = EnrollmentHelper.parseAadhaar(result.text);
                                $log.info(aadhaarData);
                                model.customer.udf.userDefinedFieldValues.udf36 = aadhaarData.uid;
                                model.customer.spouseFirstName = aadhaarData.name;
                                if (aadhaarData.yob) {
                                    model.customer.spouseDateOfBirth = aadhaarData.yob + '-01-01';
                                    model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                                }
                            }
                        }
                    ]
                }

            ]
        },
            //{
            //"type":"box",
            //"title":"ADDITIONAL_KYC",
            //"items":[
            //    {
            //        "key":"customer.additionalKYCs",
            //        "type":"array",
            //        "add":null,
            //        "remove":null,
            //        "title":"ADDITIONAL_KYC",
            //        "items":[
            //            {
            //                key:"customer.additionalKYCs[].kyc1ProofNumber",
            //                type:"barcode",
            //                onCapture: function(result, model, form) {
            //                    $log.info(result);
            //                    model.customer.additionalKYCs[form.arrayIndex].kyc1ProofNumber = result.text;
            //                }
            //
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc1ProofType",
            //                type:"select"
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc1ImagePath",
            //                type:"file",
            //                fileType:"image/*"
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc1IssueDate",
            //                type:"date"
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc1ValidUptoDate",
            //                type:"date"
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc2ProofNumber",
            //                type:"barcode",
            //                onCapture: function(result, model, form) {
            //                    $log.info(result);
            //                    model.customer.additionalKYCs[form.arrayIndex].kyc2ProofNumber = result.text;
            //                }
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc2ProofType",
            //                type:"select"
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc2ImagePath",
            //                type:"file",
            //                fileType:"image/*"
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc2IssueDate",
            //                type:"date"
            //            },
            //            {
            //                key:"customer.additionalKYCs[].kyc2ValidUptoDate",
            //                type:"date"
            //            }
            //        ]
            //    }
            //]
            //},
        {
                "type": "box",
                "title": "T_FAMILY_DETAILS",
                "items": [{
                    key:"customer.familyMembers",
                    type:"array",
                    startEmpty: true,
                    items: [
                        {
                            key:"customer.familyMembers[].relationShip",
                            type:"select",
                            onChange: function(modelValue, form, model, formCtrl, event) {
                                if (modelValue && modelValue.toLowerCase() === 'self') {
                                    if (model.customer.id)
                                        model.customer.familyMembers[form.arrayIndex].customerId = model.customer.id;
                                    if (model.customer.firstName)
                                        model.customer.familyMembers[form.arrayIndex].familyMemberFirstName = model.customer.firstName;
                                    if (model.customer.gender)
                                        model.customer.familyMembers[form.arrayIndex].gender = model.customer.gender;
                                    model.customer.familyMembers[form.arrayIndex].age = model.customer.age;
                                    if (model.customer.dateOfBirth)
                                        model.customer.familyMembers[form.arrayIndex].dateOfBirth = model.customer.dateOfBirth;
                                    if (model.customer.maritalStatus)
                                        model.customer.familyMembers[form.arrayIndex].maritalStatus = model.customer.maritalStatus;
                                    if (model.customer.mobilePhone)
                                        model.customer.familyMembers[form.arrayIndex].mobilePhone = model.customer.mobilePhone;
                                } else if (modelValue && modelValue.toLowerCase() === 'spouse') {
                                    if (model.customer.spouseFirstName)
                                        model.customer.familyMembers[form.arrayIndex].familyMemberFirstName = model.customer.spouseFirstName;
                                    if (model.customer.gender)
                                        model.customer.familyMembers[form.arrayIndex].gender = model.customer.gender == 'MALE' ? 'MALE' :
                                            (model.customer.gender == 'FEMALE' ? 'FEMALE': model.customer.gender);
                                    model.customer.familyMembers[form.arrayIndex].age = model.customer.spouseAge;
                                    if (model.customer.spouseDateOfBirth)
                                        model.customer.familyMembers[form.arrayIndex].dateOfBirth = model.customer.spouseDateOfBirth;
                                    if (model.customer.maritalStatus)
                                        model.customer.familyMembers[form.arrayIndex].maritalStatus = model.customer.maritalStatus;
                                }
                            },
                            title: "T_RELATIONSHIP"
                        },
                        {
                            key:"customer.familyMembers[].customerId",
                            condition: "model.customer.familyMembers[arrayIndex].relationShip.toLowerCase() !== 'self'",
                            type:"lov",
                            "inputMap": {
                                "firstName": {
                                    "key": "customer.firstName",
                                    "title": "CUSTOMER_NAME"
                                },
                                "branchName": {
                                    "key": "customer.kgfsName",
                                    "type": "select"
                                },
                                "centreCode": {
                                    "key": "customer.centreCode",
                                    "type": "select"
                                }
                            },
                            "outputMap": {
                                "id": "customer.familyMembers[arrayIndex].customerId",
                                "firstName": "customer.familyMembers[arrayIndex].familyMemberFirstName"

                            },
                            "searchHelper": formHelper,
                            "search": function(inputModel, form) {
                                $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                var promise = Enrollment.search({
                                    'branchName': SessionStore.getBranch() || inputModel.branchName,
                                    'firstName': inputModel.first_name,
                                }).$promise;
                                return promise;
                            },
                            getListDisplayItem: function(data, index) {
                                return [
                                    [data.firstName, data.fatherFirstName].join(' '),
                                    data.id
                                ];
                            }
                        },
                        {
                            key:"customer.familyMembers[].familyMemberFirstName",
                            condition: "model.customer.familyMembers[arrayIndex].relationShip.toLowerCase() !== 'self'",
                            title:"FAMILY_MEMBER_FULL_NAME"
                        },
                        {
                            key: "customer.familyMembers[].gender",
                            condition: "model.customer.familyMembers[arrayIndex].relationShip.toLowerCase() !== 'self'",
                            type: "radios",
                            title: "T_GENDER"
                        },
                        {
                            key:"customer.familyMembers[].age",
                            condition: "model.customer.familyMembers[arrayIndex].relationShip.toLowerCase() !== 'self'",
                            title: "AGE",
                            type:"number",
                            "onChange": function(modelValue, form, model, formCtrl, event) {
                                if (model.customer.familyMembers[form.arrayIndex].age > 0) {
                                    if (model.customer.familyMembers[form.arrayIndex].dateOfBirth) {
                                        model.customer.familyMembers[form.arrayIndex].dateOfBirth = moment(new Date()).subtract(model.customer.familyMembers[form.arrayIndex].age, 'years').format('YYYY-') + moment(model.customer.familyMembers[form.arrayIndex].dateOfBirth, 'YYYY-MM-DD').format('MM-DD');
                                    } else {
                                        model.customer.familyMembers[form.arrayIndex].dateOfBirth = moment(new Date()).subtract(model.customer.familyMembers[form.arrayIndex].age, 'years').format('YYYY-MM-DD');
                                    }
                                }
                            }
                        },
                        {
                            key: "customer.familyMembers[].dateOfBirth",
                            condition: "model.customer.familyMembers[arrayIndex].relationShip.toLowerCase() !== 'self'",
                            type:"date",
                            title: "T_DATEOFBIRTH",
                            "onChange": function(modelValue, form, model, formCtrl, event) {
                                if (model.customer.familyMembers[form.arrayIndex].dateOfBirth) {
                                    model.customer.familyMembers[form.arrayIndex].age = moment().diff(moment(model.customer.familyMembers[form.arrayIndex].dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                                }
                            }
                        },
                        {
                            key:"customer.familyMembers[].educationStatus",
                            type:"select",
                            title: "T_EDUCATION_STATUS"
                        },
                        {
                            key:"customer.familyMembers[].maritalStatus",
                            condition: "model.customer.familyMembers[arrayIndex].relationShip.toLowerCase() !== 'self'",
                            type:"select",
                            title: "T_MARITAL_STATUS"
                        },
                        {
                            key: "customer.familyMembers[].mobilePhone",
                            condition: "model.customer.familyMembers[arrayIndex].relationShip.toLowerCase() !== 'self'"
                        },
                        {
                            key:"customer.familyMembers[].healthStatus",
                            type:"radios",
                            titleMap:{
                                "GOOD":"GOOD",
                                "BAD":"BAD"
                            },

                        },
                        {
                            key:"customer.familyMembers[].incomes",
                            type:"array",
                            startEmpty: true,
                            items:[
                                {
                                    key: "customer.familyMembers[].incomes[].incomeSource",
                                    type:"select"
                                },
                                "customer.familyMembers[].incomes[].incomeEarned",
                                {
                                    key: "customer.familyMembers[].incomes[].frequency",
                                    type: "select"
                                }

                            ]

                        }
                    ]
                }]
            },
            //{
            //    "type": "box",
            //    "title": "EXPENDITURES",
            //    "items": [{
            //        key:"customer.expenditures",
            //        type:"array",
            //        startEmpty: true,
            //        // remove: null,
            //        // view: "fixed",
            //        titleExpr: "model.customer.expenditures[arrayIndex].expenditureSource | translate",
            //        items:[{
            //            type: 'section',
            //            htmlClass: 'row',
            //            items: [{
            //                type: 'section',
            //                htmlClass: 'col-xs-6',
            //                items: [{
            //                    key:"customer.expenditures[].frequency",
            //                    type:"select",
            //                    notitle: true
            //                }]
            //            },{
            //                type: 'section',
            //                htmlClass: 'col-xs-6',
            //                items: [{
            //                    key: "customer.expenditures[].annualExpenses",
            //                    type:"amount",
            //                    notitle: true
            //                }]
            //            }]
            //        }]
            //    }]
            //},
            //{
            //    "type":"box",
            //    "title":"BUSINESS_OCCUPATION_DETAILS",
            //    "items":[
            //        {
            //            key:"customer.udf.userDefinedFieldValues.udf13",
            //            type:"select"
            //
            //
            //        },
            //        {
            //            type:"fieldset",
            //            condition:"model.customer.udf.userDefinedFieldValues.udf13=='Business' || model.customer.udf.userDefinedFieldValues.udf13=='Employed'",
            //            items:[
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf14",
            //                    type:"select"
            //
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf7"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf22"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf8"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf9"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf10"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf11"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf12"
            //                },
            //
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf23",
            //                    type:"radios"
            //                },
            //
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf17"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf16",
            //                    type:"select"
            //                },
            //
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf18",
            //                    type:"select"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf19",
            //                    type:"radios"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf20",
            //                    type:"select"
            //
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf21",
            //                    condition:"model.customer.udf.userDefinedFieldValues.udf20=='OTHERS'"
            //                }
            //            ]
            //        },
            //        {
            //            type:"fieldset",
            //            condition:"model.customer.udf.userDefinedFieldValues.udf13=='Agriculture'",
            //            title:"AGRICULTURE_DETAILS",
            //            items:[
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf24",
            //                    type:"select"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf25",
            //                    type:"select"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf15"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf26"
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf27",
            //                    type:"select"
            //
            //                },
            //                {
            //                    key:"customer.udf.userDefinedFieldValues.udf28"
            //                }
            //            ]
            //        }
            //
            //    ]
            //},
            //{
            //    "type": "box",
            //    "title": "T_ASSETS",
            //    "items": [
            //        {
            //            key: "customer.physicalAssets",
            //            type: "array",
            //            startEmpty: true,
            //            items: [
            //                {
            //                    key:"customer.physicalAssets[].ownedAssetDetails",
            //                    type:"select"
            //
            //                },
            //                "customer.physicalAssets[].numberOfOwnedAsset",
            //                {
            //                    key:"customer.physicalAssets[].ownedAssetValue",
            //                }
            //            ]
            //        },
            //        {
            //            key: "customer.financialAssets",
            //            title:"FINANCIAL_ASSETS",
            //            type: "array",
            //            startEmpty: true,
            //            items: [
            //                {
            //                    key:"customer.financialAssets[].instrumentType",
            //                    type:"select"
            //                },
            //                "customer.financialAssets[].nameOfInstitution",
            //                {
            //                    key:"customer.financialAssets[].instituteType",
            //                    type:"select"
            //                },
            //                {
            //                    key: "customer.financialAssets[].amountInPaisa",
            //                    type: "amount"
            //                },
            //                {
            //                    key:"customer.financialAssets[].frequencyOfDeposite",
            //                    type:"select"
            //                },
            //                {
            //                    key:"customer.financialAssets[].startDate",
            //                    type:"date"
            //                },
            //                {
            //                    key:"customer.financialAssets[].maturityDate",
            //                    type:"date"
            //                }
            //            ]
            //        }]
            //
            //},
            //{
            //    type:"box",
            //    title:"T_LIABILITIES",
            //    items:[
            //        {
            //            key:"customer.liabilities",
            //            type:"array",
            //            startEmpty: true,
            //            title:"FINANCIAL_LIABILITIES",
            //            items:[
            //                {
            //                    key:"customer.liabilities[].loanType",
            //                    type:"select"
            //                },
            //                {
            //                    key:"customer.liabilities[].loanSource",
            //                    type:"select"
            //                },
            //                "customer.liabilities[].instituteName",
            //                {
            //                    key: "customer.liabilities[].loanAmountInPaisa",
            //                    type: "amount"
            //                },
            //                {
            //                    key: "customer.liabilities[].installmentAmountInPaisa",
            //                    type: "amount"
            //                },
            //                {
            //                    key: "customer.liabilities[].startDate",
            //                    type:"date"
            //                },
            //                {
            //                    key:"customer.liabilities[].maturityDate",
            //                    type:"date"
            //                },
            //                {
            //                    key:"customer.liabilities[].frequencyOfInstallment",
            //                    type:"select"
            //                },
            //                {
            //                    key:"customer.liabilities[].liabilityLoanPurpose",
            //                    type:"select"
            //                }
            //
            //            ]
            //        }
            //    ]
            //},
            //{
            //    "type": "box",
            //    "title": "BIOMETRIC",
            //    "items": [
            //        {
            //            type: "button",
            //            title: "CAPTURE_FINGERPRINT",
            //            notitle: true,
            //            fieldHtmlClass: "btn-block",
            //            onClick: function(model, form, formName){
            //                var promise = BiometricService.capture(model);
            //                promise.then(function(data){
            //                    model.customer.$fingerprint = data;
            //                }, function(reason){
            //                    console.log(reason);
            //                })
            //            }
            //        },
            //        {
            //            "type": "section",
            //            "html": '<div class="row"> <div class="col-xs-6">' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftThumb\')"></i> {{ model.getFingerLabel(\'LeftThumb\') }}</span><br>' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftIndex\')"></i> {{ model.getFingerLabel(\'LeftIndex\') }}</span><br>' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftMiddle\')"></i> {{ model.getFingerLabel(\'LeftMiddle\') }}</span><br>' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftRing\')"></i> {{ model.getFingerLabel(\'LeftRing\') }}</span><br>' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftLittle\')"></i> {{ model.getFingerLabel(\'LeftLittle\') }}</span><br>' +
            //            '</div> <div class="col-xs-6">' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightThumb\')"></i> {{ model.getFingerLabel(\'RightThumb\') }}</span><br>' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightIndex\')"></i> {{ model.getFingerLabel(\'RightIndex\') }}</span><br>' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightMiddle\')"></i> {{ model.getFingerLabel(\'RightMiddle\') }}</span><br>' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightRing\')"></i> {{ model.getFingerLabel(\'RightRing\') }}</span><br>' +
            //            '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightLittle\')"></i> {{ model.getFingerLabel(\'RightLittle\') }}</span><br>' +
            //            '</div></div>'
            //        }
            //    ]
            //},
            {
                "type": "box",
                "title": "T_HOUSE_VERIFICATION",
                "items": [
                    //{
                    //    "key": "customer.firstName",
                    //    "title": "CUSTOMER_NAME",
                    //    "readonly": true
                    //},
                    //{
                    //    key:"customer.nameInLocalLanguage"
                    //},
                    //{
                    //    key:"customer.addressInLocalLanguage",
                    //    type:"textarea"
                    //},


                    //{
                    //    key:"customer.caste",
                    //    type:"select"
                    //},
                    //{
                    //    key:"customer.language",
                    //    type:"select"
                    //},
                    {
                        type:"fieldset",
                        title:"HOUSE_DETAILS",
                        items:[
                            {
                                key:"customer.ownership",
                                type:"select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf29", // customer.inCurrentAddressSince
                                type: "select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf30", // customer.inCurrentAreaSince
                                type:"select"
                            }
                        ]
                    },
                    {
                       "key": "customer.latitude",
                       "title": "HOUSE_LOCATION",
                       "type": "geotag",
                       "latitude": "customer.latitude",
                       "longitude": "customer.longitude"
                    },
                    //{
                    //   key: "customer.nameOfRo",
                    //   readonly: true
                    //},
                    {
                       key:"customer.houseVerificationPhoto",
                       type:"file",
                       fileType:"image/*"
                    },
                    {
                       key: "customer.date",
                       type:"date"
                    },
                    "customer.place"
                ]
            },
            {
                type: "box",
                title: "CUSTOMER_BANK_ACCOUNTS",
                items: [
                    {
                        key: "customer.customerBankAccounts",
                        type: "array",
                        title: "BANK_ACCOUNTS",
                        startEmpty: true,
                        items: [
                            {
                                key: "customer.customerBankAccounts[].ifscCode",
                                type: "lov",
                                lovonly: true,
                                inputMap: {
                                    "ifscCode": {
                                        "key": "customer.customerBankAccounts[].ifscCode"
                                    },
                                    "bankName": {
                                        "key": "customer.customerBankAccounts[].customerBankName"
                                    },
                                    "branchName": {
                                        "key": "customer.customerBankAccounts[].customerBankBranchName"
                                    }
                                },
                                outputMap: {
                                    "bankName": "customer.customerBankAccounts[arrayIndex].customerBankName",
                                    "branchName": "customer.customerBankAccounts[arrayIndex].customerBankBranchName",
                                    "ifscCode": "customer.customerBankAccounts[arrayIndex].ifscCode"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form) {
                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                    var promise = CustomerBankBranch.search({
                                        'bankName': inputModel.bankName,
                                        'ifscCode': inputModel.ifscCode,
                                        'branchName': inputModel.branchName
                                    }).$promise;
                                    return promise;
                                },
                                getListDisplayItem: function(data, index) {
                                    return [
                                        data.ifscCode,
                                        data.branchName,
                                        data.bankName
                                    ];
                                }
                            },
                            {
                                key: "customer.customerBankAccounts[].customerBankName",
                                readonly: true
                            },
                            {
                                key: "customer.customerBankAccounts[].customerBankBranchName",
                                readonly: true
                            },
                            {
                                key: "customer.customerBankAccounts[].customerNameAsInBank"
                            },
                            {
                                key: "customer.customerBankAccounts[].accountNumber"
                            },
                            {
                                key: "customer.customerBankAccounts[].accountType",
                                type: "select"
                            },
                            {
                                key: "customer.customerBankAccounts[].isDisbersementAccount",
                                type: "radios",
                                titleMap: [{
                                    value: true,
                                    name: "Yes"
                                },{
                                    value: false,
                                    name: "No"
                                }]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "actionbox",
                "condition": "!model.customer.id",
                "items": [/*{
                    "type": "save",
                    "title": "SAVE"
                },*/{
                    "type": "submit",
                    "title": "SUBMIT"
                }]
            },
            {
                "type": "actionbox",
                "condition": "model.customer.id",
                "items": [/*{
                    "type": "save",
                    "title": "SAVE"
                },*/{
                    "type": "submit",
                    "title": "SUBMIT"
                },{
                    "type": "button",
                    "title": "RELOAD",
                    "icon": "fa fa-refresh",
                    "onClick": "actions.reload(model, formCtrl, form, $event)"
                }]
            }
        ],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            setProofs:function(model){
                model.customer.addressProofNo=model.customer.aadhaarNo;
                model.customer.identityProofNo=model.customer.aadhaarNo;
                model.customer.identityProof='Aadhar card';
                model.customer.addressProof='Aadhar card';
                model.customer.addressProofSameAsIdProof = true;
                if (model.customer.yearOfBirth) {
                    model.customer.dateOfBirth = model.customer.yearOfBirth + '-01-01';
                }
            },
            preSave: function(model, form, formName) {
                var deferred = $q.defer();
                if (model.customer.firstName) {
                    deferred.resolve();
                } else {
                    irfProgressMessage.pop('enrollment-save', 'Customer Name is required', 3000);
                    deferred.reject();
                }
                return deferred.promise;
            },
            reload: function(model, formCtrl, form, $event) {
                $state.go("Page.Engine", {
                    pageName: 'customer.IndividualEnrollment',
                    pageId: model.customer.id
                },{
                    reload: true,
                    inherit: false,
                    notify: true
                });
            },
            submit: function(model, form, formName){
                var actions = this.actions;
                $log.info("Inside submit()");
                $log.warn(model);
                if (!EnrollmentHelper.validateData(model)) {
                    $log.warn("Invalid Data, returning false");
                    return false;
                }
                var reqData = _.cloneDeep(model);
                EnrollmentHelper.fixData(reqData);

                var out = reqData.customer.$fingerprint;
                var fpPromisesArr = [];
                for (var key in out) {
                    if (out.hasOwnProperty(key) && out[key].data!=null) {
                        (function(obj){
                            var promise = Files.uploadBase64({file: obj.data, type: 'CustomerEnrollment', subType: 'FINGERPRINT', extn:'iso'}, {}).$promise;
                            promise.then(function(data){
                                reqData.customer[obj.table_field] = data.fileId;
                                delete reqData.customer.$fingerprint[obj.fingerId];
                            });
                            fpPromisesArr.push(promise);
                        })(out[key]);
                    } else {
                        if (out[key].data == null){
                            delete out[key];
                        }
                    }
                }

                // $q.all start
                $q.all(fpPromisesArr).then(function(){
                    try{
                        var liabilities = reqData['customer']['liabilities'];
                        if (liabilities && liabilities!=null && typeof liabilities.length == "number" && liabilities.length >0 ){
                            for (var i=0; i<liabilities.length;i++){
                                var l = liabilities[i];
                                l.loanAmountInPaisa = l.loanAmountInPaisa * 100;
                                l.installmentAmountInPaisa = l.installmentAmountInPaisa * 100;
                            }
                        }

                        var financialAssets = reqData['customer']['financialAssets'];
                        if (financialAssets && financialAssets!=null && typeof financialAssets.length == "number" && financialAssets.length >0 ){
                            for (var i=0; i<financialAssets.length;i++){
                                var f = financialAssets[i];
                                f.amountInPaisa = f.amountInPaisa * 100;
                            }
                        }
                    } catch(e){
                        $log.info("Error trying to change amount info.");
                    }

                    reqData['enrollmentAction'] = 'PROCEED';

                    irfProgressMessage.pop('enrollment-submit', 'Working... Please wait.', 5000);

                    reqData.customer.verified = true;
                    if (reqData.customer.hasOwnProperty('verifications')){
                        var verifications = reqData.customer['verifications'];
                        for (var i=0; i<verifications.length; i++){
                            if (verifications[i].houseNoIsVerified){
                                verifications[i].houseNoIsVerified=1;
                            }
                            else{
                                verifications[i].houseNoIsVerified=0;
                            }
                        }
                    }
                    try{
                        for(var i=0;i<reqData.customer.familyMembers.length;i++){
                            var incomes = reqData.customer.familyMembers[i].incomes;

                            for(var j=0;j<incomes.length;j++){
                                switch(incomes[i].frequency){
                                    case 'M': incomes[i].monthsPerYear=12; break;
                                    case 'Monthly': incomes[i].monthsPerYear=12; break;
                                    case 'D': incomes[i].monthsPerYear=365; break;
                                    case 'Daily': incomes[i].monthsPerYear=365; break;
                                    case 'W': incomes[i].monthsPerYear=52; break;
                                    case 'Weekly': incomes[i].monthsPerYear=52; break;
                                    case 'F': incomes[i].monthsPerYear=26; break;
                                    case 'Fornightly': incomes[i].monthsPerYear=26; break;
                                    case 'Fortnightly': incomes[i].monthsPerYear=26; break;
                                }
                            }
                        }
                    }catch(err){
                        console.error(err);
                    }

                    EnrollmentHelper.fixData(reqData);
                    if (reqData.customer.id) {
                        EnrollmentHelper.proceedData(reqData).then(function(resp){
                            // Utils.removeNulls(resp.customer,true);
                            // model.customer = resp.customer;
                            $state.go('Page.Landing', null);
                        });
                    } else {
                        EnrollmentHelper.saveData(reqData).then(function(res){
                            EnrollmentHelper.proceedData(res).then(function(resp){
                                // Utils.removeNulls(resp.customer,true);
                                // model.customer = resp.customer;
                                $state.go('Page.Landing', null);
                            }, function(err) {
                                Utils.removeNulls(res.customer,true);
                                model.customer = res.customer;
                            });
                        });
                    }
                });
                // $q.all end
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("customer360.CustomerProfile"),
["$log", "Enrollment", "EnrollmentHelper", "SessionStore", "formHelper", "$q", "irfProgressMessage",
"PageHelper", "Utils", "BiometricService", "PagesDefinition", "Queries", "CustomerBankBranch",
function($log, Enrollment, EnrollmentHelper, SessionStore, formHelper, $q, irfProgressMessage,
    PageHelper, Utils, BiometricService, PagesDefinition, Queries, CustomerBankBranch){

    var branch = SessionStore.getBranch();

    var initData = function(model) {
        model.customer.idAndBcCustId = model.customer.id + ' / ' + model.customer.bcCustId;
        model.customer.fullName = Utils.getFullName(model.customer.firstName, model.customer.middleName, model.customer.lastName);
        model.customer.fatherFullName = Utils.getFullName(model.customer.fatherFirstName, model.customer.fatherMiddleName, model.customer.fatherLastName);
        model.customer.age = moment().diff(moment(model.customer.dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
    };

    return {
        "type": "schema-form",
        "title": "PROFILE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            var self = this;
            self.form = [];
            PagesDefinition.setReadOnlyByRole("Page/Engine/customer360.CustomerProfile", self.formSource).then(function(form){
                self.form = form;
            });
            initData(model);
        },
        modelPromise: function(pageId, _model) {
            if (!_model || !_model.customer || _model.customer.id != pageId) {
                $log.info("data not there, loading...");

                var deferred = $q.defer();
                PageHelper.showLoader();
                Enrollment.getCustomerById({id:pageId},function(resp,header){
                    var model = {$$OFFLINE_FILES$$:_model.$$OFFLINE_FILES$$};
                    model.customer = resp;
                    model = EnrollmentHelper.fixData(model);
                    if (model.customer.currentStage==='BasicEnrollment') {
                        irfProgressMessage.pop("enrollment-save","Customer "+model.customer.id+" not enrolled yet", 5000);
                        $state.go("Page.Engine", {pageName:'ProfileInformation', pageId:pageId});
                    } else {
                        irfProgressMessage.pop("enrollment-save","Load Complete", 2000);
                        initData(model);
                        deferred.resolve(model);
                    }
                    PageHelper.hideLoader();
                },function(resp){
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("enrollment-save","An Error Occurred. Failed to fetch Data",5000);
                    $state.go("Page.Engine",{
                        pageName:"CustomerSearch",
                        pageId:null
                    });
                });
                return deferred.promise;
            }
        },
        form: [],
        formSource: [
            {
                "type": "box",
                "title": "CUSTOMER_INFORMATION",
                "readonly": true,
                "items": [
                    {
                        key: "customer.customerBranchId",
                        title:"BRANCH_NAME",
                        type: "select",
                        readonly: true
                    },
                    {
                        key:"customer.centreId",
                        type:"select",
                        readonly: true
                    },
                    {
                        key: "customer.idAndBcCustId",
                        title: "Id & BC Id",
                        titleExpr: "('ID'|translate) + ' & ' + ('BC_CUST_ID'|translate)",
                        readonly: true
                    },
                    {
                        key: "customer.urnNo",
                        title: "URN_NO",
                        readonly: true
                    },
                    {
                        key: "customer.fullName",
                        title: "FULL_NAME",
                        readonly: true
                    },
                    {
                        key:"customer.photoImageId",
                        type:"file",
                        fileType:"image/*",
                        "viewParams": function(modelValue, form, model) {
                            return {
                                customerId: model.customer.id
                            };
                        },
                        readonly: true
                    },
                    {
                        key:"customer.centreCode",
                        type:"select",
                        filter: {
                            "parentCode as branch": "model.customer.kgfsName"
                        },
                        screenFilter: true
                    },
                    {
                        key:"customer.enrolledAs",
                        type:"radios",
                        readonly: true
                    },
                    {
                        key:"customer.gender",
                        type:"radios",
                        readonly: true
                    },
                    {
                        key:"customer.age",
                        title: "AGE",
                        type:"number",
                        readonly: true
                    },
                    {
                        key:"customer.dateOfBirth",
                        type:"date",
                        /*onChange: function(modelValue, form, model) {
                            if (model.customer.dateOfBirth) {
                                model.customer.age = moment().diff(moment(model.customer.dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                            }
                        },*/
                        readonly: true
                    },
                    {
                        key: "customer.fatherFullName",
                        title: "FATHER_FULL_NAME",
                        readonly: true
                    },
                    {
                        key:"customer.maritalStatus",
                        type:"select"
                    },
                    {
                        key: "customer.spouseFirstName",
                        title: "SPOUSE_FULL_NAME",
                        condition:"model.customer.maritalStatus==='MARRIED'",
                        type:"qrcode",
                        onCapture: function(result, model, form) {
                            $log.info(result); // spouse id proof
                            var aadhaarData = EnrollmentHelper.parseAadhaar(result.text);
                            $log.info(aadhaarData);
                            model.customer.udf.userDefinedFieldValues.udf33 = 'Aadhar card';
                            model.customer.udf.userDefinedFieldValues.udf36 = aadhaarData.uid;
                            model.customer.spouseFirstName = aadhaarData.name;
                            if (aadhaarData.yob) {
                                model.customer.spouseDateOfBirth = aadhaarData.yob + '-01-01';
                                model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                            }
                        }
                    },
                    {
                        key:"customer.spouseAge",
                        title: "SPOUSE_AGE",
                        type:"number",
                        condition:"model.customer.maritalStatus==='MARRIED'",
                        "onChange": function(modelValue, form, model) {
                            if (model.customer.spouseAge > 0) {
                                if (model.customer.spouseDateOfBirth) {
                                    model.customer.spouseDateOfBirth = moment(new Date()).subtract(model.customer.spouseAge, 'years').format('YYYY-') + moment(model.customer.spouseDateOfBirth, 'YYYY-MM-DD').format('MM-DD');
                                } else {
                                    model.customer.spouseDateOfBirth = moment(new Date()).subtract(model.customer.spouseAge, 'years').format('YYYY-MM-DD');
                                }
                            }
                        }
                    },
                    {
                        key:"customer.spouseDateOfBirth",
                        type:"date",
                        condition:"model.customer.maritalStatus==='MARRIED'",
                        "onChange": function(modelValue, form, model) {
                            if (model.customer.spouseDateOfBirth) {
                                model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                            }
                        }
                    },
                    {
                        key:"customer.udf.userDefinedFieldValues.udf1",
                        condition:"model.customer.maritalStatus==='MARRIED'",
                        title:"SPOUSE_LOAN_CONSENT"
                    }/*,
                    {
                        key:"customer.isBiometricValidated",
                        title: "Validate Fingerprint",
                        type:"validatebiometric",
                        helper: formHelper,
                        biometricMap: {
                            leftThumb: "model.customer.leftHandThumpImageId",
                            leftIndex: "model.customer.leftHandIndexImageId",
                            leftMiddle: "model.customer.leftHandMiddleImageId",
                            leftRing: "model.customer.leftHandRingImageId",
                            leftLittle: "model.customer.leftHandSmallImageId",
                            rightThumb: "model.customer.rightHandThumpImageId",
                            rightIndex: "model.customer.rightHandIndexImageId",
                            rightMiddle: "model.customer.rightHandMiddleImageId",
                            rightRing: "model.customer.rightHandRingImageId",
                            rightLittle: "model.customer.rightHandSmallImageId"
                        },
                        viewParams: function(modelValue, form, model) {
                            return {
                                customerId: model.customer.id
                            };
                        }
                    }*/
                ]
            },
            {
                "type": "box",
                "title": "CONTACT_INFORMATION",
                "items": [
                    "customer.mobilePhone",
                    "customer.landLineNo",
                    {
                        type: "fieldset",
                        title: "CUSTOMER_RESIDENTIAL_ADDRESS",
                        items: [
                            "customer.doorNo",
                            "customer.street",
                            "customer.postOffice",
                            "customer.landmark",
                            {
                                key: "customer.pincode",
                                type: "lov",
                                fieldType: "number",
                                autolov: true,
                                inputMap: {
                                    "pincode": "customer.pincode",
                                    "district": {
                                        key: "customer.district"
                                    },
                                    "state": {
                                        key: "customer.state"
                                    }
                                },
                                outputMap: {
                                    "division": "customer.locality",
                                    "region": "customer.villageName",
                                    "pincode": "customer.pincode",
                                    "district": "customer.district",
                                    "state": "customer.state"
                                },
                                searchHelper: formHelper,
                                initialize: function(inputModel) {
                                    $log.warn('in pincode initialize');
                                    $log.info(inputModel);
                                },
                                search: function(inputModel, form, model) {
                                    if (!inputModel.pincode) {
                                        return $q.reject();
                                    }
                                    return Queries.searchPincodes(
                                        inputModel.pincode,
                                        inputModel.district,
                                        inputModel.state
                                    );
                                },
                                getListDisplayItem: function(item, index) {
                                    return [
                                        item.division + ', ' + item.region,
                                        item.pincode,
                                        item.district + ', ' + item.state
                                    ];
                                },
                                onSelect: function(result, model, context) {
                                    $log.info(result);
                                }
                            },
                            "customer.locality",
                            "customer.villageName",
                            "customer.district",
                            "customer.state",
                            "customer.mailSameAsResidence"
                        ]
                    },
                    {
                        type: "fieldset",
                        title: "CUSTOMER_PERMANENT_ADDRESS",
                        condition:"!model.customer.mailSameAsResidence",
                        items: [
                            "customer.mailingDoorNo",
                            "customer.mailingStreet",
                            "customer.mailingPostoffice",
                            {
                                key: "customer.mailingPincode",
                                type: "lov",
                                fieldType: "number",
                                autolov: true,
                                inputMap: {
                                    "pincode": "customer.mailingPincode",
                                    "district": {
                                        key: "customer.mailingDistrict"
                                    },
                                    "state": {
                                        key: "customer.mailingState"
                                    }
                                },
                                outputMap: {
                                    "pincode": "customer.mailingPincode",
                                    "district": "customer.mailingDistrict",
                                    "state": "customer.mailingState"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    if (!inputModel.pincode) {
                                        return $q.reject();
                                    }
                                    return Queries.searchPincodes(
                                        inputModel.pincode,
                                        inputModel.district,
                                        inputModel.state
                                    );
                                },
                                getListDisplayItem: function(item, index) {
                                    return [
                                        item.pincode,
                                        item.district + ', ' + item.state
                                    ];
                                }
                            },
                            "customer.mailingLocality",
                            "customer.mailingDistrict",
                            "customer.mailingState"
                        ]
                    }
                ]
            },
            {
                type:"box",
                title:"KYC",
                "readonly": true,
                items:[
                    {
                        "key": "customer.aadhaarNo",
                        type:"qrcode",
                        onChange:"actions.setProofs(model)",
                        onCapture: EnrollmentHelper.customerAadhaarOnCapture
                    },
                    {
                        type:"fieldset",
                        title:"IDENTITY_PROOF",
                        items:[
                            {
                                key:"customer.identityProof",
                                type:"select"
                            },
                            {
                                key:"customer.identityProofImageId",
                                type:"file",
                                fileType:"image/*",
                                "viewParams": function(modelValue, form, model) {
                                    return {
                                        customerId: model.customer.id
                                    };
                                }
                            },
                            {
                                key:"customer.identityProofReverseImageId",
                                type:"file",
                                fileType:"image/*",
                                "viewParams": function(modelValue, form, model) {
                                    return {
                                        customerId: model.customer.id
                                    };
                                }
                            },
                            {
                                key:"customer.identityProofNo",
                                type:"barcode",
                                onCapture: function(result, model, form) {
                                    $log.info(result);
                                    model.customer.identityProofNo = result.text;
                                }
                            },
                            {
                                key:"customer.idProofIssueDate",
                                type:"date"
                            },
                            {
                                key:"customer.idProofValidUptoDate",
                                type:"date"
                            },
                            {
                                key:"customer.addressProofSameAsIdProof"
                            }
                        ]
                    },
                    {
                        type:"fieldset",
                        title:"ADDRESS_PROOF",
                        condition:"!model.customer.addressProofSameAsIdProof",
                        items:[
                            {
                                key:"customer.addressProof",
                                type:"select"
                            },
                            {
                                key:"customer.addressProofImageId",
                                type:"file",
                                fileType:"image/*",
                                "viewParams": function(modelValue, form, model) {
                                    return {
                                        customerId: model.customer.id
                                    };
                                }
                            },
                            {
                                key:"customer.addressProofReverseImageId",
                                type:"file",
                                fileType:"image/*",
                                "viewParams": function(modelValue, form, model) {
                                    return {
                                        customerId: model.customer.id
                                    };
                                }
                            },
                            {
                                key:"customer.addressProofNo",
                                type:"barcode",
                                onCapture: function(result, model, form) {
                                    $log.info(result);
                                    model.customer.addressProofNo = result.text;
                                }
                            },
                            {
                                key:"customer.addressProofIssueDate",
                                type:"date"
                            },
                            {
                                key:"customer.addressProofValidUptoDate",
                                type:"date"
                            },
                        ]
                    },
                    {
                        type:"fieldset",
                        title:"SPOUSE_IDENTITY_PROOF",
                        condition:"model.customer.maritalStatus==='MARRIED'",
                        items:[
                            {
                                key:"customer.udf.userDefinedFieldValues.udf33",
                                type:"select",
                                onChange: function(modelValue) {
                                    $log.info(modelValue);
                                }
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf34",
                                type:"file",
                                fileType:"image/*",
                                "viewParams": function(modelValue, form, model) {
                                    return {
                                        customerId: model.customer.id
                                    };
                                }
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf35",
                                type:"file",
                                fileType:"image/*",
                                "viewParams": function(modelValue, form, model) {
                                    return {
                                        customerId: model.customer.id
                                    };
                                }
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf36",
                                condition: "model.customer.udf.userDefinedFieldValues.udf33 !== 'Aadhar card'",
                                type:"barcode",
                                onCapture: function(result, model, form) {
                                    $log.info(result); // spouse id proof
                                    model.customer.udf.userDefinedFieldValues.udf36 = result.text;
                                }
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf36",
                                condition: "model.customer.udf.userDefinedFieldValues.udf33 === 'Aadhar card'",
                                type:"qrcode",
                                onCapture: function(result, model, form) {
                                    $log.info(result); // spouse id proof
                                    var aadhaarData = EnrollmentHelper.parseAadhaar(result.text);
                                    $log.info(aadhaarData);
                                    model.customer.udf.userDefinedFieldValues.udf36 = aadhaarData.uid;
                                    model.customer.spouseFirstName = aadhaarData.name;
                                    if (aadhaarData.yob) {
                                        model.customer.spouseDateOfBirth = aadhaarData.yob + '-01-01';
                                        model.customer.spouseAge = moment().diff(moment(model.customer.spouseDateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                                    }
                                }
                            }
                        ]
                    }
                ]
            },
            {
                "type": "box",
                "title": "T_FAMILY_DETAILS",
                "readonly": true,
                "items": [{
                    key:"customer.familyMembers",
                    type:"array",
                    items: [
                        {
                            key:"customer.familyMembers[].customerId",
                            readonly: true,
                            type:"lov",
                            "inputMap": {
                                "firstName": {
                                    "key": "customer.firstName",
                                    "title": "CUSTOMER_NAME"
                                },
                                "branchName": {
                                    "key": "customer.kgfsName",
                                    "type": "select"
                                },
                                "centreCode": {
                                    "key": "customer.centreCode",
                                    "type": "select"
                                }
                            },
                            "outputMap": {
                                "id": "customer.familyMembers[arrayIndex].customerId",
                                "firstName": "customer.familyMembers[arrayIndex].familyMemberFirstName"

                            },
                            "searchHelper": formHelper,
                            "search": function(inputModel, form) {
                                $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                var promise = Enrollment.search({
                                    'branchName': SessionStore.getBranch() || inputModel.branchName,
                                    'firstName': inputModel.first_name,
                                }).$promise;
                                return promise;
                            },
                            getListDisplayItem: function(data, index) {
                                return [
                                    [data.firstName, data.fatherFirstName].join(' '),
                                    data.id
                                ];
                            }
                        },
                        {
                            key:"customer.familyMembers[].familyMemberFirstName",
                            title:"FAMILY_MEMBER_FULL_NAME",
                            readonly: true
                        },
                        {
                            key:"customer.familyMembers[].relationShip",
                            type:"select",
                            title: "T_RELATIONSHIP"
                        },
                        {
                            key: "customer.familyMembers[].gender",
                            type: "radios",
                            title: "T_GENDER",
                            readonly: true
                        },
                        {
                            key:"customer.familyMembers[].age",
                            title: "AGE",
                            type:"number",
                            "onChange": function(modelValue, form, model, formCtrl, event) {
                                if (model.customer.familyMembers[form.arrayIndex].age > 0) {
                                    if (model.customer.familyMembers[form.arrayIndex].dateOfBirth) {
                                        model.customer.familyMembers[form.arrayIndex].dateOfBirth = moment(new Date()).subtract(model.customer.familyMembers[form.arrayIndex].age, 'years').format('YYYY-') + moment(model.customer.familyMembers[form.arrayIndex].dateOfBirth, 'YYYY-MM-DD').format('MM-DD');
                                    } else {
                                        model.customer.familyMembers[form.arrayIndex].dateOfBirth = moment(new Date()).subtract(model.customer.familyMembers[form.arrayIndex].age, 'years').format('YYYY-MM-DD');
                                    }
                                }
                            },
                            readonly: true
                        },
                        {
                            key: "customer.familyMembers[].dateOfBirth",
                            type:"date",
                            title: "T_DATEOFBIRTH",
                            "onChange": function(modelValue, form, model, formCtrl, event) {
                                if (model.customer.familyMembers[form.arrayIndex].dateOfBirth) {
                                    model.customer.familyMembers[form.arrayIndex].age = moment().diff(moment(model.customer.familyMembers[form.arrayIndex].dateOfBirth, SessionStore.getSystemDateFormat()), 'years');
                                }
                            },
                            readonly: true
                        },
                        {
                            key:"customer.familyMembers[].educationStatus",
                            type:"select",
                            title: "T_EDUCATION_STATUS"
                        },
                        {
                            key:"customer.familyMembers[].maritalStatus",
                            type:"select",
                            title: "T_MARITAL_STATUS"
                        },

                        "customer.familyMembers[].mobilePhone",
                        {
                            key:"customer.familyMembers[].healthStatus",
                            type:"radios",
                            titleMap:{
                                "GOOD":"GOOD",
                                "BAD":"BAD"
                            },

                        },
                        {
                            key:"customer.familyMembers[].incomes",
                            type:"array",
                            items:[
                                {
                                    key: "customer.familyMembers[].incomes[].incomeSource",
                                    type:"select"
                                },
                                "customer.familyMembers[].incomes[].incomeEarned",
                                {
                                    key: "customer.familyMembers[].incomes[].frequency",
                                    type: "select"
                                }

                            ]

                        }
                    ]
                },
                {
                    "type": "fieldset",
                    "title": "EXPENDITURES",
                    "items": [{
                        key:"customer.expenditures",
                        type:"array",
                        remove: null,
                        view: "fixed",
                        titleExpr: "model.customer.expenditures[arrayIndex].expenditureSource | translate",
                        items:[{
                            type: 'section',
                            htmlClass: 'row',
                            items: [{
                                type: 'section',
                                htmlClass: 'col-xs-6',
                                items: [{
                                    key:"customer.expenditures[].frequency",
                                    type:"select",
                                    notitle: true
                                }]
                            },{
                                type: 'section',
                                htmlClass: 'col-xs-6',
                                items: [{
                                    key: "customer.expenditures[].annualExpenses",
                                    type:"amount",
                                    notitle: true
                                }]
                            }]
                        }]
                    }]
                }]
            },
            {
                "type":"box",
                "title":"BUSINESS_OCCUPATION_DETAILS",
                "readonly": true,
                "items":[
                    {
                        key:"customer.udf.userDefinedFieldValues.udf13",
                        type:"select"
                    },
                    {
                        type:"fieldset",
                        condition:"model.customer.udf.userDefinedFieldValues.udf13=='Business' || model.customer.udf.userDefinedFieldValues.udf13=='Employed'",
                        items:[
                            {
                                key:"customer.udf.userDefinedFieldValues.udf14",
                                type:"select"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf7"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf22"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf8"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf9"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf10"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf11"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf12"
                            },

                            {
                                key:"customer.udf.userDefinedFieldValues.udf23",
                                type:"radios"
                            },

                            {
                                key:"customer.udf.userDefinedFieldValues.udf17"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf16",
                                type:"select"
                            },

                            {
                                key:"customer.udf.userDefinedFieldValues.udf18",
                                type:"select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf19",
                                type:"radios"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf20",
                                type:"select"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf21",
                                condition:"model.customer.udf.userDefinedFieldValues.udf20=='OTHERS'"
                            }
                        ]
                    },
                    {
                        type:"fieldset",
                        condition:"model.customer.udf.userDefinedFieldValues.udf13=='Agriculture'",
                        title:"AGRICULTURE_DETAILS",
                        items:[
                            {
                                key:"customer.udf.userDefinedFieldValues.udf24",
                                type:"select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf25",
                                type:"select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf15"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf26"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf27",
                                type:"select"

                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf28"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "box",
                "title": "T_ASSETS",
                "readonly": true,
                "items": [{
                    key: "customer.physicalAssets",
                    type: "array",
                    items: [
                        {
                            key:"customer.physicalAssets[].ownedAssetDetails",
                            type:"select"

                        },
                        "customer.physicalAssets[].numberOfOwnedAsset",
                        {
                            key:"customer.physicalAssets[].ownedAssetValue",
                        }
                    ]
                },
                {
                    key: "customer.financialAssets",
                    title:"FINANCIAL_ASSETS",
                    type: "array",
                    items: [
                        {
                            key:"customer.financialAssets[].instrumentType",
                            type:"select"
                        },
                        "customer.financialAssets[].nameOfInstitution",
                        {
                            key:"customer.financialAssets[].instituteType",
                            type:"select"
                        },
                        {
                            key: "customer.financialAssets[].amountInPaisa",
                            type: "amount"
                        },
                        {
                            key:"customer.financialAssets[].frequencyOfDeposite",
                            type:"select"
                        },
                        {
                            key:"customer.financialAssets[].startDate",
                            type:"date"
                        },
                        {
                            key:"customer.financialAssets[].maturityDate",
                            type:"date"
                        }
                    ]
                }]
            },
            {
                type:"box",
                title:"T_LIABILITIES",
                "readonly": true,
                items:[
                    {
                        key:"customer.liabilities",
                        type:"array",
                        title:"FINANCIAL_LIABILITIES",
                        items:[
                            {
                                key:"customer.liabilities[].loanType",
                                type:"select"
                            },
                            {
                                key:"customer.liabilities[].loanSource",
                                type:"select"
                            },
                            "customer.liabilities[].instituteName",
                            {
                                key: "customer.liabilities[].loanAmountInPaisa",
                                type: "amount"
                            },
                            {
                                key: "customer.liabilities[].installmentAmountInPaisa",
                                type: "amount"
                            },
                            {
                                key: "customer.liabilities[].startDate",
                                type:"date"
                            },
                            {
                                key:"customer.liabilities[].maturityDate",
                                type:"date"
                            },
                            {
                                key:"customer.liabilities[].frequencyOfInstallment",
                                type:"select"
                            },
                            {
                                key:"customer.liabilities[].liabilityLoanPurpose",
                                type:"select"
                            }

                        ]
                    }
                ]
            },
            {
                "type": "box",
                "title": "T_HOUSE_VERIFICATION",
                "items": [
                    //{
                    //    "key": "customer.firstName",
                    //    "title": "CUSTOMER_NAME",
                    //    "readonly": true
                    //},
                    //{
                    //    key:"customer.nameInLocalLanguage"
                    //},
                    //{
                    //    key:"customer.addressInLocalLanguage",
                    //    type:"textarea"
                    //},


                    //{
                    //    key:"customer.caste",
                    //    type:"select"
                    //},
                    //{
                    //    key:"customer.language",
                    //    type:"select"
                    //},
                    {
                        type:"fieldset",
                        title:"HOUSE_DETAILS",
                        readonly: true,
                        items:[
                            {
                                key:"customer.ownership",
                                type:"select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf29", // customer.inCurrentAddressSince
                                type: "select"
                            },
                            {
                                key:"customer.udf.userDefinedFieldValues.udf30", // customer.inCurrentAreaSince
                                type:"select"
                            }
                        ]
                    },
                    {
                        readonly: true,
                       "key": "customer.latitude",
                       "title": "HOUSE_LOCATION",
                       "type": "geotag",
                       "latitude": "customer.latitude",
                       "longitude": "customer.longitude"
                    },
                    {
                        key: "customer.nameOfRo",
                        readonly: true
                    },
                    {
                        readonly: true,
                        key:"customer.houseVerificationPhoto",
                        type:"file",
                        fileType:"image/*"
                    },
                    {
                        readonly: true,
                        key: "customer.date",
                        type:"date"
                    },
                    {
                        readonly: true,
                        "key": "customer.place"
                    }
                ]
            },
            {
                type: "box",
                title: "CUSTOMER_BANK_ACCOUNTS",
                items: [
                    {
                        key: "customer.customerBankAccounts",
                        type: "array",
                        title: "BANK_ACCOUNTS",
                        startEmpty: true,
                        items: [
                            {
                                key: "customer.customerBankAccounts[].ifscCode",
                                type: "lov",
                                lovonly: true,
                                inputMap: {
                                    "ifscCode": {
                                        "key": "customer.customerBankAccounts[].ifscCode"
                                    },
                                    "bankName": {
                                        "key": "customer.customerBankAccounts[].customerBankName"
                                    },
                                    "branchName": {
                                        "key": "customer.customerBankAccounts[].customerBankBranchName"
                                    }
                                },
                                outputMap: {
                                    "bankName": "customer.customerBankAccounts[arrayIndex].customerBankName",
                                    "branchName": "customer.customerBankAccounts[arrayIndex].customerBankBranchName",
                                    "ifscCode": "customer.customerBankAccounts[arrayIndex].ifscCode"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form) {
                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                    var promise = CustomerBankBranch.search({
                                        'bankName': inputModel.bankName,
                                        'ifscCode': inputModel.ifscCode,
                                        'branchName': inputModel.branchName
                                    }).$promise;
                                    return promise;
                                },
                                getListDisplayItem: function(data, index) {
                                    return [
                                        data.ifscCode,
                                        data.branchName,
                                        data.bankName
                                    ];
                                }
                            },
                            {
                                key: "customer.customerBankAccounts[].customerBankName",
                                readonly: true
                            },
                            {
                                key: "customer.customerBankAccounts[].customerBankBranchName",
                                readonly: true
                            },
                            {
                                key: "customer.customerBankAccounts[].customerName"
                            },
                            {
                                key: "customer.customerBankAccounts[].accountNumber"
                            },
                            {
                                key: "customer.customerBankAccounts[].accountType",
                                type: "select"
                            },
                            {
                                key: "customer.customerBankAccounts[].isDisbersementAccount",
                                type: "radios",
                                titleMap: [{
                                    value: true,
                                    name: "Yes"
                                },{
                                    value: false,
                                    name: "No"
                                }]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "actionbox",
                "readonly": true,
                "items": [{
                    "type": "submit",
                    "title": "SUBMIT"
                }]
            }
        ],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                Utils.confirm("Update - Are You Sure?", "Customer Profile").then(function() {
                    PageHelper.showLoader();
                    irfProgressMessage.pop('PROFILE', 'Working...');
                    model.enrollmentAction = "PROCEED";
                    $log.info(model);
                    var reqData = _.cloneDeep(model);
                    Enrollment.updateEnrollment(reqData, function (res, headers) {
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('PROFILE', 'Done. Customer Updated, ID : ' + res.customer.id, 2000);
                    }, function (res, headers) {
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('PROFILE', 'Oops. Some error.', 2000);
                        window.scrollTo(0, 0);
                        PageHelper.showErrors(res);
                    })

                });
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("customer360.BusinessProfile"),
["$log", "Enrollment", "EnrollmentHelper", "SessionStore", "formHelper", "$q", "irfProgressMessage",
"PageHelper", "Utils", "BiometricService", "PagesDefinition", "$stateParams", "$timeout", "Queries", "CustomerBankBranch",
function($log, Enrollment, EnrollmentHelper, SessionStore, formHelper, $q, irfProgressMessage,
    PageHelper, Utils, BiometricService, PagesDefinition, $stateParams, $timeout, Queries, CustomerBankBranch){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "ENTITY_ENROLLMENT",
        "subTitle": "BUSINESS",
        initialize: function (model, form, formCtrl) {
            var self = this;
            var init = function() {
                var deferred = $q.defer();
                model.customer = model.customer || {};
                model.branchId = SessionStore.getBranchId() + '';
                model.customer.kgfsName = SessionStore.getBranch();
                model.customer.customerType = "Enterprise";

                if (model.customer.id) {
                    deferred.resolve();
                } else if ($stateParams.pageId) {
                    PageHelper.showLoader();
                    Enrollment.get({id: $stateParams.pageId}).$promise.then(function(response){
                        model.customer = response;
                        deferred.resolve();
                    }, function(errorResponse){
                        PageHelper.showErrors(errorResponse);
                    }).finally(function(){
                        PageHelper.hideLoader();
                    });
                }
                return deferred.promise;
            };
            self.form = [];
            init().finally(function() {
                PagesDefinition.setReadOnlyByRole("Page/Engine/customer360.BusinessProfile", self.formSource).then(function(form){
                    self.form = form;
                });
                if (model.customer.enterpriseCustomerRelations && model.customer.enterpriseCustomerRelations.length) {
                    var linkedIds = [];
                    for (var i = 0; i < model.customer.enterpriseCustomerRelations.length; i++) {
                        linkedIds.push(model.customer.enterpriseCustomerRelations[i].linkedToCustomerId);
                    };
                    $log.debug(linkedIds);
                    Queries.getCustomerBasicDetails({"ids":linkedIds}).then(function(result) {
                        if (result && result.ids) {
                            for (var i = 0; i < model.customer.enterpriseCustomerRelations.length; i++) {
                                var cust = result.ids[model.customer.enterpriseCustomerRelations[i].linkedToCustomerId];
                                if (cust) {
                                    model.customer.enterpriseCustomerRelations[i].linkedToCustomerName = cust.first_name;
                                }
                            }
                        }
                    });
                }
            });
        },
        form: [],
        formSource: [
            {
                "type": "box",
                "title": "ENTITY_INFORMATION",
                "readonly": true,
                "items": [
                    {
                        key: "customer.kgfsName",
                        title:"BRANCH_NAME",
                        type: "select"
                    },
                    {
                        key: "customer.id",
                        condition: "model.customer.id",
                        title:"ENTITY_ID",
                        readonly: true
                    },
                    {
                        key: "customer.urnNo",
                        condition: "model.customer.urnNo",
                        title:"URN_NO",
                        readonly: true
                    },
                    {
                        key:"customer.centreId",
                        type:"select",
                        filter: {
                            "parentCode": "model.branchId"
                        },
                        parentEnumCode:"branch"
                    },
                    {
                        key: "customer.oldCustomerId",
                        title:"ENTITY_ID",
                        titleExpr:"('ENTITY_ID'|translate)+' (Artoo)'",
                        condition: "model.customer.oldCustomerId",
                        readonly: true
                    },
                    {
                        key: "customer.firstName",
                        title:"ENTITY_NAME"
                    },
                    {
                        key: "customer.enterprise.referredBy",
                        title:"REFERRED_BY",
                        type: "select",
                        enumCode: "referredBy"
                    },
                    {
                        key: "customer.enterprise.referredName",
                        title:"REFERRED_NAME"
                    },/*
                    {
                        key: "customer.enterprise.businessName",
                        title:"COMPANY_NAME"
                    },*/
                    { /*TODO Not working when this is enabled */
                       key: "customer.enterprise.companyOperatingSince",
                       title:"OPERATING_SINCE",
                       type: "date"
                    },
                    {
                        "key": "customer.latitude",
                        "title": "BUSINESS_LOCATION",
                        "type": "geotag",
                        "latitude": "customer.latitude",
                        "longitude": "customer.longitude"
                    },
                    {
                        key: "customer.enterprise.ownership",
                        title: "OWNERSHIP",
                        type: "select",
                        enumCode: "ownership"
                    },
                    {
                        key: "customer.enterprise.businessConstitution",
                        title: "CONSTITUTION",
                        type: "select",
                        enumCode: "constitution"
                    },
                    {
                        key: "customer.enterprise.companyRegistered",
                        type: "radios",
                        titleMap: {
                            "YES": "Yes",
                            "NO": "No"
                        },
                        title: "IS_REGISTERED"
                    },
                    {
                        key: "customer.enterprise.registrationType",
                        condition: "model.customer.enterprise.companyRegistered === 'YES'",
                        title: "REGISTRATION_TYPE",
                        type: "select",
                        enumCode: "business_registration_type"
                    },
                    {
                        key: "customer.enterprise.registrationNumber",
                        condition: "model.customer.enterprise.companyRegistered === 'YES'",
                        title: "REGISTRATION_NUMBER"
                    },
                    {
                        key: "customer.enterprise.registrationDate",
                        condition: "model.customer.enterprise.companyRegistered === 'YES'",
                        type: "date",
                        title: "REGISTRATION_DATE"
                    },
                    {
                        key: "customer.enterprise.businessType",
                        title: "BUSINESS_TYPE",
                        type: "select",
                        enumCode: "businessType",
                        readonly: true
                    },
                    {
                        key: "customer.enterprise.businessLine",
                        title: "BUSINESS_LINE",
                        type: "select",
                        enumCode: "businessLine",
                        readonly: true
                    },
                    {
                        key: "customer.enterprise.businessSector",
                        title: "BUSINESS_SECTOR",
                        type: "select",
                        enumCode: "businessSector",
                        readonly: true
                    },
                    {
                        key: "customer.enterprise.businessSubsector",
                        title: "BUSINESS_SUBSECTOR",
                        type: "select",
                        enumCode: "businessSubSector",
                        readonly: true
                    },
                    {
                        key: "customer.enterpriseCustomerRelations",
                        type: "array",
                        title: "RELATIONSHIP_TO_BUSINESS",
                        items: [
                            {
                                key: "customer.enterpriseCustomerRelations[].relationshipType",
                                title: "RELATIONSHIP_TYPE",
                                type: "select",
                                enumCode: "relationship_type"
                            },
                            {
                                key: "customer.enterpriseCustomerRelations[].linkedToCustomerId",
                                type: "lov",
                                title: "CUSTOMER_ID",
                                inputMap: {
                                    "firstName": {
                                        "key": "customer.firstName",
                                        "title": "CUSTOMER_NAME"
                                    },
                                    "branchName": {
                                        "key": "customer.kgfsName",
                                        "type": "select"
                                    },
                                    "centreCode": {
                                        "key": "customer.centreCode",
                                        "type": "select"
                                    }
                                },
                                outputMap: {
                                    "id": "customer.enterpriseCustomerRelations[arrayIndex].linkedToCustomerId",
                                    "firstName": "customer.enterpriseCustomerRelations[arrayIndex].linkedToCustomerName"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                    $log.info("inputModel.centreCode: " + inputModel.centreCode);
                                    if (!inputModel.branchName)
                                        inputModel.branchName = SessionStore.getBranch();
                                    var promise = Enrollment.search({
                                        'branchName': inputModel.branchName,
                                        'firstName': inputModel.firstName,
                                        'centreCode': inputModel.centreCode,
                                        'customerType': 'Individual'
                                    }).$promise;
                                    return promise;
                                },
                                getListDisplayItem: function(data, index) {
                                    return [
                                        [data.firstName, data.fatherFirstName].join(' '),
                                        data.id
                                    ];
                                }
                            },
                            {
                                key: "customer.enterpriseCustomerRelations[].linkedToCustomerName",
                                readonly: true,
                                title: "CUSTOMER_NAME"
                            }
                        ]
                    },
                    {
                        key: "customer.enterpriseRegistrations",
                        type: "array",
                        title: "ADDITIONAL_REGISTRATION",
                        condition: "model.customer.enterprise.companyRegistered === 'YES'",
                        startEmpty: true,
                        items: [
                            {
                                key: "customer.enterpriseRegistrations[].registrationType",
                                title: "REGISTRATION_TYPE",
                                type: "select",
                                enumCode: "business_registration_type"
                            },
                            {
                                key: "customer.enterpriseRegistrations[].registrationNumber",
                               title: "REGISTRATION_NUMBER"
                            },
                            {
                                key: "customer.enterpriseRegistrations[].registeredDate",
                                type: "date",
                                title: "REGISTRATION_DATE"
                            },
                        ]
                    }
                ]
            },
            {
                "type": "box",
                "title": "CONTACT_INFORMATION",
                "readonly": true,
                "items":[
                    "customer.mobilePhone",
                    "customer.landLineNo",
                    "customer.doorNo",
                    "customer.street",
                    "customer.enterprise.landmark",
                    {
                        key: "customer.pincode",
                        type: "lov",
                        fieldType: "number",
                        autolov: true,
                        inputMap: {
                            "pincode": "customer.pincode",
                            "district": {
                                key: "customer.district"
                            },
                            "state": {
                                key: "customer.state"
                            }
                        },
                        outputMap: {
                            "division": "customer.locality",
                            "region": "customer.villageName",
                            "pincode": "customer.pincode",
                            "district": "customer.district",
                            "state": "customer.state"
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form, model) {
                            if (!inputModel.pincode) {
                                return $q.reject();
                            }
                            return Queries.searchPincodes(inputModel.pincode, inputModel.district, inputModel.state);
                        },
                        getListDisplayItem: function(item, index) {
                            return [
                                item.division + ', ' + item.region,
                                item.pincode,
                                item.district + ', ' + item.state
                            ];
                        }
                    },
                    "customer.locality",
                    "customer.villageName",
                    "customer.district",
                    "customer.state",
                    {
                       key: "customer.udf.userDefinedFieldValues.udf31", // customer.enterprise.businessInPresentAreaSince
                       type: "select"
                    },
                    {
                        key: "customer.udf.userDefinedFieldValues.udf32", // customer.enterprise.businessInCurrentAddressSince
                        type: "select"
                    }
                ]
            },
            {
                type: "box",
                title: "CUSTOMER_BANK_ACCOUNTS",
                items: [
                    {
                        key: "customer.customerBankAccounts",
                        type: "array",
                        title: "BANK_ACCOUNTS",
                        startEmpty: true,
                        items: [
                            {
                                key: "customer.customerBankAccounts[].ifscCode",
                                type: "lov",
                                lovonly: true,
                                inputMap: {
                                    "ifscCode": {
                                        "key": "customer.customerBankAccounts[].ifscCode"
                                    },
                                    "bankName": {
                                        "key": "customer.customerBankAccounts[].customerBankName"
                                    },
                                    "branchName": {
                                        "key": "customer.customerBankAccounts[].customerBankBranchName"
                                    }
                                },
                                outputMap: {
                                    "bankName": "customer.customerBankAccounts[arrayIndex].customerBankName",
                                    "branchName": "customer.customerBankAccounts[arrayIndex].customerBankBranchName",
                                    "ifscCode": "customer.customerBankAccounts[arrayIndex].ifscCode"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form) {
                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                    var promise = CustomerBankBranch.search({
                                        'bankName': inputModel.bankName,
                                        'ifscCode': inputModel.ifscCode,
                                        'branchName': inputModel.branchName
                                    }).$promise;
                                    return promise;
                                },
                                getListDisplayItem: function(data, index) {
                                    return [
                                        data.ifscCode,
                                        data.branchName,
                                        data.bankName
                                    ];
                                }
                            },
                            {
                                key: "customer.customerBankAccounts[].customerBankName",
                                readonly: true
                            },
                            {
                                key: "customer.customerBankAccounts[].customerBankBranchName",
                                readonly: true
                            },
                            {
                                key: "customer.customerBankAccounts[].customerNameAsInBank"
                            },
                            {
                                key: "customer.customerBankAccounts[].accountNumber"
                            },
                            {
                                key: "customer.customerBankAccounts[].accountType",
                                type: "select"
                            },
                            {
                                key: "customer.customerBankAccounts[].isDisbersementAccount",
                                type: "radios",
                                titleMap: [{
                                    value: true,
                                    name: "Yes"
                                },{
                                    value: false,
                                    name: "No"
                                }]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "actionbox",
                "readonly": true,
                "items": [{
                    "type": "submit",
                    "title": "SUBMIT"
                }]
            }
        ],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            preSave: function(model, form, formName) {
                var deferred = $q.defer();
                if (model.customer.firstName) {
                    deferred.resolve();
                } else {
                    irfProgressMessage.pop('enrollment-save', 'Customer Name is required', 3000);
                    deferred.reject();
                }
                return deferred.promise;
            },
            submit: function(model, form, formName){
                $log.info("Inside submit()");
                $log.warn(model);
                var sortFn = function(unordered){
                    var out = {};
                    Object.keys(unordered).sort().forEach(function(key) {
                        out[key] = unordered[key];
                    });
                    return out;
                };
                var reqData = _.cloneDeep(model);
                //EnrollmentHelper.fixData(reqData);
                Utils.confirm("Update - Are You Sure?", "Customer Profile").then(function() {
                    PageHelper.showLoader();
                    irfProgressMessage.pop('PROFILE', 'Working...');
                    reqData.enrollmentAction = "PROCEED";
                    Enrollment.updateEnrollment(reqData, function (res, headers) {
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('PROFILE', 'Done. Customer Updated, ID : ' + res.customer.id, 2000);
                    }, function (res, headers) {
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('PROFILE', 'Oops. Some error.', 2000);
                        window.scrollTo(0, 0);
                        PageHelper.showErrors(res);
                    })

                });
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("customer360.RequestRecapture"),
["$log", "$q", "Enrollment", "SessionStore", "$state", "entityManager", "formHelper",
"$stateParams", "irfProgressMessage", "PageHelper", "EnrollmentHelper",
function($log, $q, Enrollment, SessionStore, $state, entityManager, formHelper,
    $stateParams, irfProgressMessage, PageHelper, EnrollmentHelper){
    return {
        "type": "schema-form",
        "title": "REQUEST_RECAPTURE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            var ids = $stateParams.pageId.split(':');
            this.subTitle = model.requestRecaptureType = this.form[0].title = ids[1];
            var customerId = Number(ids[0]);
            if (!model || !model.customer || model.customer.id != customerId) {
                $log.info("data not there, loading...");

                PageHelper.showLoader();
                Enrollment.getCustomerById({id:customerId},function(resp,header){
                    model.customer = resp;
                    model = EnrollmentHelper.fixData(model);
                    model._mode = 'EDIT';
                    if (model.customer.currentStage==='Stage01') {
                        irfProgressMessage.pop("enrollment-save","Customer "+model.customer.id+" not enrolled yet", 5000);
                        $state.go("Page.Engine", {pageName:'ProfileInformation', pageId:customerId});
                    } else {
                        irfProgressMessage.pop("enrollment-save","Load Complete", 2000);
                    }
                    PageHelper.hideLoader();
                },function(resp){
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("enrollment-save","An Error Occurred. Failed to fetch Data", 5000);
                    $state.go("Page.Engine",{
                        pageName:"CustomerSearch",
                        pageId:null
                    });
                });
            }
            $log.info("I got initialized");
        },
        form: [{
            "type": "box",
            "title": "",
            "items": [
                {
                    key: "customer.firstName",
                    title: "FULL_NAME",
                    readonly: "true"
                },
                {
                    "key":"requestRemarks",
                    "title": "REQUEST_REMARKS",
                    "type": "textarea"
                }
            ]
        },{
            "type": "actionbox",
            // "condition": "model.requestRecaptureType === 'PHOTO'",
            "items": [{
                "type": "submit",
                "title": "REQUEST_RECAPTURE"
            }]
        }],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName) {
                $log.debug("REQUEST_TYPE: " + model.requestRecaptureType);
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("customer360.RecaptureQueue"),
	["$log", "formHelper", "Enrollment", "CreditBureau", "SessionStore", "$state", "entityManager",
	function($log, formHelper, Enrollment, CreditBureau, SessionStore, $state, entityManager){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "RECAPTURE_APPROVED_QUEUE",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model.branchName = branch;
			$log.info("RECAPTURE_APPROVED_QUEUE got initialized");
		},
		definition: {
			autoSearch: true,
			title: "RECAPTURE_APPROVED_QUEUE",
			pageName: "customer360.RecaptureQueue",
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){
				var promise = Enrollment.search({
					'branchName': searchOptions.branchName,
					'firstName': searchOptions.firstName,
					'centreCode': searchOptions.centreCode,
					'page': pageOpts.pageNo,
					'per_page': pageOpts.itemsPerPage
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 20;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				itemCallback: function(item, index) {
					$log.info(item);
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						item.firstName + " " + (item.lastName!=null?item.lastName:""),
						'Customer ID : ' + item.id,
						null
					]
				},
				getActions: function(){
					return [
						{
							name: "Capture CB check info",
							desc: "",
							fn: function(item, index) {
								$log.info(item.urnNo);
								entityManager.setModel('CBCheckCapture', {_request:item});
								$state.go("Page.Engine", {pageName:"CBCheckCapture", pageId:null});
							},
							isApplicable: function(item, index){
								return true;
							}
						}
					];
				}
			}


		}
	};
}]);

irf.pageCollection.factory(irf.page("customer360.Recapture"),
["$log", "$q", "Enrollment", "SessionStore", "$state", "entityManager", "formHelper",
"$stateParams", "irfProgressMessage", "PageHelper", "EnrollmentHelper", "BiometricService", "Files",
function($log, $q, Enrollment, SessionStore, $state, entityManager, formHelper,
    $stateParams, irfProgressMessage, PageHelper, EnrollmentHelper, BiometricService, Files){

    var submit = function(model) {
        $log.debug("REQUEST_TYPE: " + model.recaptureType);
        PageHelper.showLoader();
        irfProgressMessage.pop('RECAPTURE', 'Working...');
        model.enrollmentAction = "SAVE";
        $log.info(model);
        var reqData = _.cloneDeep(model);
        Enrollment.updateEnrollment(reqData, function (res, headers) {
            PageHelper.hideLoader();
            irfProgressMessage.pop('RECAPTURE', 'Done. Customer Updated, ID : ' + res.customer.id, 2000);
            $state.go("Page.Customer360", {
                pageId: model.customer.id
            });
        }, function (res, headers) {
            PageHelper.hideLoader();
            irfProgressMessage.pop('RECAPTURE', 'Oops. Some error.', 2000);
            $window.scrollTo(0, 0);
            PageHelper.showErrors(res);
        })
    };

    return {
        "type": "schema-form",
        "title": "RECAPTURE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            var ids = $stateParams.pageId.split(':');
            this.subTitle = model.recaptureType = this.form[0].title = ids[1];
            var customerId = Number(ids[0]);
            if (!model || !model.customer || model.customer.id != customerId) {
                $log.info("data not there, redirecting...");

                irfProgressMessage.pop("RECAPTURE","An Error Occurred. Failed to fetch Data", 5000);
                $state.go("Page.Customer360",{
                    pageId:customerId
                });
            } else {
                if (model.recaptureType === 'FINGERPRINT') {
                    /* TODO to be removed */
                    model.isFPEnrolled = function(fingerId){
                        //$log.info("Inside isFPEnrolled: " + BiometricService.getFingerTF(fingerId) + " :"  + fingerId);
                        if (model.customer[BiometricService.getFingerTF(fingerId)]!=null || (typeof(model.customer.$fingerprint)!='undefined' && typeof(model.customer.$fingerprint[fingerId])!='undefined' && model.customer.$fingerprint[fingerId].data!=null )) {
                            //$log.info("Inside isFPEnrolled: :true");
                            return "fa-check text-success";
                        }
                        //$log.info("Inside isFPEnrolled: false");
                        return "fa-close text-danger";
                    }

                    model.getFingerLabel = function(fingerId){
                        return BiometricService.getLabel(fingerId);
                    }
                }
            }
            $log.info("I got initialized");
        },
        form: [{
            "type": "box",
            "title": "",
            "items": [
                {
                    "key": "customer.firstName",
                    "title": "FULL_NAME",
                    "readonly": "true"
                },
                {
                    "key": "customer.latitude",
                    "title": "HOUSE_LOCATION",
                    "type": "geotag",
                    "latitude": "customer.latitude",
                    "longitude": "customer.longitude",
                    "condition": "model.recaptureType === 'GPS'"
                },
                {
                    "key":"customer.photoImageId",
                    "type":"file",
                    "fileType":"image/*",
                    "offline": true,
                    "condition": "model.recaptureType === 'PHOTO'"
                },
                {
                    "condition": "model.recaptureType === 'FINGERPRINT'",
                    type: "button",
                    title: "CAPTURE_FINGERPRINT",
                    notitle: true,
                    fieldHtmlClass: "btn-block",
                    onClick: function(model, form, formName){
                        var promise = BiometricService.capture(model);
                        promise.then(function(data){
                            model.customer.rightHandIndexImageId = null;
                            model.customer.rightHandMiddleImageId = null;
                            model.customer.rightHandRingImageId = null;
                            model.customer.rightHandSmallImageId = null;
                            model.customer.rightHandThumpImageId = null;
                            model.customer.leftHandIndexImageId = null;
                            model.customer.leftHandMiddleImageId = null;
                            model.customer.leftHandRingImageId = null;
                            model.customer.leftHandSmallImageId = null;
                            model.customer.leftHandThumpImageId = null;

                            model.customer.$fingerprint = data;
                        }, function(reason){
                            console.log(reason);
                        })
                    }
                },
                {
                    "condition": "model.recaptureType === 'FINGERPRINT'",
                    "type": "section",
                    "html": '<div class="row"> <div class="col-xs-6">' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftThumb\')"></i> {{ model.getFingerLabel(\'LeftThumb\') }}</span><br>' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftIndex\')"></i> {{ model.getFingerLabel(\'LeftIndex\') }}</span><br>' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftMiddle\')"></i> {{ model.getFingerLabel(\'LeftMiddle\') }}</span><br>' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftRing\')"></i> {{ model.getFingerLabel(\'LeftRing\') }}</span><br>' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'LeftLittle\')"></i> {{ model.getFingerLabel(\'LeftLittle\') }}</span><br>' +
                    '</div> <div class="col-xs-6">' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightThumb\')"></i> {{ model.getFingerLabel(\'RightThumb\') }}</span><br>' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightIndex\')"></i> {{ model.getFingerLabel(\'RightIndex\') }}</span><br>' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightMiddle\')"></i> {{ model.getFingerLabel(\'RightMiddle\') }}</span><br>' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightRing\')"></i> {{ model.getFingerLabel(\'RightRing\') }}</span><br>' +
                    '<span><i class="fa fa-fw" ng-class="model.isFPEnrolled(\'RightLittle\')"></i> {{ model.getFingerLabel(\'RightLittle\') }}</span><br>' +
                    '</div></div>'
                }
            ]
        },{
            "type": "actionbox",
            // "condition": "model.requestRecaptureType === 'PHOTO'",
            "items": [{
                "type": "submit",
                "title": "REQUEST_RECAPTURE"
            }]
        }],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName) {
                if (model.recaptureType === 'FINGERPRINT') {
                    PageHelper.showLoader();
                    var out = model.customer.$fingerprint;
                    var fpPromisesArr = [];
                    for (var key in out) {
                        if (out.hasOwnProperty(key) && out[key].data!=null) {
                            (function(obj){
                                var promise = Files.uploadBase64({file: obj.data, type: 'CustomerEnrollment', subType: 'FINGERPRINT', extn:'iso'}, {}).$promise;
                                promise.then(function(data){
                                    model.customer[obj.table_field] = data.fileId;
                                    delete model.customer.$fingerprint[obj.fingerId];
                                });
                                fpPromisesArr.push(promise);
                            })(out[key]);
                        } else {
                            if (out[key].data == null){
                                delete out[key];
                            }
                        }
                    }
                    $q.all(fpPromisesArr).then(function(){
                        submit(model);
                    });
                } else {
                    submit(model);
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page('customer360.loans.View'),
    ["$log", "formHelper", "LoanAccount", "$state", "SessionStore", "LoanAccount", "$stateParams",
        function($log, formHelper, LoanAccount, $state, SessionStore, LoanAccount, $stateParams){
            return {
                "type": "search-list",
                "title": "VIEW_LOANS",
                "subTitle": "VIEW_LOANS_SUB",
                initialize: function (model, form, formCtrl) {
                    $log.info("ViewLoans initialiized");
                },
                offline: false,
                definition: {
                    title: "Loans",
                    autoSearch:true,
                    searchForm: [
                        //"*"
                    ],
                    searchSchema: {
                        "type": 'object',
                        "title": 'SearchOptions',
                        "properties": {
                            "show_closed": {
                                "title": "SHOW_CLOSED_LOANS",
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "required":["branch"]
                    },
                    getSearchFormHelper: function() {
                        return formHelper;
                    },
                    getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                        var promise = LoanAccount.viewLoans({urn: $stateParams.pageId}).$promise;
                        //var urnNo = $stateParams.pageId;
                        return promise;
                    },
                    paginationOptions: {
                        "viewMode": "page",
                        "getItemsPerPage": function(response, headers){
                            return 20;
                        },
                        "getTotalItemsCount": function(response, headers){
                            return response.length;
                        }
                    },
                    listOptions: {
                        itemCallback: function(item, index) {

                        },
                        getItems: function(response, headers){
                            if (response!=null && response.length && response.length!=0){
                                //var arrLength = response.length;
                                //for (var i=0; i<arrLength; i++){
                                //    if (!_.isNull(response[i]) && _.isObject(response[i])){
                                //        _.remove()
                                //    }
                                //}
                                _.pullAll(response, [null]);
                                return response;
                            }
                            return [];
                        },
                        getListItem: function(item){
                            return [
                                item.accountNumber,
                                'Type: ' + item.loanType + ', Partner: ' + item.partner + ', Product: ' + item.productCode,
                                'Application Status: ' + item.applicationStatus
                            ]
                        },
                        getActions: function(){
                            return [
                                {
                                    name: "View Details",
                                    desc: "",
                                    fn: function(item, index){
                                        $state.go('Page.Engine', {
                                            pageName: 'customer360.loans.LoanDetails',
                                            pageId: item.accountId
                                        })
                                    },
                                    isApplicable: function(item, index){
                                        if (item.accountNumber){
                                        	return true;
                                        }
                                        return false;
                                    }
                                },
                                {
                                    name: "Repay",
                                    desc: "",
                                    fn: function(item, index){
                                        $state.go('Page.Engine', {
                                            pageName: 'loans.LoanRepay',
                                            pageId: [item.accountNumber,item.urnNo].join(".")
                                        })
                                    },
                                    isApplicable: function(item, index){
                                        return true;
                                    }
                                }
                            ];
                        }
                    }
                }
            };
        }]);

irf.pageCollection.factory(irf.page("customer360.loans.LoanDetails"), ["$log", "SessionStore", "LoanAccount", "$state", "$stateParams", "SchemaResource", "PageHelper", "Enrollment", "formHelper", "IndividualLoan", "Utils", "$filter", "$q", "irfProgressMessage", "Queries", "Files", "LoanBookingCommons",
    function($log, SessionStore, LoanAccount, $state, $stateParams, SchemaResource, PageHelper, Enrollment, formHelper, IndividualLoan, Utils, $filter, $q, irfProgressMessage, Queries, Files, LoanBookingCommons) {

        return {
            "type": "schema-form",
            "title": "Loan Details",
            "subTitle": "",
            initialize: function(model, form, formCtrl) {
                var loanAccountId = $stateParams.pageId;
                model.loanAccount = model.loanAccount || [];
                model.loanDocuments = model.loanDocuments || {};
                model.loanDocuments.existingDocuments = model.loanDocuments.existingDocuments || [];
                model.loanDocuments = model.loanDocuments || {};
                model.loanDocuments.newLoanDocuments = model.loanDocuments.newLoanDocuments || [];
                model.reqData = model.reqData || {};
                model.reqData.loanAccount = model.reqData.loanAccount || {};
                model.reqData.loanAccount.loanDocuments = model.reqData.loanAccount.loanDocuments || [];
                PageHelper.showLoader();
                IndividualLoan.get({
                        id: loanAccountId
                    })
                    .$promise
                    .then(function(res) {
                        model.loanAccount = res;

                        if (_.hasIn(model.loanAccount, 'accountNumber') && !_.isNull(model.loanAccount.accountNumber)) {
                            LoanAccount.get({
                                    accountId: model.loanAccount.accountNumber
                                })
                                .$promise
                                .then(
                                    function(res) {
                                        model.encoreLoan = res;

                                        for (var i = 0; i < model.encoreLoan.transactions.length; i++) {
                                            model.encoreLoan.transactions[i].transactionDate = Utils.convertJSONTimestampToDate(model.encoreLoan.transactions[i].transactionDate);
                                        }
                                        for (var i = 0; i < model.encoreLoan.repaymentSchedule.length; i++) {
                                            model.encoreLoan.repaymentSchedule[i].valueDate = Utils.convertJSONTimestampToDate(model.encoreLoan.repaymentSchedule[i].valueDate);
                                        }
                                        var loanDocuments = model.loanAccount.loanDocuments;
                                        var availableDocCodes = [];
                                        LoanBookingCommons.getDocsForProduct(model.encoreLoan.productCode, "LoanBooking", "DocumentUpload").then(function(docsForProduct) {
                                        $log.info(docsForProduct);
                                        for (var i = 0; i < loanDocuments.length; i++) {
                                            availableDocCodes.push(loanDocuments[i].document);
                                            var documentObj = LoanBookingCommons.getDocumentDetails(docsForProduct, loanDocuments[i].document);
                                            if (documentObj != null) {
                                                loanDocuments[i].document = documentObj.document_name;
                                            } else {
                                                loanDocuments[i].document = "DOCUMENT_TITLE_NOT_MAINTAINED";
                                            }
                                        }
                                        PageHelper.hideLoader();
                                        },
                                        function(httpRes) {
                                            PageHelper.hideLoader();
                                        });
                                    },
                                    function(httpRes) {
                                        PageHelper.showErrors(httpRes);
                                    }

                                )
                                .finally(function() {
                                    PageHelper.hideLoader();
                                })
                        }
                        
                        if (model.loanAccount.loanDocuments) {
                            for (var i = 0; i < model.loanAccount.loanDocuments.length; i++) {

                                model.loanDocuments.existingDocuments.push(model.loanAccount.loanDocuments[i]);
                            }
                        }
                    })

            },
            form: [{
                "type": "box",
                "title": "LOAN_DETAILS",
                "colClass": "col-sm-6",
                "readonly": true,
                "items": [{
                    "type": "fieldset",
                    "title": "BRANCH_DETAILS",
                    "items": [{
                        key: "loanAccount.loanCentre.centreId",
                        title: "CENTRE_NAME",
                        "type": "select",
                        enumCode: "centre"
                    }, {
                        "key": "loanAccount.partnerCode",
                        "title": "PARTNER",
                        "type": "select"
                    }]
                }, {
                    "type": "fieldset",
                    "title": "PRODUCT_DETAILS",
                    "items": [{
                        "key": "loanAccount.id",
                        "title": "LOAN_ID",
                        "condition": "model.loanAccount.id",
                        "readonly": true
                    }, {
                        "key": "loanAccount.productCode",
                        "title": "PRODUCT",
                        "type": "select"
                    }, {
                        "key": "loanAccount.tenure",
                        "title": "DURATION_IN_MONTHS"
                    }, {
                        "key": "loanAccount.frequency",
                        "type": "select"
                    }]
                }, {
                    "type": "fieldset",
                    "title": "ENTITY_DETAILS",
                    "items": [{
                        "key": "loanAccount.urnNo",
                        "title": "URN_NO",
                        "type": "lov",
                        "lovonly": true,
                        "inputMap": {
                            "customerType": {
                                "key": "customer.customerType",
                                "title": "CUSTOMER_TYPE",
                                "type": "select",
                                "titleMap": {
                                    "Individual": "Individual",
                                    "Enterprise": "Enterprise"
                                }
                            },
                            "customerId": {
                                "key": "customer.customerId",
                                "title": "CUSTOMER_ID"
                            },
                            "firstName": {
                                "key": "customer.firstName",
                                "title": "CUSTOMER_NAME"
                            },
                            "branch": {
                                "key": "customer.branch",
                                "type": "select",
                                "screenFilter": true
                            },
                            "centreCode": {
                                "key": "customer.centreCode",
                                "type": "select",
                                "screenFilter": true
                            }
                        },
                        "outputMap": {
                            "id": "loanAccount.customerId",
                            "urnNo": "loanAccount.urnNo",
                            "firstName": "customer.firstName",

                        },
                        "searchHelper": formHelper,
                        initialize: function(inputModel) {
                            $log.warn('in pincode initialize');
                            $log.info(inputModel);
                        },
                        "search": function(inputModel, form, model) {
                            $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                            var promise = Enrollment.search({
                                'customerId': inputModel.customerId,
                                'branchName': inputModel.branch || SessionStore.getBranch(),
                                'firstName': inputModel.firstName,
                                'centreCode': inputModel.centreCode,
                                'customerType': inputModel.customerType,
                                'stage': "Completed"
                            }).$promise;
                            return promise;
                        },
                        getListDisplayItem: function(data, index) {
                            return [
                                data.firstName,
                                data.id,
                                data.urnNo
                            ];
                        },
                        onSelect: function(result, model, context) {
                            $log.info(result);
                            var promise = Queries.getCustomerBankAccounts(
                                result.id
                            ).then(function(response) {
                                if (response && response.body && response.body.length) {
                                    for (var i = response.body.length - 1; i >= 0; i--) {
                                        if (response.body[i].is_disbersement_account == 1) {
                                            model.loanAccount.customerBankAccountNumber = response.body[i].account_number;
                                            model.loanAccount.customerBankIfscCode = response.body[i].ifsc_code;
                                            model.loanAccount.customerBank = response.body[i].customer_bank_name;
                                            model.loanAccount.customerBranch = response.body[i].customer_bank_branch_name;
                                            break;
                                        }
                                    }
                                }
                            });
                        }
                    }, {
                        "key": "loanAccount.customerId",
                        "title": "ENTITY_ID",
                        "readonly": true
                    }, {
                        "key": "customer.firstName",
                        "title": "ENTITY_NAME",
                        "readonly": true
                    }, {
                        "key": "loanAccount.applicant",
                        "title": "APPLICANT_URN_NO",
                        "type": "lov",
                        "lovonly": true,
                        "inputMap": {
                            "customerId": {
                                "key": "customer.customerId",
                                "title": "CUSTOMER_ID"
                            },
                            "firstName": {
                                "key": "customer.firstName",
                                "title": "CUSTOMER_NAME"
                            },
                            "branch": {
                                "key": "customer.branch",
                                "type": "select",
                                "screenFilter": true
                            },
                            "centreCode": {
                                "key": "customer.centreCode",
                                "type": "select",
                                "screenFilter": true
                            }
                        },
                        "outputMap": {
                            "urnNo": "loanAccount.applicant",
                            "firstName": "customer.applicantName"
                        },
                        "searchHelper": formHelper,
                        "search": function(inputModel, form) {
                            $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                            var promise = Enrollment.search({
                                'customerId': inputModel.customerId,
                                'branchName': inputModel.branch || SessionStore.getBranch(),
                                'firstName': inputModel.firstName,
                                'centreCode': inputModel.centreCode,
                                'customerType': "individual",
                                'stage': "Completed"
                            }).$promise;
                            return promise;
                        },
                        getListDisplayItem: function(data, index) {
                            return [
                                [data.firstName, data.fatherFirstName].join(' | '),
                                data.id,
                                data.urnNo
                            ];
                        }
                    }, {
                        "key": "customer.applicantName",
                        "title": "APPLICANT_NAME",
                        "readonly": true
                    }, {
                        "key": "loanAccount.coBorrowerUrnNo",
                        "title": "CO_APPLICANT_URN_NO",
                        "type": "lov",
                        "lovonly": true,
                        "inputMap": {
                            "customerId": {
                                "key": "customer.customerId",
                                "title": "CUSTOMER_ID"
                            },
                            "firstName": {
                                "key": "customer.firstName",
                                "title": "CUSTOMER_NAME"
                            },
                            "branch": {
                                "key": "customer.branch",
                                "type": "select",
                                "screenFilter": true
                            },
                            "centreCode": {
                                "key": "customer.centreCode",
                                "type": "select",
                                "screenFilter": true
                            }
                        },
                        "outputMap": {
                            "urnNo": "loanAccount.coBorrowerUrnNo",
                            "firstName": "customer.coBorrowerName"
                        },
                        "searchHelper": formHelper,
                        "search": function(inputModel, form) {
                            $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                            var promise = Enrollment.search({
                                'customerId': inputModel.customerId,
                                'branchName': inputModel.branch || SessionStore.getBranch(),
                                'firstName': inputModel.firstName,
                                'centreCode': inputModel.centreCode,
                                'customerType': "individual",
                                'stage': "Completed"
                            }).$promise;
                            return promise;
                        },
                        getListDisplayItem: function(data, index) {
                            return [
                                [data.firstName, data.fatherFirstName].join(' | '),
                                data.id,
                                data.urnNo
                            ];
                        }
                    }, {
                        "key": "customer.coBorrowerName",
                        "title": "COAPPLICANT_NAME",
                        "readonly": true
                    }]
                }, {
                    "type": "fieldset",
                    "title": "Account Details",
                    "items": [{
                            "key": "loanAccount.loanAmountRequested",
                            "type": "amount",
                            "title": "LOAN_AMOUNT_REQUESTED",
                            "onChange": function(value, form, model) {
                                model.loanAccount.insuranceFee = 0.004 * value;
                                getSanctionedAmount(model);
                            }
                        }, {
                            key: "loanAccount.insuranceFee",
                            type: "amount",
                            onChange: function(value, form, model) {
                                getSanctionedAmount(model);
                            }
                        }, {
                            key: "loanAccount.commercialCibilCharge",
                            type: "amount",
                            onChange: function(value, form, model) {
                                getSanctionedAmount(model);
                            }
                        }, {
                            key: "loanAccount.securityEmi",
                            type: "amount",
                            onChange: function(value, form, model) {
                                getSanctionedAmount(model);
                            }
                        }, {
                            key: "loanAccount.processingFeeInPaisa",
                            type: "amount"
                        }, {
                            key: "loanAccount.otherFee",
                            type: "amount"
                        }, {
                            "key": "additional.loanAmount",
                            "type": "amount",
                            "title": "NET_DISBURSEMENT_AMOUNT"
                        }, {
                            "key": "loanAccount.interestRate",
                            "type": "number"
                        }, {
                            "key": "loanAccount.loanApplicationDate",
                            "title": "LOAN_APPLICATION_DATE",
                            "type": "date"
                        }, {
                            "key": "loanAccount.loanPurpose1",
                            "title": "LOAN_PURPOSE",
                            "type": "select"
                        }
                        /*,
                                                             {
                                                             "key": "loanAccount.loanPurpose2",
                                                             "title": "LOAN_PURPOSE_2",
                                                             "type":"select",
                                                             "filter":{
                                                             "parentCode as loan_purpose_1":"model.loanAccount.loanPurpose1"
                                                             }
                                                             },
                                                             {
                                                             "key": "loanAccount.loanPurpose3",
                                                             "title": "LOAN_PURPOSE_3",
                                                             "type":"select",
                                                             "filter":{
                                                             "parentCode as loan_purpose_2":"model.loanAccount.loanPurpose2"
                                                             }
                                                             }*/
                    ]
                }]
            }, {
                "type": "box",
                "title": "TRANSACTIONS",
                "readonly": true,
                "items": [{
                    "type": "array",
                    "title": "Disbursement Details",
                    "titleExpr": "'Transaction on ' + model.encoreLoan.transactions[arrayIndex].transactionDate",
                    "key": "encoreLoan.transactions",
                    "items": [{
                        "key": "encoreLoan.accountId",
                        "type": "string"
                    }, {
                        "key": "encoreLoan.transactions[].transactionDate",
                        "type": "date"
                    }, {
                        "key": "encoreLoan.transactions[].valueDate",
                        "type": "date"
                    }, {
                        "key": "encoreLoan.transactions[].amount1",
                        "type": "string"
                    }, {
                        "key": "encoreLoan.transactions[].part1",
                        "type": "string"
                    }, {
                        "key": "encoreLoan.transactions[].part2",
                        "type": "string"
                    }, {
                        "key": "encoreLoan.transactions[].part3",
                        "type": "string"
                    }, {
                        "key": "encoreLoan.transactions[].transactionId",
                        "type": "string"
                    }]
                }]
            }, {
                "type": "box",
                "title": "REPAYMENT_SCHEDULE",
                "readonly": true,
                "items": [{
                    "type": "array",
                    "titleExpr": "'Date : ' + model.encoreLoan.repaymentSchedule[arrayIndex].valueDate",
                    "key": "encoreLoan.repaymentSchedule",
                    "items": [{
                        "key": "encoreLoan.repaymentSchedule[].transactionDate",
                        "type": "date"
                    }, {
                        "key": "encoreLoan.repaymentSchedule[].amount1",
                        "type": "string"
                    }, {
                        "key": "encoreLoan.repaymentSchedule[].amount2",
                        "type": "string"
                    }, {
                        "key": "encoreLoan.repaymentSchedule[].valueDate",
                        "type": "date"
                    }, {
                        "key": "encoreLoan.repaymentSchedule[].transactionId",
                        "type": "string"
                    }, {
                        "key": "encoreLoan.repaymentSchedule[].status",
                        "type": "string"
                    }]
                }]
            }, {
                "type": "box",
                "title": "DISBURSEMENT_DETAILS",
                readonly: true,
                "items": [{
                    "type": "fieldset",
                    "title": "Disbursement Details",
                    "items": [{
                        key: "loanAccount.sanctionDate",
                        type: "date",
                        title: "SANCTION_DATE"
                    }, {
                        key: "loanAccount.numberOfDisbursements",
                        title: "NUM_OF_DISBURSEMENTS",
                        onChange: function(value, form, model) {
                            $log.info(value);
                            $log.info(model);

                            model.loanAccount.disbursementSchedules = [];
                            for (var i = 0; i < value; i++) {
                                model.loanAccount.disbursementSchedules.push({
                                    trancheNumber: "" + (i + 1),
                                    disbursementAmount: 0
                                });
                            }
                        }
                    }, {
                        key: "loanAccount.customerBankAccountNumber",
                        type: "lov",
                        autolov: true,
                        title: "CUSTOMER_BANK_ACC_NO",
                        bindMap: {
                            "customerId": "loanAccount.customerId"
                        },
                        outputMap: {
                            "account_number": "loanAccount.customerBankAccountNumber",
                            "ifsc_code": "loanAccount.customerBankIfscCode",
                            "customer_bank_name": "loanAccount.customerBank",
                            "customer_bank_branch_name": "loanAccount.customerBranch"
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form, model) {
                            return Queries.getCustomerBankAccounts(
                                inputModel.customerId
                            );
                        },
                        getListDisplayItem: function(item, index) {
                            return [
                                item.account_number + (item.is_disbersement_account == 1 ? '&nbsp;&nbsp;<span class="color-theme"><i class="fa fa-check-square">&nbsp;</i>{{"DEFAULT_DISB_ACCOUNT"|translate}}</span>' : ''),
                                item.ifsc_code + ', ' + item.customer_bank_name,
                                item.customer_bank_branch_name
                            ];
                        }
                    }, {
                        key: "loanAccount.customerBankIfscCode",
                        title: "CUSTOMER_BANK_IFSC",
                        "readonly": true
                    }, {
                        key: "loanAccount.customerBank",
                        title: "CUSTOMER_BANK",
                        "readonly": true
                    }, {
                        key: "loanAccount.customerBranch",
                        title: "BRANCH_NAME",
                        "readonly": true
                    }, {
                        key: "loanAccount.disbursementSchedules",
                        title: "DISBURSEMENT_SCHEDULES",
                        add: null,
                        remove: null,
                        items: [{
                            key: "loanAccount.disbursementSchedules[].trancheNumber",
                            title: "TRANCHE_NUMBER",
                            readonly: true
                        }, {
                            key: "loanAccount.disbursementSchedules[].disbursementAmount",
                            title: "DISBURSEMENT_AMOUNT",
                            type: "amount"
                        }]
                    }]
                }]
            }, {
                "type": "box",
                "title": "COLLATERAL",
                "readonly": true,
                "items": [{
                    "key": "loanAccount.collateral",
                    "title": "COLLATERAL",
                    "type": "array",
                    "items": [{
                        "key": "loanAccount.collateral[].collateralType",
                        "type": "select"
                    }, {
                        "key": "loanAccount.collateral[].collateralDescription"
                    }, {
                        "key": "loanAccount.collateral[].manufacturer"
                    }, {
                        "key": "loanAccount.collateral[].quantity",
                        "onChange": function(value, form, model, event) {
                            calculateTotalValue(value, form, model);
                        }
                    }, {
                        "key": "loanAccount.collateral[].modelNo"
                    }, {
                        "key": "loanAccount.collateral[].machineOld"
                    }, {
                        "key": "loanAccount.collateral[].collateralValue",
                        "type": "amount",
                        "title": "COLLATERAL_VALUE",
                        "onChange": function(value, form, model, event) {
                            calculateTotalValue(value, form, model);
                        }
                    }, {
                        "key": "loanAccount.collateral[].totalValue",
                        "type": "amount",
                        "title": "TOTAL_VALUE"
                    }, {
                        "key": "loanAccount.collateral[].marginValue",
                        "type": "amount",
                        "title": "PURCHASE_PRICE"
                    }, {
                        "key": "loanAccount.collateral[].loanToValue",
                        "type": "amount",
                        "title": "PRESENT_VALUE"
                    }, {
                        "key": "loanAccount.collateral[].collateral1FilePath",
                        "type": "file",
                        "title": "DOCUMENT_1"
                    }, {
                        "key": "loanAccount.collateral[].collateral2FilePath",
                        "type": "file",
                        "title": "DOCUMENT_2"
                    }, {
                        "key": "loanAccount.collateral[].collateral3FilePath",
                        "type": "file",
                        "title": "DOCUMENT_3"
                    }, {
                        "key": "loanAccount.collateral[].photoFilePath",
                        "type": "file",
                        "fileType": "image/*",
                        "title": "PHOTO"
                    }]
                }]
            }, {
                "type": "box",
                "title": "GUARANTOR_NOMINEE_DETAILS",
                readonly: true,
                "items": [{
                    "type": "fieldset",
                    "title": "GUARANTOR",
                    "items": [{
                        key: "loanAccount.guarantors",
                        notitle: "true",
                        view: "fixed",
                        type: "array",
                        add: null,
                        remove: null,
                        items: [{
                            "key": "loanAccount.guarantors[].guaUrnNo",
                            "title": "URN_NO",
                            "type": "lov",
                            "lovonly": true,
                            "inputMap": {
                                "customerId": {
                                    "key": "customer.customerId",
                                    "title": "CUSTOMER_ID"
                                },
                                "firstName": {
                                    "key": "customer.firstName",
                                    "title": "CUSTOMER_NAME"
                                },
                                "branch": {
                                    "key": "customer.branch",
                                    "type": "select",
                                    "screenFilter": true
                                },
                                "centreCode": {
                                    "key": "customer.centreCode",
                                    "type": "select",
                                    "screenFilter": true
                                }
                            },
                            "outputMap": {
                                "urnNo": "loanAccount.guarantors[arrayIndex].guaUrnNo",
                                "firstName": "loanAccount.guarantors[arrayIndex].guaFirstName"
                            },
                            "searchHelper": formHelper,
                            "search": function(inputModel, form) {
                                $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                var promise = Enrollment.search({
                                    'customerId': inputModel.customerId,
                                    'branchName': inputModel.branch || SessionStore.getBranch(),
                                    'firstName': inputModel.firstName,
                                    'centreCode': inputModel.centreCode,
                                    'customerType': "individual",
                                    'stage': "Completed"
                                }).$promise;
                                return promise;
                            },
                            getListDisplayItem: function(data, index) {
                                return [
                                    [data.firstName, data.fatherFirstName].join(' | '),
                                    data.id,
                                    data.urnNo
                                ];
                            }
                        }, {
                            key: "loanAccount.guarantors[].guaFirstName",
                            title: "NAME",
                            "readonly": true
                        }]
                    }]
                }, {
                    "type": "fieldset",
                    "title": "INSURANCE_POLICY",
                    "items": [{
                        "key": "additional.portfolioUrnSelector",
                        "type": "select",
                        "titleMap": {
                            "applicant": "Applicant",
                            "coapplicant": "Co-Applicant",
                            "guarantor": "Guarantor"
                        },
                        onChange: function(value, form, model) {
                            switch (value) {
                                case "applicant":
                                    if (_.isEmpty(model.loanAccount.applicant)) {
                                        Utils.alert("Please Select an Applicant");
                                        model.additional.portfolioUrnSelector = "";
                                        break;
                                    }
                                    model.loanAccount.portfolioInsuranceUrn = model.loanAccount.applicant;
                                    break;
                                case "coapplicant":
                                    if (_.isEmpty(model.loanAccount.coBorrowerUrnNo)) {
                                        Utils.alert("Please Select a Co-Applicant");
                                        model.additional.portfolioUrnSelector = "";
                                        break;
                                    }
                                    model.loanAccount.portfolioInsuranceUrn = model.loanAccount.coBorrowerUrnNo;
                                    break;
                                case "guarantor":
                                    if (_.isEmpty(model.loanAccount.guarantors[0].guaUrnNo)) {
                                        Utils.alert("Please Select a Guarantor");
                                        model.additional.portfolioUrnSelector = "";
                                        break;
                                    }
                                    model.loanAccount.portfolioInsuranceUrn = model.loanAccount.guarantors[0].guaUrnNo;
                                    break;
                            }
                        }
                    }, {
                        key: "loanAccount.portfolioInsuranceUrn",
                        "title": "URN_NO"
                    }]
                }, {
                    "type": "fieldset",
                    "title": "NOMINEE_DETAILS",
                    "items": [{
                        "key": "loanAccount.nominees",
                        "type": "array",
                        notitle: "true",
                        "view": "fixed",
                        "add": null,
                        "remove": null,
                        "items": [{
                            key: "loanAccount.nominees[].nomineeFirstName",
                            "title": "NAME"
                        }, {
                            key: "loanAccount.nominees[].nomineeGender",
                            type: "select",
                            "title": "GENDER"
                        }, {
                            key: "loanAccount.nominees[].nomineeDOB",
                            type: "date",
                            "title": "DATE_OF_BIRTH"
                        }, {
                            key: "loanAccount.nominees[].nomineeDoorNo",
                            "title": "DOOR_NO"
                        }, {
                            key: "loanAccount.nominees[].nomineeLocality",
                            "title": "LOCALITY"
                        }, {
                            key: "loanAccount.nominees[].nomineeStreet",
                            "title": "STREET"
                        }, {
                            key: "loanAccount.nominees[].nomineePincode",
                            type: "lov",
                            fieldType: "number",
                            autolov: true,
                            inputMap: {
                                "pincode": {
                                    key: "loanAccount.nominees[].nomineePincode"
                                },
                                "district": {
                                    key: "loanAccount.nominees[].nomineeDistrict"
                                },
                                "state": {
                                    key: "loanAccount.nominees[].nomineeState"
                                }
                            },
                            outputMap: {
                                "pincode": "loanAccount.nominees[arrayIndex].nomineePincode",
                                "district": "loanAccount.nominees[arrayIndex].nomineeDistrict",
                                "state": "loanAccount.nominees[arrayIndex].nomineeState"
                            },
                            searchHelper: formHelper,
                            search: function(inputModel, form, model) {
                                return Queries.searchPincodes(
                                    inputModel.pincode,
                                    inputModel.district,
                                    inputModel.state
                                );
                            },
                            getListDisplayItem: function(item, index) {
                                return [
                                    item.pincode,
                                    item.district + ', ' + item.state
                                ];
                            }
                        }, {
                            key: "loanAccount.nominees[].nomineeDistrict",
                            type: "text",
                            "title": "DISTRICT"
                        }, {
                            key: "loanAccount.nominees[].nomineeState",
                            "title": "STATE"
                        }, {
                            key: "loanAccount.nominees[].nomineeRelationship",
                            type: "select",
                            "title": "RELATIONSHIP"
                        }]
                    }]
                }]
            }, {
                "type": "box",
                "title": "LOAN_DOCUMENTS",
                "items": [{
                    "type": "fieldset",
                    "title": "EXISTING_LOAN_DOCUMENTS",
                    "items": [{
                        "type": "array",
                        "key": "loanDocuments.existingDocuments",
                        "add": null,
                        "startEmpty": true,
                        "remove": null,
                        "titleExpr": "model.loanDocuments.existingDocuments[arrayIndex].document",
                        "items": [{
                            "title": "DOWNLOAD_FORM",
                            "notitle": true,
                            "fieldHtmlClass": "btn-block",
                            "style": "btn-default",
                            "icon": "fa fa-download",
                            "type": "button",
                            "readonly": false,
                            "key": "loanAccount.loanDocs[].documentId",
                            "onClick": function(model, form, schemaForm, event) {
                                var fileId = model.loanDocuments.existingDocuments[schemaForm.arrayIndex].documentId;
                                Utils.downloadFile(Files.getFileDownloadURL(fileId));
                            }

                        }]
                    }]
                }, {
                    "type": "fieldset",
                    "title": "ADD_LOAN_DOCUMENTS",
                    "items": [{
                        "type": "array",
                        "key": "loanDocuments.newLoanDocuments",
                        "title": "ADD_DOCUMENTS",
                        "startEmpty": true,
                        "titleExpr": "model.loanDocuments.newLoanDocuments[arrayIndex].document",
                        "items": [
                            // {
                            //     "key": "loanDocuments.newLoanDocuments[].document",
                            //     "title": "DOCUMENT",
                            //     "type": "string"
                            // },
                            // {
                            //     "key": "loanDocuments.newLoanDocuments[].disbursementId",
                            //     "title": "DISBURSEMENT_ID",
                            //     "type": "string"
                            // },
                            {
                                "title": "Upload",
                                "key": "loanDocuments.newLoanDocuments[].documentId",
                                type: "file",
                                fileType: "*/*",
                                category: "Loan",
                                subCategory: "DOC1",
                                notitle: true

                            }
                            // ,
                            // {
                            //     "key": "loanDocuments.newLoanDocuments[].documentStatus",
                            //     "type": "string"
                            // }
                        ]
                    }]
                }]
            }, {
                "type": "actionbox",
                "items": [{
                    "type": "save",
                    "title": "SAVE_OFFLINE",
                }, {
                    "type": "submit",
                    "title": "SUBMIT"
                }]
            }],
            schema: function() {
                return SchemaResource.getLoanAccountSchema().$promise;
            },
            actions: {
                preSave: function(model, form, formName) {
                    var deferred = $q.defer();
                    if (model.loanAccount.urnNo) {
                        deferred.resolve();
                    } else {
                        irfProgressMessage.pop('LoanInput-save', 'urnNo is required', 3000);
                        deferred.reject();
                    }
                    return deferred.promise;
                },
                submit: function(model, form, formName) {
                    $log.info(model);
                    PageHelper.clearErrors();
                    model.reqData.loanAccount = _.cloneDeep(model.loanAccount);
                    //alert(model.reqData.loanAccount.loanDocuments.length);
                    model.reqData.loanAccount.loanDocuments = model.reqData.loanAccount.loanDocuments || [];
                    model.reqData.loanProcessAction = "SAVE";
                    model.reqData.stage = null;
                    if (model.loanDocuments.newLoanDocuments) {
                        for (var i = 0; i < model.loanDocuments.newLoanDocuments.length; i++) {
                            model.loanDocuments.newLoanDocuments[i].loanId = model.loanAccount.id;
                            model.loanDocuments.newLoanDocuments[i].accountNumber = model.loanAccount.accountNumber;
                            model.loanDocuments.newLoanDocuments[i].documentStatus = "APPROVED";

                            model.reqData.loanAccount.loanDocuments.push(model.loanDocuments.newLoanDocuments[i]);
                        }

                    }
                    PageHelper.showLoader();
                    IndividualLoan.update(model.reqData).$promise.then(function(response) {
                        PageHelper.hideLoader();
                        $log.info(response);
                        PageHelper.showProgress("loan-create", "Update Successful", 5000)


                    }, function(errorResponse) {
                        PageHelper.showErrors(errresp);
                        PageHelper.showProgress("loan-create", "Oops. An Error Occurred", 5000);
                        PageHelper.hideLoader();
                    }).finally(function() {
                        PageHelper.hideLoader();
                    });;

                }
            }
        };
    }
]);

irf.pageCollection.factory(irf.page('loans.LoanRepay'),
    ["$log", "$q", "$timeout", "SessionStore", "$state", "entityManager","formHelper", "$stateParams", "Enrollment"
        ,"LoanAccount", "LoanProcess", "irfProgressMessage", "PageHelper", "irfStorageService", "$filter",
        "Groups", "AccountingUtils", "Enrollment", "Files", "elementsUtils", "CustomerBankBranch","Queries", "Utils", "IndividualLoan",
        function ($log, $q, $timeout, SessionStore, $state, entityManager, formHelper, $stateParams, Enrollment,LoanAccount, LoanProcess, irfProgressMessage, PageHelper, StorageService, $filter, Groups, AccountingUtils, Enrollment, Files, elementsUtils, CustomerBankBranch,Queries, Utils, IndividualLoan) {


            function backToLoansList(){
                try {
                    var urnNo = ($stateParams.pageId.split("."))[1];
                    $state.go("Page.Engine", {
                        pageName: "customer360.loans.View",
                        pageId: urnNo
                    });
                }catch(err){
                    console.log(err);
                    //@TODO : Where to redirect if no page params present
                }
            }



            var _pageGlobals = {};
            var pageData = {};

            function defaultPageParams(){
                _pageGlobals = {
                    hideTransactionName: false
                };
                pageData = $stateParams.pageData;
            }

            function pageInit(){
                defaultPageParams();

                $log.info("PageData is ::");
                $log.info(pageData);
                if (!_.isNull(pageData) && pageData.onlyDemandAllowed == true){
                    _pageGlobals.transactionName = "Scheduled Demand";
                    _pageGlobals.hideTransactionName = true;
                }
            }

            return {
                "type": "schema-form",
                "title": "LOAN_REPAYMENT",
                "subTitle": "",
                initialize: function (model, form, formCtrl) {

                    pageInit();

                    var config = {
                        fingerprintEnabled: false
                    };

                    model.$pageConfig = config;
                    model._pageGlobals = _pageGlobals;
                    model.repayment = {};

                    if (_pageGlobals.hideTransactionName == true && !_.isNull(_pageGlobals.transactionName)){
                        model.repayment.transactionName = _pageGlobals.transactionName;
                    }

                    PageHelper.showLoader();
                    irfProgressMessage.pop('loading-loan-details', 'Loading Loan Details');
                    //PageHelper
                    var loanAccountNo = ($stateParams.pageId.split("."))[0];
                    var promise = LoanAccount.get({accountId: loanAccountNo}).$promise;
                    promise.then(function (data) { /* SUCCESS */
                        model.loanAccount = data;
                        model.repayment.productCode=data.productCode;
                        model.repayment.urnNo=data.customerId1;
                        model.repayment.instrument='CASH';
                        model.repayment.authorizationUsing='';
                        model.repayment.remarks='';
                        model.repayment.accountNumber = data.accountId;
                        //model.repayment.amount = 0;
                        model.repayment.customerName = data.customer1FirstName;

                        model.repayment.productCode = data.productCode;
                        model.repayment.urnNo = data.customerId1;
                        model.repayment.demandAmount = Utils.ceil(data.totalDemandDue);
                        model.repayment.payOffAndDueAmount = Utils.ceil(data.payOffAndDueAmount);
                        model.repayment.totalFeeDue = Utils.ceil(data.totalFeeDue);
                        model.repayment.recoverableInterest = data.recoverableInterest;
                        model.repayment.principalNotDue = data.principalNotDue;
                        model.repayment.totalNormalInterestDue  = data.totalNormalInterestDue ;
                        model.repayment.preclosureFee = data.preclosureFee;
                        model.repayment.payOffAmount = data.payOffAmount;
                        model.repayment.totalDemandDue = data.totalDemandDue;
                        model.repayment.bookedNotDueNormalInterest = data.bookedNotDueNormalInterest;
                        model.repayment.bookedNotDuePenalInterest = data.bookedNotDuePenalInterest;

                        model.repayment.totalPayoffAmountToBePaid = Utils.ceil(data.payOffAndDueAmount + data.preclosureFee);

                        //_pageGlobals.totalDemandDue = data.totalDemandDue;

                        var currDate = moment(new Date()).format("YYYY-MM-DD");
                        model.repayment.repaymentDate = currDate;
                        irfProgressMessage.pop('loading-loan-details', 'Loaded.', 2000);
                    }, function (resData) {
                        irfProgressMessage.pop('loading-loan-details', 'Error loading Loan details.', 4000);
                        PageHelper.showErrors(resData);
                        backToLoansList();
                    })
                    .finally(function () {
                        PageHelper.hideLoader();
                    })

                    /* Load loan Information */
                    IndividualLoan.search({
                        'accountNumber': loanAccountNo,
                        'stage' : 'Completed'
                    }).$promise.then(
                        function(res){
                            if (_.isArray(res.body) && res.body.length>0){
                                var item = res.body[0];
                                IndividualLoan.get({id: item.loanId})
                                    .$promise
                                    .then(
                                        function(res){
                                            model.loanAccount = res;
                                            var urns = [];
                                            if (!_.isNull(model.loanAccount.applicant)){
                                                urns.push(model.loanAccount.applicant);
                                            }
                                            if (!_.isNull(model.loanAccount.coBorrowerUrnNo)){
                                                urns.push(model.loanAccount.coBorrowerUrnNo)
                                            }
                                            Queries.getCustomerBasicDetails({"urns":urns}).then(
                                                function(resQuery) {
                                                    // console.log(resQuery);
                                                    // console.log(resQuery.urns[model.achIndividualLoanSearch.applicant].first_name);
                                                    if (!_.isNull(model.loanAccount.applicant)){
                                                        model.loanAccount.applicantName = resQuery.urns[model.loanAccount.applicant].first_name
                                                    }
                                                    if (!_.isNull(model.loanAccount.coBorrowerUrnNo)){
                                                        model.loanAccount.coBorrowerUrnNo = resQuery.urns[model.loanAccount.coBorrowerUrnNo].first_name
                                                    }
                                                },
                                                function(errQuery) {
                                                }
                                            )
                                        }
                                    )
                            } else {
                                /* Loan Account not in perdix. Go back to Collections Dashboard */
                            }
                        }
                    )

                },
                offline: false,
                form: [
                    {
                        "type": "box",
                        "title": "REPAY",
                        "items": [
                            {
                                key:"repayment.accountNumber",
                                title: "LOAN_ACCOUNT_NUMBER",
                                readonly:true
                            },
                            {
                                key: "repayment.customerName",
                                title: "CUSTOMER_NAME",
                                readonly: true
                            },
                            {
                                key: "loanAccount.applicantName",
                                title: "APPLICANT_NAME",
                                readonly: true
                            },
                            {
                                key: "loanAccount.coApplicantName",
                                title: "COAPPLICANT_NAME",
                                readonly: true,
                                condition: "model.loanAccount.coBorrowerUrnNo!=null"
                            },
                            {
                                key:"repayment.transactionName",
                                type: "string",
                                readonly: true,
                                condition: "model._pageGlobals.hideTransactionName"
                            },
                            {
                                key:"repayment.transactionName",
                                "type":"select",
                                "required": true,
                                condition: "!model._pageGlobals.hideTransactionName",
                                titleMap: {
                                    "Scheduled Demand":"Scheduled Demand",
                                    "Fee Payment":"Fee Payment",
                                    "Pre-closure":"Pre-closure",
                                    "Prepayment":"Prepayment"
                                },
                                onChange: function(value ,form, model){
                                    if ( value == 'Pre-closure'){
                                        model.repayment.amount = model.repayment.totalPayoffAmountToBePaid
                                    } else if (value == 'Scheduled Demand'){
                                        model.repayment.amount = Utils.ceil(model.repayment.totalDemandDue);
                                    } else {
                                        model.repayment.amount = null;
                                    }
                                }
                            },
                            {
                                key: "repayment.demandAmount",
                                readonly: true,
                                title: "TOTAL_DEMAND_DUE",
                                condition: "model.repayment.transactionName=='Scheduled Demand' || model.repayment.transactionName == 'Advance Repayment'",
                                type: "amount"
                            },
                            {
                                key: "repayment.totalNormalInterestDue",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "NORMAL_INTEREST",
                                type: "amount"
                            },
                            {
                                key: "repayment.recoverableInterest",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "RECOVERABLE_INTEREST",
                                type: "amount"
                            },
                            {
                                key: "repayment.principalNotDue",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "PRINCIPAL",
                                type: "amount"
                            },
                            {
                                key: "repayment.bookedNotDueNormalInterest",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "BOOKED_NOT_DUE_NORMAL_INTEREST",
                                type: "amount"
                            },
                            {
                                key: "repayment.bookedNotDuePenalInterest",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "BOOKED_NOT_DUE_PENAL_INTEREST",
                                type: "amount"
                            },
                            {
                                key: "repayment.totalDemandDue",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "TOTAL_DEMAND_DUE",
                                type: "amount"
                            },
                            {
                                key: "repayment.totalFeeDue",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "TOTAL_FEE_DUE",
                                type: "amount"
                            },
                            {
                                key: "repayment.preclosureFee",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "PRECLOSURE_FEE",
                                type: "amount"
                            },
                            {
                                key: "repayment.payOffAmount",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Pre-closure'",
                                title: "PAYOFF_AMOUNT",
                                type: "amount"
                            },
                            {
                                key: "repayment.totalFeeDue",
                                readonly: true,
                                condition: "model.repayment.transactionName=='Fee Payment'",
                                title: "TOTAL_FEE_AMOUNT",
                                type: "amount"
                            },
                            {
                                key: "repayment.amount",
                                type: "amount"
                            },
                            "repayment.repaymentDate",
                            "repayment.cashCollectionRemark",
                            {
                                "type": "fieldset",
                                "title": "Fingerprint",
                                "condition": "model.$pageConfig.fingerprintEnabled==true",
                                "items": [
                                    {
                                        "key": "additional.override_fp",
                                        "condition": "model.$pageConfig.fingerprintEnabled==true"
                                    },
                                    {
                                        "key": "repayment.authorizationRemark",
                                        "condition": "model.additional.override_fp==true"
                                    }
                                ]
                            },
                            {
                                "key": "repayment.instrument",
                                "type": "select",
                                "required": true,
                                "titleMap": [
                                    {
                                        name: "Cash",
                                        value: "CASH"
                                    },
                                    {
                                        "name":"Cheque",
                                        "value":"CHQ"
                                    },
                                    {
                                        "name":"NEFT",
                                        "value":"NEFT"
                                    },
                                    {
                                        "name":"RTGS",
                                        "value":"RTGS"
                                    }

                                ]
                            },
                            {
                                key:"repayment.reference",
                                title:"CHEQUE_NUMBER",
                                "schema": {
                                    type:"string",
                                    maxLength:6,
                                    minLength:6
                                },
                                required:true,
                                condition:"model.repayment.instrument=='CHQ'"
                            },
                            {
                                key: "repayment.bankAccountNumber",
                                type: "lov",
                                autolov: true,
                                condition:"model.repayment.instrument=='CHQ'",
                                title:"REPAYMENT_TO_ACCOUNT",
                                bindMap: {

                                },
                                outputMap: {
                                    "account_number": "repayment.bankAccountNumber"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    return Queries.getBankAccounts();
                                },
                                getListDisplayItem: function(item, index) {
                                    return [
                                        item.account_number,
                                        item.ifsc_code + ', ' + item.bank_name,
                                        item.branch_name
                                    ];
                                }
                            },
                            {
                                key:"repayment.chequeDate",
                                title:"CHEQUE_DATE",
                                type:"date",
                                required:true,
                                condition:"model.repayment.instrument=='CHQ'"
                            },
                            {
                                key: "repayment.photoId",
                                title: "CHEQUE_PHOTO",
                                condition:"model.repayment.instrument=='CHQ'",
                                type: "file",
                                fileType: "image/*",
                                category: "Repayment",
                                subCategory: "Cheque"
                            },
                            {
                                key:"repayment.reference",
                                title:"REFERENCE_NUMBER",
                                type:"number",
                                required: true,
                                condition:"model.repayment.instrument=='NEFT'"
                            },
                            {
                                key: "repayment.bankAccountNumber",
                                type: "lov",
                                autolov: true,
                                condition:"model.repayment.instrument=='NEFT'",
                                title:"REPAYMENT_TO_ACCOUNT",
                                bindMap: {

                                },
                                outputMap: {
                                    "account_number": "repayment.bankAccountNumber"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    return Queries.getBankAccounts();
                                },
                                getListDisplayItem: function(item, index) {
                                    return [
                                        item.account_number,
                                        item.ifsc_code + ', ' + item.bank_name,
                                        item.branch_name
                                    ];
                                }
                            },
                            {
                                key:"repayment.NEFTDate",
                                title:"DATE",
                                type:"date",
                                condition:"model.repayment.instrument=='NEFT'"
                            },
                            {
                                key:"repayment.reference",
                                title:"REFERENCE_NUMBER",
                                type:"text",
                                condition:"model.repayment.instrument=='RTGS'"
                            },
                            {
                                key: "repayment.bankAccountNumber",
                                type: "lov",
                                autolov: true,
                                condition:"model.repayment.instrument=='RTGS'",
                                title:"DISBURSEMENT_FROM_ACCOUNT",
                                bindMap: {

                                },
                                outputMap: {
                                    "account_number": "repayment.bankAccountNumber"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    return Queries.getBankAccounts();
                                },
                                getListDisplayItem: function(item, index) {
                                    return [
                                        item.account_number,
                                        item.ifsc_code + ', ' + item.bank_name,
                                        item.branch_name
                                    ];
                                }
                            },
                            {
                                key:"repayment.RTGSDate",
                                title:"DATE",
                                type:"text",
                                condition:"model.repayment.instrument=='RTGS'"
                            },
                           /* {
                                key:"repayment.RTGSBankDetails",
                                title:"BANK_DETAILS",
                                type:"text",
                                condition:"model.repayment.instrument=='RTGS'"
                            },
                            {
                                key:"repayment.RTGSBranchDetails",
                                title:"BRANCH_DETAILS",
                                type:"text",
                                condition:"model.repayment.instrument=='RTGS'"
                            }*/
                        ]
                    },
                    {
                        "type":"actionbox",
                        "items": [
                            {
                                "type":"submit",
                                "style":"btn-theme",
                                "title":"SUBMIT"

                            }
                        ]
                    }
                ],
                schema: {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "repayment": {
                            "type": "object",
                            "properties": {
                                "accountNumber": {
                                    "type": "string",
                                    "title":"ACCOUNT_ID"
                                },
                                "amount": {
                                    "type": "number",
                                    "title":"AMOUNT_PAID"

                                },
                                "authorizationRemark": {
                                    "type": "string",
                                    "title":"AUTHORIZATION_REMARK"
                                },
                                "authorizationUsing": {
                                    "type": "string",
                                    "title":"AUTHORIZATION_USING"
                                },
                                "cashCollectionRemark": {
                                    "type": "string",
                                    "title":"CASH_COLLECTION_REMARK"
                                },
                                "groupCode": {
                                    "type": "string",
                                    "title":"GROUP_CODE"
                                },
                                "instrument": {
                                    "type": "string",
                                    "title": "INSTRUMENT_TYPE",
                                    "required": true
                                },
                                "productCode": {
                                    "type": "string",
                                    "title":"PRODUCT_CODE"
                                },
                                "remarks": {
                                    "type": "string",
                                    "title":"REMARKS"
                                },
                                "ifscCode": {
                                    "type": "string",
                                    "title":"IFSC_CODE"
                                },
                                "customerBankName": {
                                    "type": "string",
                                    "title":"CUSTOMER_BANK_NAME"
                                },
                                "bankBranchDetails": {
                                    "type": "string",
                                    "title":"BANK_BRANCH_DETAILS"
                                },
                                "repaymentDate": {
                                    "type": "string",
                                    "title":"REPAYMENT_DATE",
                                    "x-schema-form": {
                                        "type": "date"
                                    }
                                },
                                "transactionId": {
                                    "type": "string",
                                    "title":"TRANSACTION_ID"
                                },
                                "transactionName": {
                                    "type": "string",
                                    "title":"TRANSACTION_NAME"
                                },
                                "urnNo": {
                                    "type": "string",
                                    "title":"URN_NO"
                                }
                            },
                            required: [
                                'instrument'
                            ]
                        },
                        "additional": {
                            "type": "object",
                            "properties": {
                                "override_fp": {
                                    "type": "boolean",
                                    "title":"OVERRIDE_FINGERPRINT",
                                    "default": false
                                }
                            }
                        }
                    },
                    "required": [
                        "accountNumber",
                        "amount",
                        "authorizationRemark",
                        "authorizationUsing",
                        "cashCollectionRemark",
                        "groupCode",
                        "productCode",
                        "remarks",
                        "repaymentDate",
                        "transactionId",
                        "transactionName",
                        "urnNo"
                    ]
                },
                actions: {
                    preSave: function (model, formCtrl) {
                        var deferred = $q.defer();
                        model._storedData = null;
                        deferred.resolve();
                        return deferred.promise;
                    },
                    submit: function (model, formCtrl, formName) {
                        if (model.repayment.demandAmount > 0 && model.repayment.transactionName == "Advance Repayment"){
                            PageHelper.showProgress("loan-repay","Advance Repayment is not allowed for an outstanding Loan",5000);
                            return false;
                        }
                        if (model.repayment.instrument == 'CHQ'){
                            if(isNaN(parseInt(model.repayment.reference))){
                                PageHelper.showProgress("loan-repay","Not a valid cheque number.",5000);
                                return;
                            } else if (parseInt(model.repayment.reference) == 0){
                                PageHelper.showProgress("loan-repay","Zero is not a valid cheque number.",5000);
                                return;
                            }

                            // var currDate = Utils.getCurrentDate();
                            // var cheqDate = model.repayment.chequeDate;

                            // if (Utils.compareDates(cheqDate, currDate) === -1){
                            //     PageHelper.showProgress("loan-repay","Back dated cheques are not accepted.",5000);
                            //     return;
                            // }

                        }
                        if (model._screen && model._screen =='BounceQueue'){
                            if (model.repayment.amount > model.repayment.demandAmount){
                                PageHelper.showProgress("loan-repay","Amount paid cannot be more than the Total demand due",5000);
                                return;
                            }
                        }
                        $log.info("Inside submit");
                        if(window.confirm("Are you Sure?")){
                            PageHelper.showLoader();
                            var postData = _.cloneDeep(model.repayment);
                            postData.amount = parseInt(Number(postData.amount))+"";
                            postData.instrument = model.repayment.instrument;
                            LoanAccount.repay(postData,function(resp,header){
                                $log.info(resp);
                                try{
                                    alert(resp.response);
                                    PageHelper.navigateGoBack();
                                }catch(err){

                                }
                            },function(resp){
                                PageHelper.showErrors(resp);
                            }).$promise.finally(function(){
                                PageHelper.hideLoader();
                            });

                        }
                    }
                }
            }
        }]);

irf.pageCollection.factory(irf.page('loans.ReferenceCode'),
    ["$log", "$q", "$timeout", "SessionStore", "$state", "entityManager","formHelper", "$stateParams", "Enrollment"
    ,"LoanAccount", "LoanProcess", "irfProgressMessage", "PageHelper", "irfStorageService", "$filter",
    "Groups", "AccountingUtils", "Enrollment", "Files", "elementsUtils",
    function ($log, $q, $timeout, SessionStore, $state, entityManager, formHelper, $stateParams, Enrollment,LoanAccount, LoanProcess, irfProgressMessage, PageHelper, StorageService, $filter, Groups, AccountingUtils, Enrollment, Files, elementsUtils) {


        return {
            "type": "schema-form",
            "title": "UPDATE_REFERENCE_CODE",
            "subTitle": "",
            offline: false,
            form: [
            {
                        //"type": "box",
                        type:"box",
                        title: "REFERENCE_CODE",
                        items: [
                        {
                            "type": "box",
                            "title": "UPDATE_REFERENCE_CODE",
                            "type": "array",
                            "items": [
                            {
                                key: "classifier",
                                title: "CLASSIFIER_NAME",
                                type: "lov",
                                fieldType: "text",//number/text
                                //autolov: true,
                                lovonly: true,
                                inputMap: {
                                    "id": ".currentRoleId",
                                },
                                outputMap: {
                                    "id": "rolePage.currentRoleId",
                                    "name": "rolePage.currentRoleName"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    return RolesPages.allRoles().$promise;
                                },
                                getListDisplayItem: function(item, index) {
                                    return [
                                    item.id,
                                    item.name
                                    ];
                                },
                                onSelect: function(result, model, context) {
                                    PageHelper.showLoader();
                                    RolesPages.allPages({roleId:result.id}).$promise.then(function(result){
                                        if (result && result.body && result.body.length) {
                                            model.rolePage.access = [];
                                            for (var i = 0; i < result.body.length; i++) {
                                                var a = {
                                                    id: result.body[i].id, // page_id
                                                    uri: result.body[i].uri,
                                                    rpa_id: result.body[i].rpa_id,
                                                    page_config: result.body[i].page_config,
                                                    access: !!result.body[i].rpa_id
                                                };
                                                model.rolePage.access.push(a);
                                            };
                                        }
                                    }).finally(function(){
                                        PageHelper.hideLoader();
                                    });
                                }
                            },
                            {
                                key: "rolePage.access",
                                condition: "model.rolePage.access.length",
                                type: "array",
                                add: null,
                                remove: null,
                                titleExpr: "(model.rolePage.access[arrayIndex].access?'⚫ ':'⚪ ') + model.rolePage.access[arrayIndex].uri",
                                items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                    {
                                        type: "section",
                                        htmlClass: "col-sm-3",
                                        items: [
                                        {
                                            key: "rolePage.access[].access",
                                            title: "Allow Access",
                                            type: "checkbox",
                                            fullwidth: true,
                                            schema: { default:true }
                                        }
                                        ]
                                    },
                                    {
                                        type: "section",
                                        htmlClass: "col-sm-9",
                                        items: [
                                        {
                                            key: "rolePage.access[].page_config",
                                            title: "Config",
                                            type: "textarea"
                                        }
                                        ]
                                    }
                                    ]
                                }
                                ]
                            },
                           /* {
                                key:".classifierName",
                                title: "CLASSIFIER_NAME",
                                readonly:true
                            },*/
                            {
                                key: ".name",
                                //readonly: true,
                                title: "NAME",
                                type: "textarea"
                            },
                            {
                                key: ".code",
                                title: "CODE",
                                type: "textarea"
                            },
                           // "repayment.repaymentDate",
                          //  "repayment.cashCollectionRemark",
                          {
                            key:".parentClassifier",
                            title:"PARENT_CLASSIFIER",
                            "type":"text",
                            "required": true,
                            readonly:true   
                        },
                        {
                            key: ".parentCode",
                            readonly: true,
                            title: "PARENT_CODE",
                            type: "text"
                        },
                        {
                            key: ".field1",
                            title: "FIELD1",
                            type: "textarea"
                        },{
                            key: ".field2",
                            title: "FIELD2",
                            type: "textarea"
                        },{
                            key: ".field3",
                            title: "FIELD3",
                            type: "textarea"
                        },{
                            key: ".field4",
                            title: "FIELD4",
                            type: "textarea"
                        },{
                            key: ".field5",
                            title: "FIELD5",
                            type: "textarea"
                        }
                        ]
                    }
                    ]
                },

                {
                    "type":"actionbox",
                    "items": [
                    {
                        "type":"submit",
                        "style":"btn-theme",
                        "title":"SUBMIT"

                    }
                    ]
                }
                ],
                schema: 
                {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "classifier": {
                      "type": "string"
                  },
                  "code": {
                      "type": "string"
                  },
                  "field1": {
                      "type": "string"
                  },
                  "field2": {
                      "type": "string"
                  },
                  "field3": {
                      "type": "string"
                  },
                  "field4": {
                      "type": "string"
                  },
                  "field5": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer"
                  },
                  "name": {
                      "type": "string"
                  },
                  "parentClassifier": {
                      "type": "string"
                  },
                  "parentReferenceCode": {
                      "type": "string"
                  },
                  "version": {
                      "type": "integer"
                  }
              },
              "required": [
              ]
          },
          actions: {
            preSave: function (model, formCtrl) {
                var deferred = $q.defer();
                model._storedData = null;
                deferred.resolve();
                return deferred.promise;
            },
            submit: function (model, formCtrl, formName) {
                if (model.repayment.demandAmount > 0 && model.repayment.transactionName == "Advance Repayment"){
                    PageHelper.showProgress("loan-repay","Advance Repayment is not allowed for an outstanding Loan",5000);
                    return false;
                }
                $log.info("Inside submit");
                if(window.confirm("Are you Sure?")){
                    PageHelper.showLoader();
                    var postData = _.cloneDeep(model.repayment);
                    postData.amount = parseInt(Number(postData.amount))+"";
                    postData.instrument = model.repayment.instrument;
                    LoanAccount.repay(postData,function(resp,header){
                        $log.info(resp);
                        try{
                            alert(resp.response);
                            PageHelper.navigateGoBack();
                        }catch(err){

                        }
                    },function(resp){
                        PageHelper.showErrors(resp);
                    }).$promise.finally(function(){
                        PageHelper.hideLoader();
                    });

                }
            }
        }
    }
}]);

irf.pageCollection.factory(irf.page("loans.PaymentReversal"),
["$log", "Queries", "SessionStore", "$state", "formHelper", "LoanAccount", "Utils", "PageHelper",
function($log, Queries, SessionStore, $state, formHelper, LoanAccount, Utils, PageHelper) {

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "REVERSE_REPAYMENT",
        initialize: function(model, form, formCtrl) {
            model.repayment = model.repayment || {};
            $log.info("Reversal Screen got initialized");
        },
        form: [
            {
                "type": "box",
                "title": "LAST_REPAYMENT",
                "items": [
                    {
                        "key": "repayment.branchName",
                        "title": "BRANCH",
                        "readonly": true
                    },
                    {
                        "key": "repayment.accountId",
                        "title": "ACCOUNT_NUMBER",
                        "type": "lov",
                        "autolov": true,
                        "inputMap": {
                            "account_number":{
                                "key":"repayment.accountId",
                                "title":"ACCOUNT_NUMBER"
                            }
                        },
                        "outputMap": {
                            "account_number": "repayment.accountId",
                            "branch_name": "repayment.branchName",
                            "urn_no":"repayment.urnNo",
                            "first_name":"repayment.customerName",
                            "transaction_id":"repayment.transactionId",
                            "repayment_type":"repayment.transactionName",
                            "repayment_date":"repayment.transactionDate",
                            "repayment_amount":"repayment.repaymentAmount"
                        },
                        "searchHelper": formHelper,
                        initialize: function(inputModel) {
                        },
                        search: function(inputModel, form, model) {
                            return Queries.getLatestLoanRepayment(inputModel.account_number || model.repayment.accountId);
                        },
                        getListDisplayItem: function(item, index) {
                            return [
                                item.account_number,
                                item.first_name,
                                'Rs.' + item.repayment_amount + ' on ' + item.repayment_date
                            ];
                        },
                        onSelect: function(result, model, context) {
                        }
                    },
                    {
                        "key": "repayment.urnNo",
                        "title": "CUSTOMER_URN",
                        "readonly": true
                    },
                    {
                        "key": "repayment.customerName",
                        "title": "CUSTOMER_NAME",
                        "readonly": true
                    },
                    {
                        "key": "repayment.transactionId",
                        "title": "TRANSACTION_ID",
                        "readonly": true
                    },
                    {
                        "key": "repayment.transactionName",
                        "title": "REPAYMENT_TYPE",
                        "readonly": true
                    },
                    {
                        "key": "repayment.transactionDate",
                        "title": "REPAYMENT_DATE",
                        "readonly": true,
                        "type": "date"
                    },
                    {
                        "key": "repayment.repaymentAmount",
                        "title": "AMOUNT",
                        "type": "amount",
                        "readonly": true
                    }
                ]
            },
            {
                "type": "actionbox",
                "items": [
                    {
                        "type": "submit",
                        "title": "REVERSE_REPAYMENT"
                    }
                ]
            }
        ],
        schema: {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "type": "object",
            "properties": {
                "repayment": {
                    "type": "object",
                    "properties": {
                        "accountId": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        actions: {
            submit: function(model, form, formName) {
                PageHelper.clearErrors();
                Utils.confirm("Are you sure?").then(function(){
                    PageHelper.showLoader();
                    PageHelper.showProgress("payment-reversal","Processing Reversal",3000);
                    LoanAccount.manualReversal(model.repayment).$promise.then(function(resp) {
                        PageHelper.showProgress("payment-reversal","Transaction reversed successfully",3000);
                        var accountId = model.repayment.accountId;
                        model.repayment = {};
                    }, function(errResp) {
                        PageHelper.showErrors(errResp);
                    }).finally(function() {
                        PageHelper.hideLoader();
                    });
                });
            }
        }
    };
}]);
/*

{
  "accountId": "100290100009",
  "transactionDate": "2016-09-13",
  "transactionId": "CMS235",
  "transactionName": "Scheduled",
  "urnNo": "1609019940231001"
}

*/
irf.commons.factory('groupCommons', ["SessionStore","formHelper","Groups","Pages__CBCheckStatusQueue","Utils",
    "irfModalQueue","$log","PageHelper","irfSimpleModal","irfProgressMessage","Enrollment","LoanProcess","$q","$uibModal",
    function(SessionStore,formHelper,Groups,Pages__CBCheckStatusQueue,Utils,irfModalQueue,$log,PageHelper,irfSimpleModal,
             irfProgressMessage,Enrollment,LoanProcess,$q,$uibModal
    ){

        var branchId = ""+SessionStore.getBranchId();
        var branchName = SessionStore.getBranch();
        /*Search Page Stuffs*/
        var defaultListOptions = {
            itemCallback: function(item, index) {
            },
            getItems: function(response, headers){
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [

                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    null
                ]
            },
            getActions: function(){
                return [];
            }
        };
        var defaultPaginationOptions= {
            viewMode: "page",
            getItemsPerPage: function(response, headers){
                return 20;
            },
            getTotalItemsCount: function(response, headers){
                try {
                    return headers['x-total-count'];
                }catch(err){
                    return 0;
                }
            }
        };
        
        /*Group CRUD stuffs*/
        function showDscData(dscId){
            PageHelper.showLoader();
            Groups.getDSCData({dscId:dscId},function(resp,headers){
                PageHelper.hideLoader();
                var dataHtml = "<table class='table table-striped table-bordered table-responsive'>";

                dataHtml += "<tr><td>Response : </td><td>"+resp.response+"</td></tr>";
                dataHtml+= "<tr><td>Response Message: </td><td>"+resp.responseMessage+"</td></tr>";
                dataHtml+= "<tr><td>Stop Response: </td><td>"+resp.stopResponse+"</td></tr>";
                dataHtml+="</table>"
                irfSimpleModal('DSC Check Details',dataHtml);
            },function(res){
                PageHelper.showErrors(res);
                PageHelper.hideLoader();
            });
        }
        
        return {
            /*Search Page Stuffs*/
            getDefaultPaginationOptions:function(){
                return defaultPaginationOptions;
            },
            getSearchDefinition:function(stage,listOptions,pageOptions){
                var defaultPartner = 'KGFS';
                var definition= {
                    title: "GROUPS_LIST",
                        searchForm: [
                        "*"
                    ],
                        searchSchema: {
                        "type": 'object',
                            "title": 'SearchOptions',
                            "properties": {
    
                                "partner": {
                                        "title": "PARTNER",
                                        "default":defaultPartner,
                                        "type": "string",
                                        "enumCode":"partner",
                                        "x-schema-form":{
                                        "type":"select"
                                    }
                                }

                        },
                        "required":["partner"]
                    },
                    getSearchFormHelper: function() {
                        return formHelper;
                    },
                    getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
    
                        var params = {
                            'branchId': branchId,
                            'partner':searchOptions.partner,
                            'groupStatus':true,
                            'page': pageOpts.pageNo,
                            'per_page': pageOpts.itemsPerPage
                        };
                        if(stage) {
                            params.currentStage = stage
                        }
    
                        var promise = Groups.search(params).$promise;
    
                        return promise;
                    },
                    paginationOptions: pageOptions || defaultPaginationOptions,
                    listOptions: listOptions || defaultListOptions
    
    
                };
    
                return definition;
    
    
            },
            getOfflineDisplayItem: function() {
               return  function (item, index) {
                    return [
                        'Partner : ' + item.partner,
                        'Record Count : ' + item._result.items.length
                    ]
                };
            },
            getOfflinePromise: function(stage){
                return function(searchOptions){      /* Should return the Promise */
                    var promise = Groups.search({
                        'branchId':branchId,
                        'partner':searchOptions.partner,
                        'currentStage':stage,
                        'page': 1,
                        'per_page': 100
                    }).$promise;
    
                    return promise;
                }
            },
            
            /*Group CRUD stuffs*/
            /*
            * modes available = CREATE,DSC_CHECK,VIEW,EDIT(not enabled),DELETE,APP_DWNLD
            * */

            getFormDefinition:function(mode){
                console.info("Generating form definition for "+mode);
                var readonly = true;
                if(mode=='CREATE' || mode=='EDIT'){
                    readonly = false;
                }

                var basicDefinition = [{
                    "key":"group",
                    "type": "box",
                    "title":"GROUP_DETAILS",
                    "items":[
                        {
                            "key":"group.groupName",
                            readonly:readonly
                        },
                        {
                            "key":"group.partnerCode",
                            "type":"select",
                            readonly:readonly
                        },
                        {
                            "key":"group.centreCode",
                            "type":"select",
                            readonly:readonly
                        },
                        {
                            "key":"group.productCode",
                            "type":"select",
                            readonly:readonly,
                            "filter": {
                                "parentCode as partner": "model.group.partnerCode",
                                "field2": "JLG"
                            }
                        },

                        {
                            "key":"group.frequency",
                            "type":"select",
                            readonly:readonly
                        },
                        {
                            "key":"group.tenure",
                            readonly:readonly
                        },
                        {
                            "key":"group.jlgGroupMembers",
                            "type":"array",
                            "title":"GROUP_MEMBERS",
                            "condition":"model.group.jlgGroupMembers.length>0",
                            "add":null,
                            "remove":null,
                            "items":[
                                {
                                    "key":"group.jlgGroupMembers[].urnNo",
                                    "readonly":true

                                },
                                {
                                    "key":"group.jlgGroupMembers[].firstName",
                                    "type":"string",
                                    "readonly":true,
                                    "title":"GROUP_MEMBER_NAME"
                                },
                                {
                                    "key":"group.jlgGroupMembers[].husbandOrFatherFirstName",
                                    "readonly":readonly
                                },
                                {
                                    "key":"group.jlgGroupMembers[].relation",
                                    "readonly":readonly,
                                    "type":"select",
                                    "titleMap":{
                                        "Father":"Father",
                                        "Husband":"Husband"
                                    }
                                },
                                {
                                    "key":"group.jlgGroupMembers[].loanAmount",
                                    "type":"amount",
                                    readonly:readonly

                                },
                                {
                                    "key":"group.jlgGroupMembers[].loanPurpose1",
                                    "type":"select",
                                    onChange: function(modelValue, form, model) {
                                        $log.info(modelValue);
                                    },
                                    readonly:readonly
                                },
                                {
                                    "key":"group.jlgGroupMembers[].loanPurpose2",
                                    "type":"select",
                                    "parentEnumCode": "loan_purpose_1",
                                    /*"filter": {
                                        "parentCode as loan_purpose_1": "model.jlgGroupMembers[arrayIndex].loanPurpose1"
                                    },*/
                                    readonly:readonly
                                },
                                {
                                    "key":"group.jlgGroupMembers[].loanPurpose3",
                                    "type":"select",
                                    "parentEnumCode": "loan_purpose_2",
                                    /*"filter": {
                                        "parentCode as loan_purpose_2": "model.jlgGroupMembers[arrayIndex].loanPurpose2"
                                    },*/
                                    readonly:readonly
                                },
                                {
                                    "key":"group.jlgGroupMembers[].witnessFirstName",
                                    "readonly":readonly
                                },
                                {
                                    "key":"group.jlgGroupMembers[].witnessRelationship",
                                    "type":"select",
                                    "readonly":readonly
                                }

                            ]
                        }

                    ]
                }];

                if(mode=='VIEW') return basicDefinition;

                var retDefinition = _.clone(basicDefinition);

                if(mode=='CREATE' || mode=='EDIT'){
                    this.addCreateElements(retDefinition);
                }
                else if(mode=='DSC_CHECK'){
                    this.addDSCElements(retDefinition);
                }

                else if(mode=='DELETE'){
                    this.addDeleteElements(retDefinition);
                }
                else if(mode=='APP_DWNLD'){
                    this.addAppDwnldElements(retDefinition);
                }

                return retDefinition;

                
            },
            addCreateElements:function(retDefinition){
                retDefinition[0].items.push({
                    "type": "button",
                    "fieldHtmlClass":"btn-block",
                    "title": "SELECT_MEMBERS",

                    onClick: function(model, form, formName) {
                        var modalQueuedefinition = _.cloneDeep(Pages__CBCheckStatusQueue.definition);
                        modalQueuedefinition.title = "CREDIT_BUREAU_COMPLETED_CUSTOMERS";
                        var modelOutside = model;
                        modalQueuedefinition.initialize = function(model, form, formCtrl){
                            model.branchName = branchName;
                            model.centreCode = modelOutside.group.centreCode;
                        };
                        modalQueuedefinition.listOptions.getItems = function(response, headers){
                            if (response!=null && response.length && response.length!=0){
                                var ret = [];
                                angular.forEach(response,function(value,key){
                                    var isDuplicate = false;
                                    for(var i=0;i<ret.length;i++){
                                        if(ret[i].urnNo === value.urnNo){
                                            isDuplicate = true;
                                            break;
                                        }
                                    }
                                    if(value.urnNo!=null && !isDuplicate) ret.push(value);
                                });
                                console.warn(ret);
                                return ret;
                            }
                            return [];
                        };
                        modalQueuedefinition.listOptions.getListItem = function(item){
                            return [
                                item.firstName,
                                ':' + item.urnNo
                            ];
                        };
                        irfModalQueue.showModalQueue(modalQueuedefinition).then(function(items){
                            $log.info("on return callback of modal queue");
                            $log.info(items);

                            if(items.length>0)
                                PageHelper.showLoader();



                            model.group.jlgGroupMembers = [];
                            angular.forEach(items,function(value,key){
                                var fatherName = "";
                                var familyMembers = [];
                                Enrollment.getCustomerById({id:value.customerId},function(resp,head){

                                    fatherName = resp.fatherFirstName;
                                    familyMembers = resp.familyMembers;
                                },function(resp){}).$promise.finally(function(){

                                    var uname = value.firstName;
                                    try{
                                        if(value.middleName.length>0)
                                            uname+= " "+value.middleName;
                                    }catch(err){

                                    }
                                    try{
                                        if(value.lastName.length>0)
                                            uname+= " "+value.lastName;

                                    }catch(err){

                                    }
                                    model.group.jlgGroupMembers.push({
                                        urnNo:value.urnNo,
                                        firstName:uname,
                                        husbandOrFatherFirstName:fatherName,
                                        relation:"Father",
                                        _familyMembers:familyMembers


                                    });
                                    console.log(key);
                                    if(key >= (items.length-1)){
                                        PageHelper.hideLoader();
                                    }

                                });


                            });
                        });
                    }

                });
                retDefinition[0].items[6].items.push({
                    "type":"button",
                    "key":"group.jlgGroupMembers[].btnChooseWitness",
                    "fieldHtmlClass":"btn-block",
                    "title":"CHOOSE_FAMILY_MEMBER_AS_WITNESS",
                    "onClick":function(model,schemaForm,form,event){
                        //@TODO : Use an irf element for this, if possible
                        var familyMembers = model.group.jlgGroupMembers[form.arrayIndex]._familyMembers;
                        var  html="<div class='modal-header'><button type='button' class='close' ng-click='$close()' aria-label='Close'><span aria-hidden='true'>x</span></button>";
                        html+="<h4 class='modal-title'>Choose</h4></div>";
                        html+="<div class='modal-body'><table class='table table-striped table-bordered table-responsive'>";
                        html+="<th>Name</th><th>Relationship</th><th>Action</th>";
                        for(var i=0;i<familyMembers.length;i++){
                            if(familyMembers[i].relationShip =="Self" || familyMembers[i].relationShip =="self") continue;
                            var name = Utils.getFullName(familyMembers[i].familyMemberFirstName,
                                familyMembers[i].familyMemberMiddleName ,familyMembers[i].familyMemberLastName);
                            html += "<tr>";

                            html += "<td>";
                            html += name;
                            html += "</td>";

                            html += "<td>";
                            html += familyMembers[i].relationShip;
                            html += "</td>";

                            html += "<td>";
                            html += "<button ng-click='returnWitness(\""+name+"\",\""+familyMembers[i].relationShip+"\")' class='btn btn-theme'>Select</button>";
                            html += "</td>";

                            html += "</tr>";
                        }
                        html +="</table></div>";
                        html+="<div class='modal-footer'>";
                        html+="<button type='button' class='btn btn-default pull-left' ng-click='$close()'>Close</button>";
                        html+="</div>";
                        var chooseWin = $uibModal.open({
                            template:html,
                            controller:["$scope",function($scope){
                                $scope.returnWitness = function(name,relationship){
                                    model.group.jlgGroupMembers[form.arrayIndex].witnessFirstName = name;
                                    model.group.jlgGroupMembers[form.arrayIndex].witnessRelationship = relationship;
                                    $scope.$close();
                                }
                            }]
                        });
                        console.warn(chooseWin);

                    }
                });
                retDefinition.push({
                    "type":"actionbox",
                    "items":[
                        {
                            "type":"submit",
                            "style":"btn-primary",
                            "title":"CREATE_GROUP"

                        }
                    ]
                });
            },
            addDSCElements:function(retDefinition){
                retDefinition[0].items[6].items.push({
                        "key":"group.jlgGroupMembers[].dscStatus",
                        "readonly":true,
                        "condition":"model.group.jlgGroupMembers[arrayIndex].dscStatus"
                    },
                    {
                        "key":"group.jlgGroupMembers[].requestDSCOverride",
                        "type":"button",
                        "title":"REQUEST_DSC_OVERRIDE",
                        "icon":"fa fa-reply",
                        "onClick":function(model, formCtrl, form, event) {
                            console.log(form);
                            console.warn(event);
                            var i = event['arrayIndex'];

                            PageHelper.clearErrors();
                            var urnNo = model.group.jlgGroupMembers[i].urnNo;
                            PageHelper.showLoader();
                            $log.info("Requesting DSC override for ",urnNo);
                            irfProgressMessage.pop('group-dsc-override-req', 'Requesting DSC Override');
                            Groups.post({
                                service:"dscoverriderequest",
                                urnNo:urnNo,
                                groupCode:model.group.groupCode,
                                productCode:model.group.productCode
                            },{
                            },function(resp,header){
                                $log.warn(resp);
                                irfProgressMessage.pop('group-dsc-override-req', 'Almost Done...');
                                var screenMode = model.group.screenMode;
                                Groups.getGroup({groupId:model.group.id},function(response,headersGetter){
                                    PageHelper.hideLoader();
                                    irfProgressMessage.pop('group-dsc-override-req', 'DSC Override Requested',2000);
                                    model.group = _.cloneDeep(response);
                                    model.group.screenMode = screenMode;
                                    fixData(model);
                                },function(resp){
                                    $log.error(resp);
                                    PageHelper.hideLoader();
                                    irfProgressMessage.pop("group-dsc-override-req","Oops. An error occurred",2000);
                                    PageHelper.showErrors(resp);
                                    fixData(model);
                                });

                            },function(resp,header){
                                $log.error(resp);
                                PageHelper.hideLoader();
                                irfProgressMessage.pop("group-dsc-override-req","Oops. An error occurred",2000);
                                PageHelper.showErrors(resp);
                            });
                        },
                        "condition":"model.group.jlgGroupMembers[arrayIndex].dscStatus=='DSC_OVERRIDE_REQUIRED'"
                    },
                    {
                        "key":"group.jlgGroupMembers[].getDSCData",
                        "type":"button",
                        "title":"VIEW_DSC_RESPONSE",
                        "icon":"fa fa-eye",
                        "style": "btn-primary",
                        "condition":"model.group.jlgGroupMembers[arrayIndex].dscStatus=='DSC_OVERRIDE_REQUIRED'",
                        "onClick":function(model, formCtrl, form, event){
                            console.log(form);
                            console.warn(event);
                            var i = event['arrayIndex'];
                            console.warn("dscid :"+model.group.jlgGroupMembers[i].dscId);
                            var dscId = model.group.jlgGroupMembers[i].dscId;
                            showDscData(dscId);
                        }
                    },
                    {
                        "key":"group.jlgGroupMembers[].removeMember",
                        "type":"button",
                        "title":"REMOVE_MEMBER",
                        "icon":"fa fa-times",
                        "onClick":function(model, formCtrl, form, event) {
                            console.log(form);
                            console.warn(event);
                            var i = event['arrayIndex'];
                            var urnNo = model.group.jlgGroupMembers[i].urnNo;
                            $log.warn("Remove member from grp ",urnNo);
                            if(window.confirm("Are you sure?")){
                                PageHelper.showLoader();
                                PageHelper.clearErrors();
                                irfProgressMessage.pop('group-dsc-remove-req', 'Removing Group Member...');
                                Groups.get({
                                        service:"process",
                                        action:"removeMember",
                                        groupCode:model.group.groupCode,
                                        urnNo:urnNo

                                    },
                                    function(resp,headers){
                                        var screenMode = model.group.screenMode;
                                        Groups.getGroup({groupId:model.group.id},function(response,headersGetter){
                                            irfProgressMessage.pop('group-dsc-remove-req', 'Group Member Removed',2000);
                                            model.group = _.cloneDeep(response);
                                            model.group.screenMode = screenMode;
                                            fixData(model);
                                            PageHelper.hideLoader();

                                        },function(resp){
                                            $log.error(resp);
                                            PageHelper.hideLoader();
                                            irfProgressMessage.pop("group-dsc-remove-req","Oops. An error occurred",2000);
                                            fixData(model);
                                        });
                                    },
                                    function(resp){
                                        $log.error(resp);
                                        PageHelper.hideLoader();
                                        irfProgressMessage.pop("group-dsc-remove-req","Oops. An error occurred",2000);
                                        PageHelper.showErrors(resp);
                                        fixData(model);
                                    });
                            }
                        },
                        "condition":"model.group.jlgGroupMembers[arrayIndex].dscStatus=='DSC_OVERRIDE_REQUIRED'"
                    });
                retDefinition.push({
                    "type":"actionbox",
                    "items":[
                        {
                            "style":"btn-primary",
                            "title":"PERFORM_DSC_CHECK",
                            "type":"button",
                            "onClick":"actions.doDSCCheck(model,form)"

                        }
                    ]

                });
            },
            addDeleteElements:function(retDefinition){
                retDefinition.push({
                    "type":"actionbox",
                    "items":[
                        {
                            "type":"button",
                            "style":"btn-theme",
                            "title":"CLOSE_GROUP",
                            "icon":"fa fa-times",
                            "onClick":"actions.closeGroup(model,form)"

                        }
                    ]
                });
            },
            addAppDwnldElements:function(retDefinition){

                retDefinition.push({
                        "type":"actionbox",
                        "condition":"!model._isGroupLoanAccountActivated",
                        "items":[
                            {
                                "type":"button",
                                "icon": "fa fa-check-square",
                                "title":"ACTIVATE_LOAN_ACCOUNT",
                                "onClick":"actions.activateLoanAccount(model,form)",

                            }
                        ]
                    },
                    {
                        "type":"actionbox",
                        "condition":"model._isGroupLoanAccountActivated",
                        "items":[
                            {
                                "type":"button",
                                "icon": "fa fa-download",
                                "title":"DOWNLOAD_APPLICATION",
                                "onClick":"actions.downloadApplication(model,form)",

                            },
                            {
                                "type":"button",
                                "icon": "fa fa-arrow-right",
                                "title":"PROCEED_TO_DISBURSEMENT",
                                "onClick":"actions.proceedAction(model,form)"

                            }
                        ]
                    });

            },

            /*
            * Common Functionalities
            * */

            showDSCData: function(dscId){
                showDscData(dscId);
            },
            checkGroupLoanActivated: function(model){
                //@TODO: check if model data is valid

                var deferred = $q.defer();
                try {
                    model._isGroupLoanAccountActivated = false;
                    LoanProcess.query({
                        action: 'groupdisbursement',
                        param1: model.group.partnerCode,
                        param2: model.group.groupCode
                    }, function (resp, headers) {
                        $log.info("checkGroupLoanActivated", resp.length);
                        try {
                            if (resp.length > 0) {
                                //for application download endpoint (1st accountId is the param)
                                model._loanAccountId = resp[0].accountId;
                                model._isGroupLoanAccountActivated = true;
                                deferred.resolve(true);

                            }

                        } catch (err) {

                        }

                        deferred.resolve(false);

                    }, function (resp) {
                        deferred.resolve(false);
                    });
                }
                catch(err){
                    deferred.resolve(false);
                }
                return deferred.promise;
            }
    
        }
}]);
irf.pageCollection.factory("Pages__GroupCRUD",
    ["$log","$q",'Enrollment', 'Groups','CreditBureau','LoanProducts','formHelper','PageHelper','$state',
    '$stateParams','irfProgressMessage', "irfModalQueue","SessionStore","Utils",
        "groupCommons","LoanProcess",
    function($log, $q, Enrollment, Groups, CreditBureau, LoanProducts, formHelper, PageHelper, $state,
        $stateParams, irfProgressMessage, irfModalQueue,SessionStore,Utils,groupCommons,LoanProcess) {
        var branch = SessionStore.getBranch();


        var fixData = function(model){
            //fixData from server for Display
            switch(model.group.frequency){
                case 'M': model.group.frequency="Monthly"; break;
                case 'Q': model.group.frequency="Quarterly"; break;
                case 'A': model.group.frequency="Annually"; break;
                case 'D': model.group.frequency="Daily"; break;
                case 'W': model.group.frequency="Weekly"; break;
                case 'F': model.group.frequency="Fortnightly"; break;
                case 'H': model.group.frequency="Half Yearly"; break;
                case 'B': model.group.frequency="Bullet"; break;
            }
            model.group.tenure = parseInt(model.group.tenure);
            //return model;
        };

        var fillNames = function(model){

            var deferred = $q.defer();

            angular.forEach(model.group.jlgGroupMembers,function(member,key){
                Enrollment.get({id:member.customerId},function(resp,headers){
                    model.group.jlgGroupMembers[key].firstName = resp.firstName;
                    try {
                        if (resp.middleName.length > 0)
                            model.group.jlgGroupMembers[key].firstName += " " + resp.middleName;
                        if (resp.lastName.length > 0)
                            model.group.jlgGroupMembers[key].firstName += " " + resp.lastName;
                    }catch(err){

                    }
                    if(key>=model.group.jlgGroupMembers.length-1){
                        deferred.resolve(model);
                    }

                },function(res){
                    deferred.reject(res);
                });
            });
            return deferred.promise;
        };

        var saveData = function(reqData){

            PageHelper.showLoader();
            irfProgressMessage.pop('group-save', 'Working...');

            var deferred = $q.defer();

            if(reqData.group.id){
                deferred.reject(true);
                $log.info("Group id not null, skipping save");

            }
            else {
                reqData.enrollmentAction = 'SAVE';
                reqData.group.groupFormationDate = Utils.getCurrentDate();
                delete reqData.group.screenMode;
                reqData.group.frequency = reqData.group.frequency[0];

                /*for(var i=0; i<reqData.group.jlgGroupMembers.length; i++){
                    reqData.group.jlgGroupMembers[i].loanPurpose2 = reqData.group.jlgGroupMembers[i].loanPurpose1;
                    reqData.group.jlgGroupMembers[i].loanPurpose3 = reqData.group.jlgGroupMembers[i].loanPurpose1;
                }*/

                PageHelper.clearErrors();
                Utils.removeNulls(reqData,true);
                Groups.post(reqData, function (res) {

                    irfProgressMessage.pop('group-save', 'Done.',5000);
                    deferred.resolve(res);

                }, function (res) {
                    PageHelper.hideLoader();
                    PageHelper.showErrors(res);
                    irfProgressMessage.pop('group-save', 'Oops. Some error.', 2000);
                    deferred.reject(false);

                });
            }
            return deferred.promise;

        };

        var proceedData = function(res){



            var deferred = $q.defer();
            if(res.group.id===undefined || res.group.id===null){
                $log.info("Group id null, cannot proceed");
                deferred.reject(null);
            }
            else {
                PageHelper.showLoader();
                irfProgressMessage.pop('group-save', 'Working...');
                res.enrollmentAction = "PROCEED";
                try {
                    delete res.group.screenMode;
                }catch(err){

                }
                res.group.frequency = res.group.frequency[0];

                /*for(var i=0; i<res.group.jlgGroupMembers.length; i++){
                    res.group.jlgGroupMembers[i].loanPurpose2 = res.group.jlgGroupMembers[i].loanPurpose1;
                    res.group.jlgGroupMembers[i].loanPurpose3 = res.group.jlgGroupMembers[i].loanPurpose1;
                }*/

                Utils.removeNulls(res,true);
                Groups.update(res, function (res, headers) {
                    $log.info(res);
                    PageHelper.hideLoader();
                    irfProgressMessage.pop('group-save', 'Done. Group ID: ' + res.group.id, 5000);
                    deferred.resolve(res);



                }, function (res, headers) {
                    PageHelper.hideLoader();
                    irfProgressMessage.pop('group-save', 'Oops. Some error.', 2000);
                    PageHelper.showErrors(res);
                    deferred.reject(null);
                });
            }
            return deferred.promise;

        };
        var backToDashboard = function(){
            $state.go('Page.GroupDashboard',{
                pageName:"GroupDashboard",
                pageId:null,
                pageData:null
            });
        };
        return {
		"id": "GroupsCRUD",
		"type": "schema-form",
		"name": "GroupCRUD",
		"title": "",
		"subTitle": "",
		"uri": "Groups/Group Details",


		initialize: function (model, form, formCtrl) {
            $log.info($stateParams);
            var screenMode = 'CREATE';
            try {
                if ($stateParams.pageId !== null) {
                    if ($stateParams.pageData.intent !== undefined) {
                        screenMode = $stateParams.pageData.intent;
                    }
                }
            }catch(err){
                $log.error(err);
                backToDashboard();
            }
            this.form = groupCommons.getFormDefinition(screenMode);
			$log.info("Group got initialized");
			model.group = {};
            model.group.jlgGroupMembers = [];
            model.branchName = branch;
            if(screenMode!='CREATE'){
                //Except for create, all modes require to load group data.
                //This code block can be moved to commons in future version
                var groupId = $stateParams.pageId;
                PageHelper.showLoader();
                irfProgressMessage.pop("group-init","Loading, Please Wait...");
                Groups.getGroup({groupId:groupId},function(response,headersGetter){
                    model.group = _.cloneDeep(response);

                    fixData(model);

                   if(model.group.jlgGroupMembers.length>0) {
                       fillNames(model).then(function (m) {
                           model = m;
                           if(screenMode=='APP_DWNLD'){
                               groupCommons.checkGroupLoanActivated(model).then(function(res){
                                   PageHelper.hideLoader();
                                   irfProgressMessage.pop("group-init", "Load Complete.", 2000);
                               },function(res){
                                   PageHelper.hideLoader();
                                   irfProgressMessage.pop("group-init", "Load Complete.", 2000);
                               });
                           }
                           else {
                               PageHelper.hideLoader();
                               irfProgressMessage.pop("group-init", "Load Complete.", 2000);
                           }
                       }, function (m) {
                           PageHelper.showErrors(m);
                           PageHelper.hideLoader();
                           irfProgressMessage.pop("group-init", "Oops. An error occurred", 2000);
                       });
                   }
                    else {
                       PageHelper.hideLoader();
                       irfProgressMessage.pop("group-init", "Load Complete. No Group Members Found", 2000);
                       backToDashboard();
                   }
                },function(resp){

                    PageHelper.hideLoader();
                    irfProgressMessage.pop("group-init","Oops. An error occurred",2000);
                    backToDashboard();
                });
            }

		},
		form: [],
		actions:{

            doDSCCheck:function(model,form){
                PageHelper.clearErrors();
                PageHelper.showLoader();
                irfProgressMessage.pop('group-dsc-check', 'Performing DSC Check');
                Groups.dscQuery(
                    {
                        groupCode:model.group.groupCode,
                        partnerCode:model.group.partnerCode
                    },
                    {},
                    function(resp){
                        $log.warn(resp);
                        irfProgressMessage.pop('group-dsc-check', 'Almost Done...');
                        var screenMode = model.group.screenMode;
                        Groups.getGroup({groupId:model.group.id},function(response,headersGetter){
                            PageHelper.hideLoader();
                            irfProgressMessage.pop('group-dsc-check', 'DSC Check Complete',2000);
                            model.group = _.cloneDeep(response);
                            model.group.screenMode = screenMode;
                            fixData(model);


                            fillNames(model).then(function(m){
                                model = m;
                                PageHelper.hideLoader();

                            },function(m){
                                PageHelper.hideLoader();
                                irfProgressMessage.pop("group-dsc-check","Oops. An error occurred",2000);
                            });

                            var dscFailedStatuses = ['DSC_OVERRIDE_REQUIRED','DSC_OVERRIDE_REQUESTED'];
                            var allOk = true;
                            var failedMsg = Array();
                            angular.forEach(model.group.jlgGroupMembers,function(member){
                                if(dscFailedStatuses.indexOf(member.dscStatus)>=0){
                                    $log.warn("DSC Failed for",member);
                                    allOk = false;
                                    return;
                                }

                            });
                            $log.info("DSC Check Status :"+allOk);
                            if(allOk===true){
                                if(window.confirm("DSC Check Succeeded for the Group. Proceed to next stage?")){
                                    model.enrollmentAction = 'PROCEED';
                                    PageHelper.showLoader();
                                    irfProgressMessage.pop('dsc-proceed', 'Working...');
                                    PageHelper.clearErrors();
                                    var reqData = _.cloneDeep(model);
                                    delete reqData.screenMode;
                                    reqData.group.frequency = reqData.group.frequency[0];
                                    Groups.update(reqData,function(res){
                                        PageHelper.hideLoader();
                                        irfProgressMessage.pop('dsc-proceed', 'Operation Succeeded. Proceeded to CGT 1.', 5000);
                                        backToDashboard();

                                    },function(res){
                                        PageHelper.hideLoader();
                                        irfProgressMessage.pop('dsc-proceed', 'Oops. Some error.', 2000);
                                        PageHelper.showErrors(res);

                                    });
                                }
                            }
                            else{
                                var errors = Array();
                                PageHelper.hideLoader();
                                errors.push({message:"DSC Check Failed for some member(s). Please Take required action"});
                                PageHelper.setErrors(errors);
                            }

                        },function(resp){
                            $log.error(resp);
                            PageHelper.hideLoader();
                            irfProgressMessage.pop("group-dsc-check","Oops. An error occurred",2000);

                        });

                    },function(resp){
                        PageHelper.showErrors(resp);
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('group-dsc-check', 'Oops... An error occurred. Please try again',2000);
                    });
            },
			submit: function(model, form, formName) {
                if (form.$invalid){
                    irfProgressMessage.pop('group-submit', 'Please fix your form', 5000);
                    return;
                }


				$log.info(model);
                var screenMode = model.group.screenMode;
                var reqData = _.cloneDeep(model);
                saveData(reqData).then(function(res){
                    model.group = _.clone(res.group);
                    reqData = _.cloneDeep(model);
                    fixData(model);
                    model.group.screenMode = screenMode;
                    proceedData(reqData).then(function(res){
                        backToDashboard();
                    });
                },function(doProceed){
                    if(doProceed===true) {
                        proceedData(reqData).then(function (res) {
                            backToDashboard();
                        });
                    }
                    else{
                        fixData(model);
                        model.group.screenMode = screenMode;
                    }
                });

			},
            closeGroup:function(model,form){
                if(window.confirm("Close Group - Are you sure?")){
                    var remarks = window.prompt("Enter Remarks","Test Remarks");
                    if(remarks) {
                        PageHelper.showLoader();
                        irfProgressMessage.pop('close-group', "Working...");
                        Groups.update({service: "close"}, {
                            "groupId": model.group.id,
                            "remarks": remarks
                        }, function (resp, header) {

                            PageHelper.hideLoader();
                            irfProgressMessage.pop('close-group', "Done", 5000);
                            backToDashboard();

                        }, function (res) {
                            $log.error(res);
                            PageHelper.hideLoader();
                            irfProgressMessage.pop('close-group', "Oops. An Error Occurred, Please try Again", 5000);
                            PageHelper.showErrors(res);
                            

                        });
                    }
                }
            },

            proceedAction:function(model,form){

                if(window.confirm("Proceed to Next Stage?")){
                    var reqData = _.cloneDeep(model);
                    proceedData(reqData).then(function (res) {
                        backToDashboard();
                    },function(res){
                    });
                }

            },
            downloadApplication:function(model,form){
                PageHelper.showLoader();
                groupCommons.checkGroupLoanActivated(model).then(function(isActivated){
                    PageHelper.hideLoader();
                    if(isActivated){
                        try {
                            var url = irf.FORM_DOWNLOAD_URL+'?form_name=app_loan&record_id=' +  model._loanAccountId;
                            try {
                                cordova.InAppBrowser.open(url, '_system', 'location=yes');
                            } catch (err) {
                                window.open(url, '_blank', 'location=yes');
                            }
                        }catch(err){
                            irfProgressMessage.pop('ap-download', 'An Error Occur during download. Please Try Again',2000);
                        }

                    }
                    else{
                        irfProgressMessage.pop('ap-download', 'An Error Occur during download. Please Try Again',2000);
                    }
                },function(res){
                    PageHelper.hideLoader();
                });


            },
            activateLoanAccount: function (model, form) {
                PageHelper.clearErrors();
                PageHelper.showLoader();
                irfProgressMessage.pop('ap-activate', 'Activating loan account');
                LoanProcess.get({action:'groupLoans',groupCode:model.group.groupCode,partner:model.group.partnerCode},function(resp,header){

                    groupCommons.checkGroupLoanActivated(model).then(function(isActivated){
                        PageHelper.hideLoader();
                        if(isActivated){

                            irfProgressMessage.pop('ap-activate', 'Loan Account Activated',5000);
                        }
                        else{
                            irfProgressMessage.pop('ap-activate', 'An error occurred while activating loan account',2000);
                        }
                    });



                },function(res){
                    PageHelper.hideLoader();
                    irfProgressMessage.pop('ap-activate', 'An error occurred while activating loan account',2000);
                    PageHelper.showErrors(res);
                });
            }

		},
		schema: function() {
			return Groups.getSchema().$promise;
		}
	}
}]);

irf.pageCollection.factory("Pages__Cgt1Queue", ["$log", "formHelper", "Groups","$state","entityManager",
    "SessionStore","groupCommons",
    function($log, formHelper, Groups,$state,entityManager,SessionStore,groupCommons){

        var listOptions = {
            itemCallback: function(item, index) {
                // This will not be called in case of selectable = true in definition
                $log.info(item);
                entityManager.setModel('Cgt1', {_request:item});
                $state.go("Page.Engine",{
                    pageName:"Cgt1",
                    pageId:null
                });
            },
            getItems: function(response, headers){
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [

                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    null
                ]
            },
            getActions: function(){

                return [

                ];
            }
        };

        var definition = groupCommons.getSearchDefinition('Stage04',listOptions);

        return {
        "id": "cgt1queue",
        "type": "search-list",
        "name": "Cgt1Queue",
        "title": "CGT 1 Queue",
        "subTitle": "",
        "uri":"Groups/CGT 1 Queue",
        offline: true,
        getOfflineDisplayItem: groupCommons.getOfflineDisplayItem(),
        getOfflinePromise: groupCommons.getOfflinePromise('Stage04'),
        initialize: function (model, form, formCtrl) {
            $log.info("CGT 1 Q got initialized");
        },
        definition: definition
    };
}]);

irf.pageCollection.factory("Pages__Cgt2Queue", ["$log", "formHelper", "Groups","$state","entityManager",
    "SessionStore","groupCommons",
    function($log, formHelper, Groups,$state,entityManager,SessionStore,groupCommons){

        var listOptions= {
            itemCallback: function(item, index) {
                // This will not be called in case of selectable = true in definition
                $log.info(item);
                entityManager.setModel('Cgt2', {_request:item});
                $state.go("Page.Engine",{
                    pageName:"Cgt2",
                    pageId:null
                });
            },
            getItems: function(response, headers){
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [

                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    null
                ]
            },
            getActions: function(){
                return [

                ];
            }
        };
        var definition = groupCommons.getSearchDefinition('Stage05',listOptions);

        return {
            "id": "cgt2queue",
            "type": "search-list",
            "name": "Cgt2Queue",
            "title": "CGT 2 Queue",
            "subTitle": "",
            "uri":"Groups/CGT 2 Queue",
            offline: true,
            getOfflineDisplayItem: groupCommons.getOfflineDisplayItem(),
            getOfflinePromise: groupCommons.getOfflinePromise('Stage05'),
            initialize: function (model, form, formCtrl) {
                $log.info("CGT 2 Q got initialized");
            },
            definition: definition
        };
    }]);

irf.pageCollection.factory("Pages__Cgt3Queue", ["$log", "formHelper", "Groups","$state",
    "entityManager","groupCommons",
    function($log, formHelper, Groups,$state,entityManager,groupCommons){
        var listOptions= {
            itemCallback: function(item, index) {
                // This will not be called in case of selectable = true in definition
                $log.info(item);
                entityManager.setModel('Cgt3', {_request:item});
                $state.go("Page.Engine",{
                    pageName:"Cgt3",
                    pageId:null
                });
            },
            getItems: function(response, headers){
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [

                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    null
                ]
            },
            getActions: function(){
                return [

                ];
            }
        };
        var definition = groupCommons.getSearchDefinition('Stage06',listOptions);
        return {
            "id": "cgt3queue",
            "type": "search-list",
            "name": "Cgt3Queue",
            "title": "CGT 3 Queue",
            "subTitle": "",
            "uri":"Groups/CGT 3 Queue",
            offline: true,
            getOfflineDisplayItem: groupCommons.getOfflineDisplayItem(),
            getOfflinePromise: groupCommons.getOfflinePromise('Stage06'),
            initialize: function (model, form, formCtrl) {
                $log.info("CGT 3 Q got initialized");
            },
            definition: definition
        };
    }]);

irf.pageCollection.factory("Pages__GrtQueue", ["$log", "formHelper", "Groups","$state","entityManager",
    "SessionStore","groupCommons",
    function($log, formHelper, Groups,$state,entityManager,SessionStore,groupCommons){
        var listOptions= {
            itemCallback: function(item, index) {
                // This will not be called in case of selectable = true in definition
                $log.info(item);
                entityManager.setModel('Grt', {_request:item});
                $state.go("Page.Engine",{
                    pageName:"Grt",
                    pageId:null
                });
            },
            getItems: function(response, headers){
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [

                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    null
                ]
            },
            getActions: function(){
                return [

                ];
            }
        };
        var definition = groupCommons.getSearchDefinition('Stage07',listOptions);
        return {
            "id": "grtqueue",
            "type": "search-list",
            "name": "GrtQueue",
            "title": "GRT Queue",
            "subTitle": "",
            "uri":"Groups/GRT Queue",
            offline: true,
            getOfflineDisplayItem: groupCommons.getOfflineDisplayItem(),
            getOfflinePromise: groupCommons.getOfflinePromise('Stage07'),
            initialize: function (model, form, formCtrl) {
                $log.info("GRT Q got initialized");
            },
            definition: definition
        };
    }]);

irf.pageCollection.factory("Pages__DscQueue", ["$log", "formHelper", "Groups","$state","groupCommons",
    function($log, formHelper, Groups,$state,groupCommons){
        var listOptions= {
            itemCallback: function(item, index) {
                // This will not be called in case of selectable = true in definition
                $log.info(item);
                $state.go("Page.Engine",{
                    pageName:"GroupCRUD",
                    pageId:item.id,
                    pageData:{
                        intent:"DSC_CHECK"
                    }
                },{
                    reload: true, 
                    inherit: false,
                    notify: true
                });
            },
            getItems: function(response, headers){
                $log.error(response);
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [
                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    null
                ]
            },
            getActions: function(){
                return [

                ];
            }
        };
        var definition = groupCommons.getSearchDefinition('Stage03',listOptions);
        return {
        "id": "cgt1queue",
        "type": "search-list",
        "name": "DscQueue",
        "title": "DSC Queue",
        "subTitle": "",
        "uri":"Groups/DSC Queue",
        initialize: function (model, form, formCtrl) {
            $log.info("DSC Q got initialized");
        },
        definition: definition
    };
}]);

irf.pageCollection.factory("Pages__DscOverrideQueue", ["$log", "formHelper","PageHelper", "Groups","$state","irfProgressMessage",
    "groupCommons",
    function($log, formHelper,PageHelper,Groups,$state,irfProgressMessage,groupCommons){
    return {
        "id": "dscoverridequeue",
        "type": "search-list",
        "name": "DscOverrideQueue",
        "title": "DSC Override Requests",
        "subTitle": "",
        "uri":"Groups/DSC Override Requests",
        initialize: function (model, form, formCtrl) {
            $log.info("DSC Override got initialized");
        },
        definition: {
            title: "GROUPS_LIST",
            
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = Groups.getDscOverrideList({

                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    try {
                        return headers['x-total-count'];
                    }catch(err){
                        return 0;
                    }
                }
            },
            listOptions: {
                itemCallback: function(item, index) {
                    // This will not be called in case of selectable = true in definition
                    $log.info(item);
                },
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [

                        'URN : ' + item.jlgGroupMember.urnNo,
                        'Group ID : '+item.jlgGroup.id,
                        'Group Name : '+item.jlgGroup.groupName,
                        null
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "Do DSC Override",
                            desc: "",
                            fn: function(item, index){
                                PageHelper.showLoader();
                                irfProgressMessage.pop("dsc-override","Performing DSC Override");
                                var remarks = window.prompt("Enter Remarks","Test Remark");
                                if(remarks) {
                                    Groups.post({
                                        service: "overridedsc",
                                        urnNo: item.jlgGroupMember.urnNo,
                                        groupCode: item.jlgGroup.groupCode,
                                        productCode: item.jlgGroup.productCode,
                                        remarks: remarks
                                    }, {}, function (resp, headers) {
                                        $log.info(resp);
                                        PageHelper.hideLoader();
                                        irfProgressMessage.pop("dsc-override", "Override Succeeded", 2000);
                                        $state.go('Page.Engine', {
                                            pageName: "DscOverrideQueue"
                                        }, {
                                            reload: true,
                                            inherit: false,
                                            notify: true
                                        });

                                    }, function (resp) {
                                        $log.error(resp);
                                        PageHelper.hideLoader();
                                        irfProgressMessage.pop("dsc-override", "An error occurred. Please Try Again", 2000);
                                        PageHelper.showErrors(resp);
                                    });
                                }


                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //	return false;
                                //}
                                return true;
                            }
                        },
                        {
                            name: "View DSC Response",
                            desc: "",
                            fn: function(item, index){

                                groupCommons.showDSCData(item.jlgGroupMember.dscId);

                            },
                            isApplicable: function(item, index){

                                return true;
                            }
                        }
                    ];
                }
            }


        }
    };
}]);

/*
* @TODO : 1 CGT page for all CGTs, with CGT# as param
* */
irf.pageCollection.factory("Pages__Cgt1", ["$log","authService","entityManager","Groups","$state","$stateParams",
    "PageHelper","irfProgressMessage",'Utils',
    function($log,authService,entityManager,Groups,$state,$stateParams,PageHelper,irfProgressMessage,Utils) {
    return {
        "id": "cgt1",
        "type": "schema-form",
        "name": "Cgt1",
        "title": "CGT_1",
        "subTitle": "",
        "uri": "Groups/CGT 1",
        "offline":true,
        getOfflineDisplayItem: function(item, index){
            return [
                "Group ID : "+item.group.id,
                "Group Code : "+item.group.groupCode,
                "CGT Date : "+ item.group.cgtDate1
            ]
        },
        initialize: function (model, form, formCtrl) {
            $log.info(model);
            if(model._request==undefined || model._request==null){
                $state.go("Page.Engine", {pageName:"Cgt1Queue", pageId:null});
                return;
            }
            PageHelper.showLoader();
            irfProgressMessage.pop("cgt1-init","Loading... Please Wait...");
            model.group= model.group || {};


            model.group.cgtDate1 = model.group.cgtDate1 || Utils.getCurrentDate();
            model.group.id = model.group.id || model._request.id;
            model.group.groupCode = model.group.groupCode || model._request.groupCode;
            model.group.partnerCode = model.group.groupCode || model._request.partnerCode;
            model.group.productCode = model.group.productCode|| model._request.productCode;

            authService.getUser().then(function(data){
                model.group.cgt1DoneBy = data.login;
                PageHelper.hideLoader();
                $log.info("AfterLoad",model);
                irfProgressMessage.pop("cgt1-init","Load Complete",2000);
            },function(resp){
                $log.error(resp);
                PageHelper.hideLoader();
                irfProgressMessage.pop("cgt1-init","Oops, an error occurred",2000);
            });

            /*var groupId = $stateParams.pageId;
            Groups.getGroup({groupId:groupId},function(response,headersGetter){
                $log.info(response);

                model.group = _.cloneDeep(response);
                var date = new Date();
                var y = date.getFullYear();
                var m = (date.getMonth()+1);
                var d = date.getDate();
                m = (m.toString().length<2)?("0"+m):m;
                d = (d.toString().length<2)?("0"+d):d;

                model.group.cgtDate1 = y+"-"+m+"-"+d;

                var prom = authService.getUser().then(function(data){
                    model.group.cgt1DoneBy = data.login;
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("cgt1-init","Load Complete",2000);
                },function(resp){
                    $log.error(resp);
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("cgt1-init","Oops, an error occurred",2000);
                });


            },function(resp){
                $log.error(resp);
                PageHelper.hideLoader();
                irfProgressMessage.pop("cgt1-init","Oops, an error occurred",2000);

            });*/
        },
        form: [
            {
                "type":"box",
                "title":"CGT_1",
                "items":[
                    {
                        "key":"group.cgt1DoneBy",
                        "readonly":true
                    },
                    {
                        "key":"group.cgtDate1",
                        "type":"text",
                        "readonly":true

                    },
                    {
                        "key":"group.cgt1Latitude",
                        "title": "CGT_1_LOCATION",
                        "type":"geotag",
                        "latitude": "group.cgt1Latitude",
                        "longitude": "group.cgt1Longitude"
                    },
                    {
                        "key":"group.cgt1Photo",
                        "type":"file",
                        "fileType":"image/*",
                        "offline":true

                    },
                    {
                        "key":"group.cgt1Remarks",
                        "type":"textarea"
                    }

                ]
            },{
                "type":"actionbox",
                "items":[
                    {
                        "type": "save",
                        "title": "SAVE_OFFLINE",
                    },
                    {
                        "type":"submit",
                        "style":"btn-primary",
                        "title":"SUBMIT_CGT_1"
                    }
                ]
            }
        ],
        actions: {
            submit: function (model, form, formName) {

                model.enrollmentAction = 'PROCEED';
                if (form.$invalid){
                    irfProgressMessage.pop('cgt1-submit', 'Please fix your form', 5000);
                    return;
                }
                PageHelper.showLoader();
                irfProgressMessage.pop('cgt1-submit', 'Working...');
                PageHelper.clearErrors();
                //var reqData = _.cloneDeep(model);
                var reqData = {
                    "cgtDate": model.group.cgtDate1,
                    "cgtDoneBy": model.group.cgt1DoneBy,
                    "groupCode": model.group.groupCode,
                    "latitude": model.group.cgt1Latitude,
                    "longitude": model.group.cgt1Longitude,
                    "partnerCode": model.group.partnerCode,
                    "photoId": model.group.cgt1Photo,
                    "productCode": model.group.productCode,
                    "remarks": model.group.cgt1Remarks

                };
                var promise = Groups.post({service:'process',action:'cgt'},reqData,function(res){
                    console.debug(res);
                    PageHelper.hideLoader();
                    irfProgressMessage.pop('cgt1-submit', 'CGT 1 Updated. Proceed to CGT 2', 5000);
                    $state.go('Page.GroupDashboard',{
                        pageName:"GroupDashboard"
                    });

                },function(res){
                    PageHelper.hideLoader();
                    irfProgressMessage.pop('cgt1-submit', 'Oops. Some error.', 2000);
                    PageHelper.showErrors(res);

                });
            }
        },
        schema: function () {
            return Groups.getSchema().$promise;
        }
    }
}]);

irf.pageCollection.factory("Pages__Cgt2", ["$log","authService","Groups","$state","$stateParams","PageHelper",
    "irfProgressMessage",'Utils',
    function($log,authService,Groups,$state,$stateParams,PageHelper,irfProgressMessage,Utils) {
        return {
            "id": "cgt2",
            "type": "schema-form",
            "name": "Cgt2",
            "title": "CGT 2",
            "subTitle": "",
            "uri": "Groups/CGT 2",
            "offline":true,
            getOfflineDisplayItem: function(item, index){
                return [
                    "Group ID : "+item.group.id,
                    "Group Code : "+item.group.groupCode,
                    "CGT Date : "+ item.group.cgtDate2
                ]
            },
            initialize: function (model, form, formCtrl) {
                if(model._request==undefined || model._request==null){
                    $state.go("Page.Engine", {pageName:"Cgt2Queue", pageId:null});
                    return;
                }
                PageHelper.showLoader();
                irfProgressMessage.pop("cgt2-init","Loading... Please Wait...");
                model.group= model.group || {};


                model.group.cgtDate2 = model.group.cgtDate2 || Utils.getCurrentDate();
                model.group.id = model.group.id || model._request.id;
                model.group.groupCode = model.group.groupCode || model._request.groupCode;
                model.group.partnerCode = model.group.groupCode || model._request.partnerCode;
                model.group.productCode = model.group.productCode|| model._request.productCode;

                var prom = authService.getUser().then(function(data){
                    model.group.cgt2DoneBy = data.login;
                    PageHelper.hideLoader();
                    $log.info("AfterLoad",model);
                    irfProgressMessage.pop("cgt2-init","Load Complete",2000);
                },function(resp){
                    $log.error(resp);
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("cgt2-init","Oops, an error occurred",2000);
                });
                /*var groupId = $stateParams.pageId;
                Groups.getGroup({groupId:groupId},function(response,headersGetter){
                    console.warn(response);
                    /*model.group = {
                     id:response.id,
                     groupCode:response.groupCode,
                     partnerCode:response.partnerCode,
                     productCode:response.productCode

                     };
                    model.group = _.cloneDeep(response);
                    var date = new Date();
                    var y = date.getFullYear();
                    var m = (date.getMonth()+2);
                    var d = date.getDate();
                    m = (m.toString().length<2)?("0"+m):m;
                    d = (d.toString().length<2)?("0"+d):d;

                    model.group.cgtDate2 = y+"-"+m+"-"+d;

                    var prom = authService.getUser().then(function(data){
                        PageHelper.hideLoader();
                        model.group.cgt2DoneBy = data.login;
                        irfProgressMessage.pop("cgt2-init","Load Completed.",2000);
                    },function(resp){
                        PageHelper.hideLoader();
                        $log.error(resp);
                        irfProgressMessage.pop("cgt2-init","Oops, an error occurred",2000);
                    });


                },function(resp){
                    PageHelper.hideLoader();
                    $log.error(resp);
                    irfProgressMessage.pop("cgt2-init","Oops, an error occurred",2000);

                });*/
            },
            form: [
                {
                    "type":"box",
                    "title":"CGT_2",
                    "items":[
                        {
                            "key":"group.cgt2DoneBy",
                            "readonly":true
                        },
                        {
                            "key":"group.cgtDate2",
                            "type":"text",
                            "readonly":true

                        },
                        {
                            "key":"group.cgt2Latitude",
                            "title": "CGT_2_LOCATION",
                            "type":"geotag",
                            "latitude": "group.cgt2Latitude",
                            "longitude": "group.cgt2Longitude"
                        },
                        {
                            "key":"group.cgt2Photo",
                            "type":"file",
                            "fileType":"image/*",
                            "offline":true

                        },
                        {
                            "key":"group.cgt2Remarks",
                            "type":"textarea"
                        }

                    ]
                },{
                    "type":"actionbox",
                    "items":[
                        {
                            "type": "save",
                            "title": "SAVE_OFFLINE",
                        },
                        {
                            "type":"submit",
                            "style":"btn-primary",
                            "title":"SUBMIT_CGT_2"
                        }
                    ]
                }
            ],
            actions: {
                submit: function (model, form, formName) {

                    model.enrollmentAction = 'PROCEED';
                    if (form.$invalid){
                        irfProgressMessage.pop('cgt2-submit', 'Please fix your form', 5000);
                        return;
                    }
                    PageHelper.showLoader();
                    irfProgressMessage.pop('cgt2-submit', 'Working...');
                    PageHelper.clearErrors();
                    //var reqData = _.cloneDeep(model);
                    var reqData = {
                        "cgtDate": model.group.cgtDate2,
                        "cgtDoneBy": model.group.cgt2DoneBy,
                        "groupCode": model.group.groupCode,
                        "latitude": model.group.cgt2Latitude,
                        "longitude": model.group.cgt2Longitude,
                        "partnerCode": model.group.partnerCode,
                        "photoId": model.group.cgt2Photo,
                        "productCode": model.group.productCode,
                        "remarks": model.group.cgt2Remarks

                    };
                    var promise = Groups.post({service:'process',action:'cgt'},reqData,function(res){
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('cgt2-submit', 'CGT 2 Updated. Proceed to CGT 3.', 5000);
                        $state.go('Page.GroupDashboard',{
                            pageName:"GroupDashboard"
                        });

                    },function(res){
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('cgt2-submit', 'Oops. Some error.', 2000);
                        PageHelper.showErrors(res);

                    });
                }
            },
            schema: function () {
                return Groups.getSchema().$promise;
            }
        }
    }]);

irf.pageCollection.factory("Pages__Cgt3", ["$log","authService","Groups","$state","$stateParams",
    "PageHelper","irfProgressMessage",'Utils',
    function($log,authService,Groups,$state,$stateParams,PageHelper,irfProgressMessage,Utils) {
        return {
            "id": "cgt3",
            "type": "schema-form",
            "name": "Cgt3",
            "title": "CGT 3",
            "subTitle": "",
            "uri": "Groups/CGT 3",
            "offline":true,
            getOfflineDisplayItem: function(item, index){
                return [
                    "Group ID : "+item.group.id,
                    "Group Code : "+item.group.groupCode,
                    "CGT Date : "+ item.group.cgtDate3
                ]
            },
            initialize: function (model, form, formCtrl) {
                if(model._request==undefined || model._request==null){
                    $state.go("Page.Engine", {pageName:"Cgt3Queue", pageId:null});
                    return;
                }
                PageHelper.showLoader();
                irfProgressMessage.pop("cgt3-init","Loading... Please Wait...");

                model.group= model.group || {};

                model.group.cgtDate3 = model.group.cgtDate3 || Utils.getCurrentDate();
                model.group.id = model.group.id || model._request.id;
                model.group.groupCode = model.group.groupCode || model._request.groupCode;
                model.group.partnerCode = model.group.groupCode || model._request.partnerCode;
                model.group.productCode = model.group.productCode|| model._request.productCode;

                var prom = authService.getUser().then(function(data){
                    model.group.cgt3DoneBy = data.login;
                    PageHelper.hideLoader();
                    $log.info("AfterLoad",model);
                    irfProgressMessage.pop("cgt3-init","Load Complete",2000);
                },function(resp){
                    $log.error(resp);
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("cgt3-init","Oops, an error occurred",2000);
                });

                /*Groups.getGroup({groupId:groupId},function(response,headersGetter){
                    console.warn(response);
                    /*model.group = {
                     id:response.id,
                     groupCode:response.groupCode,
                     partnerCode:response.partnerCode,
                     productCode:response.productCode

                     };
                    model.group = _.cloneDeep(response);
                    var date = new Date();
                    var y = date.getFullYear();
                    var m = (date.getMonth()+3);
                    var d = date.getDate();
                    m = (m.toString().length<2)?("0"+m):m;
                    d = (d.toString().length<2)?("0"+d):d;

                    model.group.cgtDate3 = y+"-"+m+"-"+d;

                    var prom = authService.getUser().then(function(data){
                        model.group.cgt3DoneBy = data.login;
                        PageHelper.hideLoader();
                        irfProgressMessage.pop("cgt3-init","Load Completed.",2000);
                    },function(resp){
                        $log.error(resp);
                        PageHelper.hideLoader();
                        irfProgressMessage.pop("cgt3-init","Oops, an error occurred",2000);
                    });


                },function(resp){
                    $log.error(resp);
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("cgt3-init","Oops, an error occurred",2000);

                });*/
            },
            form: [
                {
                    "type":"box",
                    "title":"CGT_3",
                    "items":[
                        {
                            "key":"group.cgt3DoneBy",
                            "readonly":true
                        },
                        {
                            "key":"group.cgtDate3",
                            "type":"text",
                            "readonly":true

                        },
                        {
                            "key":"group.cgt3Latitude",
                            "title": "CGT_3_LOCATION",
                            "type":"geotag",
                            "latitude": "group.cgt3Latitude",
                            "longitude": "group.cgt3Longitude"
                        },
                        {
                            "key":"group.cgt3Photo",
                            "type":"file",
                            "fileType":"image/*",
                            "offline":true

                        },
                        {
                            "key":"group.cgt3Remarks",
                            "type":"textarea"
                        }

                    ]
                },{
                    "type":"actionbox",
                    "items":[
                        {
                            "type": "save",
                            "title": "SAVE_OFFLINE",
                        },
                        {
                            "type":"submit",
                            "style":"btn-primary",
                            "title":"SUBMIT_CGT_3"
                        }
                    ]
                }
            ],
            actions: {
                submit: function (model, form, formName) {

                    model.enrollmentAction = 'PROCEED';
                    if (form.$invalid){
                        irfProgressMessage.pop('cgt3-submit', 'Please fix your form', 5000);
                        return;
                    }
                    PageHelper.showLoader();
                    irfProgressMessage.pop('cgt3-submit', 'Working...');
                    PageHelper.clearErrors();
                    //var reqData = _.cloneDeep(model);
                    var reqData = {
                        "cgtDate": model.group.cgtDate3,
                        "cgtDoneBy": model.group.cgt3DoneBy,
                        "groupCode": model.group.groupCode,
                        "latitude": model.group.cgt3Latitude,
                        "longitude": model.group.cgt3Longitude,
                        "partnerCode": model.group.partnerCode,
                        "photoId": model.group.cgt3Photo,
                        "productCode": model.group.productCode,
                        "remarks": model.group.cgt3Remarks

                    };

                    var promise = Groups.post({service:'process',action:'cgt'},reqData,function(res){
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('cgt3-submit', 'CGT 3 Updated. Proceed to GRT.', 5000);
                        $state.go('Page.GroupDashboard',{
                            pageName:"GroupDashboard"
                        });

                    },function(res){
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('cgt3-submit', 'Oops. Some error.', 2000);
                        PageHelper.showErrors(res);

                    });
                }
            },
            schema: function () {
                return Groups.getSchema().$promise;
            }
        }
    }]);

/*
 * @TODO : 1 CGT page for all CGTs, with CGT# as param
 * */
irf.pageCollection.factory("Pages__Grt", ["$log","authService","Groups","LoanProcess","$state","$stateParams",
    "PageHelper","irfProgressMessage",'Utils',
    function($log,authService,Groups,LoanProcess,$state,$stateParams,PageHelper,irfProgressMessage,Utils) {
        return {
            "id": "grt",
            "type": "schema-form",
            "name": "Grt",
            "title": "GRT",
            "subTitle": "",
            "uri": "Groups/GRT",
            "offline":true,
            getOfflineDisplayItem: function(item, index){
                return [
                    "Group ID : "+item.group.id,
                    "Group Code : "+item.group.groupCode,
                    "GRT Date : "+ item.group.grtDate
                ]
            },
            initialize: function (model, form, formCtrl) {
                $log.info("I got initialized");
                if(model._request==undefined || model._request==null){
                    $state.go("Page.Engine", {pageName:"GrtQueue", pageId:null});
                    return;
                }
                PageHelper.showLoader();
                irfProgressMessage.pop("grt-init","Loading... Please Wait...");
                model.group= model.group || {};


                model.group.grtDate = model.group.grtDate || Utils.getCurrentDate();
                model.group.id = model.group.id || model._request.id;
                model.group.groupCode = model.group.groupCode || model._request.groupCode;
                model.group.partnerCode = model.group.partnerCode || model._request.partnerCode;
                model.group.productCode = model.group.productCode|| model._request.productCode;
                for(var i=1;i<18;i++){
                    model.group["udf"+i] = model.group["udf"+i] || false;
                }
                model.group.udfDate1 = model.group.udfDate1 || "";
                var prom = authService.getUser().then(function(data){
                    model.group.grtDoneBy = data.login;
                    PageHelper.hideLoader();
                    $log.info("AfterLoad",model);
                    irfProgressMessage.pop("grt-init","Load Complete",2000);
                },function(resp){
                    $log.error(resp);
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("grt-init","Oops, an error occurred",2000);
                });
                /*Groups.getGroup({groupId:groupId},function(response,headersGetter){

                    /*model.group = {
                     id:response.id,
                     groupCode:response.groupCode,
                     partnerCode:response.partnerCode,
                     productCode:response.productCode

                     };
                    model.group = _.cloneDeep(response);
                    var date = new Date();
                    var y = date.getFullYear();
                    var m = (date.getMonth()+1);
                    var d = date.getDate();
                    m = (m.toString().length<2)?("0"+m):m;
                    d = (d.toString().length<2)?("0"+d):d;

                    model.group.grtDate = y+"-"+m+"-"+d;

                    var prom = authService.getUser().then(function(data){
                        model.group.grtDoneBy = data.login;
                        PageHelper.hideLoader();
                        irfProgressMessage.pop("grt-init","Load Completed.",2000);
                    },function(resp){
                        $log.error(resp);
                        PageHelper.hideLoader();
                        irfProgressMessage.pop("grt-init","Oops, an error occurred",2000);
                    });


                },function(resp){
                    $log.error(resp);
                    PageHelper.hideLoader();
                    irfProgressMessage.pop("grt-init","Oops, an error occurred",2000);

                });*/
            },
            form: [
                {
                    "type":"box",
                    "title":"GRT",
                    "items":[
                        {
                            "key":"group.grtDoneBy",
                            "readonly":true
                        },
                        {
                            "key":"group.grtDate",
                            "type":"text",
                            "readonly":true

                        },
                        {
                            "key":"group.grtLatitude",
                            "title": "GRT_LOCATION",
                            "type":"geotag",
                            "latitude": "group.grtLatitude",
                            "longitude": "group.grtLongitude"
                        },
                        {
                            "key":"group.grtPhoto",
                            "type":"file",
                            "fileType":"image/*",
                            "offline":true

                        },
                        {
                            "key":"group.grtRemarks",
                            "type":"textarea"
                        },
                        {
                            "key":"group.udfDate1",
                            "type":"date"
                        },
                        {
                            "key":"group.udf1"
                        },
                        {
                            "key":"group.udf2"
                        },
                        {
                            "key":"group.udf3"
                        },
                        {
                            "key":"group.udf4"
                        },
                        {
                            "key":"group.udf5"
                        },
                        {
                            "key":"group.udf6"
                        }


                    ]
                },{
                    "type":"actionbox",
                    "items":[
                        {
                            "type": "save",
                            "title": "SAVE_OFFLINE",
                        },
                        {
                            "type":"submit",
                            "style":"btn-primary",
                            "title":"SUBMIT_GRT"
                        }
                    ]
                }
            ],
            actions: {
                submit: function (model, form, formName) {

                    model.enrollmentAction = 'PROCEED';
                    if (form.$invalid){
                        irfProgressMessage.pop('grt-submit', 'Please fix your form', 5000);
                        return;
                    }
                    PageHelper.showLoader();
                    irfProgressMessage.pop('grt-submit', 'Working...');
                    PageHelper.clearErrors();
                    //var reqData = _.cloneDeep(model);
                    var reqData = {
                        "grtDate": model.group.grtDate,
                        "grtDoneBy": model.group.grtDoneBy,
                        "groupCode": model.group.groupCode,
                        "latitude": model.group.grtLatitude,
                        "longitude": model.group.grtLongitude,
                        "partnerCode": model.group.partnerCode,
                        "photoId": model.group.grtPhoto,
                        "productCode": model.group.productCode,
                        "remarks": model.group.grtRemarks,
                        "udfDate1":model.group.udfDate1,
                        "udf1":model.group.udf1,
                        "udf2":model.group.udf2,
                        "udf3":model.group.udf3,
                        "udf4":model.group.udf4,
                        "udf5":model.group.udf5,
                        "udf6":model.group.udf6,
                        

                    };

                    var promise = Groups.post({service:'process',action:'grt'},reqData,function(res){

                        irfProgressMessage.pop('grt-submit', 'GRT Updated, activating loan account');
                        
                        LoanProcess.get({action:'groupLoans',groupCode:model.group.groupCode,partner:model.group.partnerCode},function(resp,header){
                            PageHelper.hideLoader();
                            irfProgressMessage.pop('grt-submit', 'GRT Updated, Loan Account Activated. Proceed to Applications Pending screen.',5000);
                            $state.go('Page.GroupDashboard',{
                                pageName:"GroupDashboard"
                            });

                        },function(res){
                            PageHelper.hideLoader();
                            irfProgressMessage.pop('grt-submit', 'An error occurred while activating loan account. Please Try from Applications Pending Screen',2000);
                            var data = res.data;
                            var errors = [];
                            if (data.errors){
                                _.forOwn(data.errors, function(keyErrors, key){
                                    var keyErrorsLength = keyErrors.length;
                                    for (var i=0;i<keyErrorsLength; i++){
                                        var error  = {"message": "<strong>" + key  + "</strong>: " + keyErrors[i]};
                                        errors.push(error);
                                    }
                                })
                                PageHelper.setErrors(errors);
                            }
                            $state.go('Page.GroupDashboard',{
                                pageName:"GroupDashboard"
                            });

                        });



                    },function(res){
                        PageHelper.hideLoader();
                        irfProgressMessage.pop('grt-submit', 'Oops. Some error.');
                        PageHelper.showErrors(res);


                    });
                }
            },
            schema: function () {
                return Groups.getSchema().$promise;
            }
        }
    }]);

irf.pageCollection.factory("Pages__ApplicationPendingQueue", ["$log", "formHelper", "Groups","$state",
    "SessionStore","groupCommons",
    function($log, formHelper, Groups,$state,SessionStore,groupCommons){
        var listOptions= {
            itemCallback: function(item, index) {
                // This will not be called in case of selectable = true in definition
                $log.info(item);
                $state.go("Page.Engine",{
                    pageName:"GroupCRUD",
                    pageId:item.id,
                    pageData:{
                        intent:"APP_DWNLD"
                    }
                },{
                    reload: true,
                    inherit: false,
                    notify: true
                });
            },
            getItems: function(response, headers){
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [

                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    null
                ]
            },
            getActions: function(){

                return [

                ];
            }
        };

        var definition = groupCommons.getSearchDefinition('StageAP',listOptions);
        return {
            "id": "applicationpendingqueue",
            "type": "search-list",
            "name": "ApplicationPendingQueue",
            "title": "Application Pending Queue",
            "subTitle": "",
            "uri":"Groups/Application Pending Queue",
            initialize: function (model, form, formCtrl) {
                $log.info("AP Q got initialized");
            },
            definition: definition
        };
    }]);

irf.pageCollection.factory("Pages__JLGDisbursementQueue", ["$log", "formHelper", "Groups","$state","groupCommons",
    function($log, formHelper, Groups,$state,groupCommons){
        var listOptions={
            itemCallback: function(item, index) {
                // This will not be called in case of selectable = true in definition
                $log.info(item);
                $state.go("Page.Engine",{
                    pageName:"GroupDisbursement",
                    pageId:item.partnerCode+"."+item.groupCode
                });
            },
            getItems: function(response, headers){
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [

                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    null
                ]
            },
            getActions: function(){
                return [

                ];
            }
        };
        var definition = groupCommons.getSearchDefinition('Stage08',listOptions);
        return {
            "id": "JLGDisbursementQueue",
            "type": "search-list",
            "name": "JLGDisbursementQueue",
            "title": "GROUP_LOAN_DISBURSEMENT_QUEUE",
            "subTitle": "",
            initialize: function (model, form, formCtrl) {
                $log.info("JLGDisbursementQueue got initialized");
            },
            definition: definition
        };
    }]);

irf.pageCollection.factory("Pages__CentrePaymentCollection",
["$log", "$q", "$timeout", "SessionStore", "$state", "entityManager", "formHelper",
"$stateParams", "LoanProcess", "irfProgressMessage", "PageHelper", "irfStorageService",
"$filter", "elementsUtils", "Utils","authService", "$rootScope",
function($log, $q, $timeout, SessionStore, $state, entityManager, formHelper,
	$stateParams, LoanProcess, PM, PageHelper, StorageService,
	$filter, elementsUtils, Utils,authService, $rootScope){

	return {
		"id": "CentrePaymentCollection",
		"type": "schema-form",
		"name": "CentrePaymentCollection",
		"title": "CENTRE_PAYMENT_COLLECTION",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model._offlineKey = formCtrl.$name + "__" + SessionStore.getBranch();
			model._storedData = StorageService.retrieveJSON(model._offlineKey);
			if (!model.$$STORAGE_KEY$$) {
				model.collected = 0;
				$timeout(function() {
					model.groupCollectionDemand = [];
				});
			} else {
				formCtrl.disabled = true;
				model._mode = 'VIEW';
			}
			if (model._storedData && model._storedData.collectionDate) {
				var cDate = moment(model._storedData.collectionDate);
				model._storedData.formatedCollectionDate = SessionStore.getFormatedDate(cDate);
				if (!cDate.startOf('day').isSame(moment(new Date()).startOf('day')))
					model._storedData.expired = true;
				if (!model.$$STORAGE_KEY$$) {
					model.collectionDemandSummary.demandDate = model._storedData.collectionDate;
				}
			}
			$log.info("I got initialized");
		},
		offline: true,
		getOfflineDisplayItem: function(item, index){
			return [
				'Centre: '+item["collectionDemandSummary"]["centre"] + ' - ' + item["collectionDemandSummary"]["demandDate"],
				'Total: '+item["totalToBeCollected"],
				'Collected: '+item["collected"]
			]
		},
		form: [{
			"type": "box",
			"title": "CENTRE",
			//"readonly": true,
			"items": [
				{
					"type": "help",
					"helpExpr": "!model._storedData"
					+"?('SAVE_DATA_UNAVAILABLE'|translate)"
					+":(model._storedData.expired"
						+"?('SAVED_DATA_EXPIRED'|translate)"
						+":(model._storedData.collectionBranch + ' ' + ('COLLECTION_INFO_DOWNLOADED'|translate))"
					+")"
				},
				{
					"type": "button",
					"notitle": true,
					"fieldHtmlClass": "btn-block",
					"title": "DL_SAVE_BRANCH_COLLECTION",
					"condition": "!model._storedData || model._storedData.expired",
					"onClick": function(model, form, formName){
						$log.info("Downloading branch Collection data..");
						PageHelper.showLoader();
						PM.pop('collection-demand', "Downloading Collection Demands...", 2000);
						var collectionBranch = SessionStore.getBranch();
						var collectionDate = moment(new Date()).format('YYYY-MM-DD');
						authService.getUser().then(function(data){
							LoanProcess.collectionDemandSearch(
								{branch:collectionBranch,userId:data.login, demandDate:collectionDate},
								function(response){
									model._storedData = {
										collectionDemands: response.body,
										collectionBranch: collectionBranch,
										collectionDate: collectionDate

									};
									model.collectionDemandSummary.centre = null;
									$log.info(model._storedData);
									setTimeout(function() {
										model.groupCollectionDemand = [];
									});
									StorageService.storeJSON(model._offlineKey, model._storedData);
									PageHelper.hideLoader();
									PM.pop('collection-demand', "Collection Demands Saved Successfully", 2000);
								},
								function(errorResponse){
									PageHelper.hideLoader();
									PM.pop('collection-demand', "Couldn't fetch branch Collection Demands", 5000);
								}
							);

						},function(resp){
							PageHelper.hideLoader();
							PM.pop('collection-demand', "Couldn't fetch branch Collection Demands", 5000);
						});

					}
				},
				{
					"type": "fieldset",
					"title": "CHOOSE_CENTRE",
					"condition": "model._storedData && !model._storedData.expired",
					"items": [
						{
							"key":"collectionDemandSummary.demandDate",
							"type": "date",
							"readonly": true
						},
						{
							"key":"collectionDemandSummary.centre",
							"type":"select",
							"enumCode":"centre",
							"filter": {
								"field1 as branch": "model._storedData.collectionBranch"
							},
							"condition": "model._mode!=='VIEW'",
							"onChange": function(modelValue, form, model) {
								model.totalToBeCollected = 0;
								model.collected = 0;
								model.groupCollectionDemand = [];
								var collectionDemands = model._storedData.collectionDemands;
								var centreName = $filter('filter')(form.titleMap, {value:modelValue}, true)[0].name;
								model._centreName = centreName;
								var centreDemands = $filter('filter')(collectionDemands, {centre:centreName}, true);
								var totalToBeCollected = 0;
								var groups = {};
								_.each(centreDemands, function(v,k){
									v.amountPaid = v.installmentAmount;
									totalToBeCollected += v.installmentAmount;
									if (!groups[v.groupCode]) groups[v.groupCode] = [];
									groups[v.groupCode].push(v);
								});
								_.each(groups, function(v,k){
									var d = {groupCode:k, collectiondemand:v};
									model.groupCollectionDemand.push(d);
								});
								model.totalToBeCollected = model.collected = totalToBeCollected;
							}
						},
						{
							"key":"collectionDemandSummary.centre",
							"type":"select",
							"enumCode":"centre",
							"filter": {
								"field1 as branch": "model._storedData.collectionBranch"
							},
							"condition": "model._mode==='VIEW'",
							"readonly": true
						},
						{
							"key": "collectionDemandSummary.photoOfCentre",
							"type": "file",
							"fileType": "image/*",
							"offline": true
						},
						{
							"key": "collectionDemandSummary.latitude",
							"title": "CENTRE_LOCATION",
							"type": "geotag",
							"latitude": "collectionDemandSummary.latitude",
							"longitude": "collectionDemandSummary.longitude",
							"condition": "model._mode!=='VIEW'"
						},
						{
							"key": "collectionDemandSummary.latitude",
							"title": "CENTRE_LOCATION",
							"type": "geotag",
							"latitude": "collectionDemandSummary.latitude",
							"longitude": "collectionDemandSummary.longitude",
							"condition": "model._mode==='VIEW'",
							"readonly": true
						}
					]
				}
			]
		},{
			"type": "box",
			"title": "GROUPS",
			"condition": "model._mode!=='VIEW' && model._storedData && !model._storedData.expired && model.collectionDemandSummary.centre",
			"items": [{
				"key":"collectionDemandSummary.allAttendance",
				"fullwidth": true,
				"onChange": function(modelValue, form, model) {
					_.each(model.groupCollectionDemand, function(value, key){
						_.each(value.collectiondemand, function(v,k){
							v.attendance = modelValue;
						});
					});
				}
			},
			{
				"key": "groupCollectionDemand",
				"add": null,
				"remove": null,
				"titleExpr": "form.title + ' - ' + model.groupCollectionDemand[arrayIndex].groupCode",
				"items": [
					{
						"key": "groupCollectionDemand[].collectiondemand",
						"add": null,
						"remove": null,
						"view": "fixed",
						"fieldHtmlClass": "no-border",
						"items": [
							{
								"type": "section",
								"htmlClass": "row",
								"items": [{
									"type": "section",
									"htmlClass": "col-xs-5",
									"items": [{
										"key": "groupCollectionDemand[].collectiondemand[].customerName",
										"readonly": true,
										"notitle": true
									}]
								},{
									"type": "section",
									"htmlClass": "col-xs-5",
									"items": [{
										"key": "groupCollectionDemand[].collectiondemand[].amountPaid",
										"type": "amount",
										"notitle": true,
										"onChange": function(modelValue, form, model){
											var collected = 0;
											var l1 = model.groupCollectionDemand.length;
											for(i=0;i<l1;i++){
												var l2=model.groupCollectionDemand[i].collectiondemand.length;
												for(j=0;j<l2;j++){
													collected += Number(model.groupCollectionDemand[i].collectiondemand[j].amountPaid);
												}
											}
											model.collected = collected;
										}
									}]
								},{
									"type": "section",
									"htmlClass": "col-xs-2",
									"items": [{
										"key": "groupCollectionDemand[].collectiondemand[].attendance",
										"notitle": true
									}]
								}]
							}
						]
					}
				]
			}]
		},{
			"type": "box",
			"title": "GROUPS",
			"condition": "model._mode==='VIEW'",
			"readonly": true,
			"items": [{
				"key":"collectionDemandSummary.allAttendance",
				"fullwidth": true
			},
			{
				"key": "groupCollectionDemand",
				"add": null,
				"remove": null,
				"titleExpr": "form.title + ' - ' + model.groupCollectionDemand[arrayIndex].groupCode",
				"items": [
					{
						"key": "groupCollectionDemand[].collectiondemand",
						"add": null,
						"remove": null,
						"view": "fixed",
						"fieldHtmlClass": "no-border",
						"items": [
							{
								"type": "section",
								"htmlClass": "row",
								"items": [{
									"type": "section",
									"htmlClass": "col-xs-5",
									"items": [{
										"key": "groupCollectionDemand[].collectiondemand[].customerName",
										"readonly": true,
										"notitle": true
									}]
								},{
									"type": "section",
									"htmlClass": "col-xs-5",
									"items": [{
										"key": "groupCollectionDemand[].collectiondemand[].amountPaid",
										"type": "amount",
										"notitle": true,
										"onChange": function(modelValue, form, model){
											var collected = 0;
											var l1 = model.groupCollectionDemand.length;
											for(i=0;i<l1;i++){
												var l2=model.groupCollectionDemand[i].collectiondemand.length;
												for(j=0;j<l2;j++){
													collected += Number(model.groupCollectionDemand[i].collectiondemand[j].amountPaid);
												}
											}
											model.collected = collected;
										}
									}]
								},{
									"type": "section",
									"htmlClass": "col-xs-2",
									"items": [{
										"key": "groupCollectionDemand[].collectiondemand[].attendance",
										"notitle": true
									}]
								}]
							}
						]
					}
				]
			}]
		},{
			"type": "box",
			"title": "COLLECTION",
			"condition": "model._storedData && !model._storedData.expired && model.collectionDemandSummary.centre",
			"items": [
				{
					"key": "totalToBeCollected",
					"title": "TO_COLLECT",
					"type": "amount",
					"readonly": true
				},
				{
					"key": "collected",
					"title": "COLLECTED",
					"type": "amount",
					"readonly": true
				},
				{
					"type": "fieldset",
					"title": "DENOMINATIONS",
					"condition": "model._mode!=='VIEW'",
					"items": [{
						"type": "section",
						"htmlClass": "row",
						"items": [{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationThousand",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationFiveHundred",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationHundred",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						}]
					},{
						"type": "section",
						"htmlClass": "row",
						"items": [{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationFifty",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationTwenty",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationTen",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						}]
					},{
						"type": "section",
						"htmlClass": "row",
						"items": [{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationFive",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationTwo",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationOne",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						}]
					},
					{
						key:"collectionDemandSummary._denominationTotal",
						title:"TOTAL",
						"type": "amount",
						readonly:true
					}]
				},
				{
					"type": "fieldset",
					"title": "DENOMINATIONS",
					"condition": "model._mode==='VIEW'",
					"readonly": true,
					"items": [{
						"type": "section",
						"htmlClass": "row",
						"items": [{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationThousand",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationFiveHundred",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationHundred",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						}]
					},{
						"type": "section",
						"htmlClass": "row",
						"items": [{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationFifty",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationTwenty",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationTen",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						}]
					},{
						"type": "section",
						"htmlClass": "row",
						"items": [{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationFive",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationTwo",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						},{
							"type": "section",
							"htmlClass": "col-xs-4",
							"items": [{
								key:"collectionDemandSummary.denominationOne",
								onChange:"actions.valueOfDenoms(model,form)"
							}]
						}]
					},
					{
						key:"collectionDemandSummary._denominationTotal",
						title:"TOTAL",
						"type": "amount",
						readonly:true
					}]
				}
			]
		},{
			"type": "actionbox",
			"items": [{
				"type": "save",
				"title": "SAVE_CENTRE_COLLECTION"
			},{
				"type": "submit",
				"title": "SUBMIT"
			}]
		}],
		actions: {

			valueOfDenoms : function(model,form){

				var thousands = 1000*parseInt(model.collectionDemandSummary.denominationThousand,10);
				var fivehundreds = 500*parseInt(model.collectionDemandSummary.denominationFiveHundred,10);
				var hundreds = 100*parseInt(model.collectionDemandSummary.denominationHundred,10);

				var fifties = 50*parseInt(model.collectionDemandSummary.denominationFifty,10);
				var twenties = 20*parseInt(model.collectionDemandSummary.denominationTwenty,10);
				var tens = 10*parseInt(model.collectionDemandSummary.denominationTen,10);

				var fives = 5*parseInt(model.collectionDemandSummary.denominationFive,10);
				var twos = 2*parseInt(model.collectionDemandSummary.denominationTwo,10);
				var ones = parseInt(model.collectionDemandSummary.denominationOne,10);

				var denominationTotal = 0;

				if(!isNaN(thousands)) denominationTotal+=thousands;
				if(!isNaN(fivehundreds)) denominationTotal+=fivehundreds;
				if(!isNaN(hundreds)) denominationTotal+=hundreds;

				if(!isNaN(fifties)) denominationTotal+=fifties;
				if(!isNaN(twenties)) denominationTotal+=twenties;
				if(!isNaN(tens)) denominationTotal+=tens;

				if(!isNaN(fives)) denominationTotal+=fives;
				if(!isNaN(twos)) denominationTotal+=twos;
				if(!isNaN(ones)) denominationTotal+=ones;
				model.collectionDemandSummary._denominationTotal = denominationTotal;
				return (denominationTotal===model.collected);
			},
			print: function(model){
				console.log(model);
				var groupDemand = model.groupCollectionDemand;
				var summary = model.collectionDemandSummary;
				var printData = [
					{
						"bFont": 2,
						"text": "SAIJA FINANCE PVT. LTD",
						"style": {
							center: true
						}
					},
					{
						"bFont": 1,
						"text": "RECIEPT",
						"style": {
							"center": true
						}
					},
					{
						"bFont": 3,
						"text": "No: <Receipt No here>"
					},
					{
						"bFont": 3,
						"text": "Mr/Mrs. <Group Leader Name Here>"
					},
					{
						"bFont": 3,
						"text": "Group No: <Group No here>"
					},
					{
						"bFont": 3,
						"text": "Group Name: <Group Name here>"
					},
					{
						"bFont": 3,
						"text": ""
					},
					{
						"bFont": 4,
						"text": "Received " + model.collected + " as Loan Installment."
					},
					{
						"bFont": 1,
						"text": ""
					},
					{
						"bFont": 1,
						"text": "1000  x" + summary.denominationThousand
					},
					{
						"bFont": 1,
						"text": "500   x" + summary.denominationFiveHundred
					},
					{
						"bFont": 1,
						"text": "100   x" + summary.denominationHundred
					},
					{
						"bFont": 2,
						"text": "Total Rs. " + summary._denominationTotal
					},
					{
						"bFont": 2,
						"text": ""
					},
					{
						"bFont": 2,
						"text": ""
					},
					{
						"bFont": 3,
						"text": "Group Head Sign  Local Representative Sign"
					}

				]
				var printObj = {
					"data": printData
				};

				return;
			},
			preSave: function(model, formCtrl) {
				/*$rootScope.$broadcast('schemaFormValidate');
				if (formCtrl && formCtrl.$invalid) {
					irfProgressMessage.pop('form-error', 'Your form have errors. Please fix them.',5000);
					return;
				}*/
				if (!(model._storedData && !model._storedData.expired && model.collectionDemandSummary.centre)) {
					PM.pop('collection-demand', 'Demand not avilable / Centre is mandatory', 5000);
					return;
				}
				if (!model.collectionDemandSummary.latitude) {
					PM.pop('collection-demand', 'Centre location is mandatory', 5000);
					return;
				}
				if (!(model.collectionDemandSummary.photoOfCentre || model.$$OFFLINE_FILES$$.collectionDemandSummary$photoOfCentre.data)) {
					PM.pop('collection-demand', 'Centre Photo is mandatory', 5000);
					return;
				}
				if(!this.valueOfDenoms(model)) {
					PM.pop('collection-demand', 'Denomination Sum Does not Match Collected Amount',5000);
					return;
				}

				var deferred = $q.defer();
				var fdate = moment(model.collectionDemandSummary.demandDate).format('YYYY-MM-DD');
				var skey = model.collectionDemandSummary.centre + fdate;
				var off = StorageService.getJSON('CentrePaymentCollection', skey);
				if (!model.$$STORAGE_KEY$$ && _.isObject(off) && !_.isEmpty(off)) {
					PM.pop('collection-demand', 'Collection already saved. Cannot process again.', 5000);
					return;
				}
				if (_.isObject(off) && !_.isEmpty(off)) {
					Utils.confirm(model.collectionDemandSummary.centre+' Demand for '+fdate+' already saved. Do you want to overwrite?', 'Demand overwrite!').then(function(){
						model._storedData = null;
						model.$$STORAGE_KEY$$ = skey;
						deferred.resolve();
					});
				} else {
					model._storedData = null;
					model.$$STORAGE_KEY$$ = skey;
					deferred.resolve();
				}
				return deferred.promise;
			},
			submit: function(model, formCtrl, formName) {
				$log.info("formCtrl.$valid: " + formCtrl.$valid);

				console.warn(model);
				if(!this.valueOfDenoms(model)) {
					PM.pop('collection-demand', 'Denomination Sum Does not Match Collected Amount',5000);
					return;
				}
				if (formCtrl.$valid) {

					var cds = model.collectionDemandSummary;
					var gcd = model.groupCollectionDemand;
					var cd = [];
					if (cds && gcd && gcd.length) {
						cds.demandDate = moment(cds.demandDate).format('YYYY-MM-DD') + "T00:00:00Z";
						_.each(gcd, function(group, gk){
							_.each(group.collectiondemand, function(v,k){
								cd.push(v);
							});
						});

						var requestObj = {
							collectionDemandSummary: _.clone(cds),
							collectionDemands: _.clone(cd)
						};
						requestObj.collectionDemandSummary.centre = model._centreName;
						$log.info(requestObj);
						PM.pop('collection-demand', 'Submitting...');
						LoanProcess.collectionDemandUpdate(requestObj,
							function(response){
								$log.info(response);
								PM.pop('collection-demand', 'Collection Submitted Successfully', 3000);
							},
							function(errorResponse){
								$log.error(errorResponse);
								PM.pop('collection-demand', 'Oops. Some error.', 2000);
								PageHelper.showErrors(errorResponse);
							});
					} else {
						PM.pop('collection-demand', 'Collection demand missing...');
					}
				}
			}
		},
		schema: {
			"type": "object",
			"properties": {
				"collectionDemandSummary": {
					"type": "object",
					"required": ["centre", "latitude", "longitude", "photoOfCentre"],
					"properties": {
						"centre": {
							"title": "CENTRE",
							"type": "string"
						},
						"allAttendance": {
							"title": "ALL_ATTENDANCE",
							"type": "boolean"
						},
						"demandDate": {
							"title": "DEMAND_DATE",
							"type": "string"
						},
						"latitude": {
							"type": "string"
						},
						"langitude": {
							"type": "string"
						},
						"photoOfCentre": {
							"type": "string",
							"title": "CENTRE_PHOTO",
							"category": "Collection",
							"subCategory": "PHOTOOFCENTRE"
						},
						"denominationThousand": {
							"type": "integer",
							"title": "1000 x"
						},
						"denominationFiveHundred": {
							"type": "integer",
							"title": "500 x"
						},
						"denominationHundred": {
							"type": "integer",
							"title": "100 x"
						},
						"denominationFifty": {
							"type": "integer",
							"title": "50 x"
						},
						"denominationTwenty": {
							"type": "integer",
							"title": "20 x"
						},
						"denominationTen": {
							"type": "integer",
							"title": "10 x"
						},
						"denominationFive": {
							"type": "integer",
							"title": "5 x"
						},
						"denominationTwo": {
							"type": "integer",
							"title": "2 x"
						},
						"denominationOne": {
							"type": "integer",
							"title": "1 x"
						}
					}
				},
				"groupCollectionDemand": {
					"type": "array",
					"title": "Group",
					"items": {
						"type": "object",
						"properties": {
							"groupCode": {
								"type": "string",
								"title": "GROUP_CODE"
							},
							"collectiondemand": {
								"type": "array",
								"title": "MEMBER",
								"items": {
									"type": "object",
									"properties": {
										"customerId": {
											"type": "string"
										},
										"branch": {
											"type": "string",
											"title": "BRANCH"
										},
										"accountNumber": {
											"type": "string",
											"title": "ACCOUNT_NO"
										},
										"customerName": {
											"type": "string",
											"title": "CUSTOMER_NAME"
										},
										"groupCode": {
											"type": "string",
											"title": "GROUP_CODE"
										},
										"demandDate": {
											"type": "string",
											"title": "DEMAND_DATE"
										},
										"installmentAmount": {
											"type": "number",
											"title": "INSTALLMENT_AMOUNT"
										},
										"fees": {
											"type": "number",
											"title": "FEES"
										},
										"totalToBeCollected": {
											"type": "number",
											"title": "TOTAL_TO_BE_COLLECTED"
										},
										"amountPaid": {
											"type": "number",
											"title": "AMOUNT_PAID"
										},
										"attendance": {
											"type": "boolean",
											"title": "ATTENDANCE"
										},
										"mode": {
											"type": "string",
											"title": "PAYMENT_MODE"
										},
										"centre": {
											"type": "string",
											"title": "CENTRE"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
}]);

irf.pageCollection.factory("Pages__GroupDisbursement",
    ["$log", "$q", "$timeout", "SessionStore", "$state", "entityManager", "formHelper", "$stateParams", "LoanAccount", "LoanProcess", "irfProgressMessage", "PageHelper", "irfStorageService", "$filter","Groups", "AccountingUtils", "Enrollment", "Files", "elementsUtils",
        function ($log, $q, $timeout, SessionStore, $state, entityManager, formHelper, $stateParams, LoanAccount, LoanProcess, irfProgressMessage, PageHelper, StorageService, $filter, Groups, AccountingUtils, Enrollment, Files, elementsUtils) {
            return {
                "id": "GroupDisbursement",
                "type": "schema-form",
                "name": "GroupDisbursement",
                "title": "GROUP_LOAN_DISBURSEMENT",
                "subTitle": "",
                initialize: function (model, form, formCtrl) {
                    $log.info("I got initialized");
                    PageHelper.showLoader();
                    irfProgressMessage.pop('group-disbursement', 'Loading Disbursement Details');
                    //PageHelper
                    var groupInfo = $stateParams.pageId.split('.');
                    var partnerCode = groupInfo[0];
                    var groupCode = groupInfo[1];
                    $log.info("Group Code ::" + groupCode + "\nPartner Code::" + partnerCode);
                    var promise = Groups.getDisbursementDetails({partnerCode: partnerCode, groupCode: groupCode}).$promise;
                    promise.then(function (data) { /* SUCCESS */
                            /* Loop data to derive final disbursement amounts */
                            for (var i = 0; i < data.length; i++) {
                                var account = data[i];
                                var totalFeeAmount = 0;
                                if (account && account['fees']) {
                                    for (var j = 0; j < account['fees'].length; j++) {
                                        var fee = parseFloat(account['fees'][j]['amount1']);
                                        totalFeeAmount = totalFeeAmount + fee;
                                    }
                                }
                                var disburseAmount = parseFloat(account['amount']);
                                account['totalFeeAmount'] = AccountingUtils.formatMoney(totalFeeAmount);
                                account['finalDisbursementAmount'] = AccountingUtils.formatMoney(disburseAmount - totalFeeAmount);
                            }
                            model.disbursements = data;

                            irfProgressMessage.pop('group-disbursement', 'Loading Group Details');
                            Groups.search({groupCode: groupCode, partner: partnerCode},
                                function (res) {
                                    if (res.body.length > 0) {
                                        group = res.body[0];
                                        model.group = group;
                                    }
                                    PageHelper.hideLoader();
                                    irfProgressMessage.pop('group-disbursement', 'Done.', 2000);
                                },
                                function(res){
                                    PageHelper.hideLoader();
                                    irfProgressMessage.pop('group-disbursement', 'Error loading group details.', 2000);
                                }
                            )
                        }, function (resData) {
                            PageHelper.hideLoader();
                            irfProgressMessage.pop('group-disbursement', 'Error loading disbursement details.', 2000);
                        })

                },
                offline: false,
                form: [
                    {
                        "type":"box",
                        "title":"ACCOUNTS",
                        "items":[
                            {
                                "type": "fieldset",
                                "title": "ACCOUNTS",
                                "items": [
                                    {
                                        key: "disbursements",
                                        type: "array",
                                        titleExpr: "'URN: ' + model.disbursements[arrayIndex].urnNo",
                                        remove:null,
                                        add:null,
                                        items: [
                                            {
                                                condition: "model.disbursements[arrayIndex].disbursementDate!=null",
                                                type: "text",
                                                title: "DISBURSED_AT",
                                                key: "disbursements[].disbursementDate"
                                            },
                                            {
                                                type: "fieldset",
                                                title: "DISBURSEMENT_DETAILS",
                                                condition: "model.disbursements[arrayIndex].disbursementDate==null",
                                                items: [
                                                    {
                                                        "key":"disbursements[].accountId",
                                                        "readonly": true
                                                    },
                                                    {
                                                        "key":"disbursements[].amount",
                                                        "readonly": true
                                                    },
                                                    {
                                                        "type": "fieldset",
                                                        "title": "FEES",
                                                        "items": [
                                                            {
                                                                "key": "disbursements[].fees",
                                                                "type": "array",
                                                                "title": "FEE",
                                                                "add": null,
                                                                "remove": null,
                                                                "items": [
                                                                    {
                                                                        key: "disbursements[].fees[].description",
                                                                        "readonly": true,
                                                                    },
                                                                    {
                                                                        key: "disbursements[].fees[].amount1"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "key": "disbursements[].totalFeeAmount",
                                                        "readonly": true
                                                    },
                                                    {
                                                        "key":"disbursements[].finalDisbursementAmount",
                                                        "readonly": true
                                                    },
                                                    {
                                                        "key":"disbursements[].modeOfDisbursement",
                                                        "type": "select",
                                                        "titleMap":[
                                                            { value: "CASH", name: "Cash" }
                                                        ]
                                                    },
                                                    {
                                                        type: "fieldset",
                                                        title: "ACTIONS",
                                                        items: [
                                                            {
                                                                "key": "disbursements[].validate_fp",
                                                                "type": "button",
                                                                "style": "btn-default",
                                                                "notitle": true,
                                                                "title": "VALIDATE_FINGERPRINT",
                                                                "onClick": function(model, formCtrl, form, event){
                                                                    $log.info(model);
                                                                    $log.info(form);
                                                                    $log.info(event);
                                                                    var ds = model.disbursements;
                                                                    var i = event['arrayIndex'];
                                                                    var d = ds[i];
                                                                    PageHelper.showLoader();

                                                                    Enrollment.getCustomerById({id: d.customerId},
                                                                        function(res){
                                                                            if (res.leftHandThumpImageId) {
                                                                                Files.stream({fileId: res.leftHandThumpImageId},
                                                                                    function (res) {
                                                                                        $log.info(res);
                                                                                        cordova.plugins.irfBluetooth.validate(
                                                                                            function(data){
                                                                                                console.log(data);

                                                                                            }, function(){}, res.data);
                                                                                    },
                                                                                    function () {
                                                                                    }).$promise.finally(
                                                                                    function () {
                                                                                        PageHelper.hideLoader();
                                                                                    })
                                                                            } else {
                                                                                PageHelper.showProgress('disbursement', "Fingerprint data not available", 2000);
                                                                                PageHelper.hideLoader();
                                                                            }

                                                                        },
                                                                        function(){
                                                                            PageHelper.hideLoader();
                                                                        }
                                                                    ).$promise.finally(function(){

                                                                    })

                                                                }
                                                            },
                                                            {
                                                                "key": "disbursements[].override_fp",
                                                                title: "OVERRIDE_FINGERPRINT",
                                                                "onChange": function(modelValue, form, model) {
                                                                    console.log(modelValue);
                                                                    console.log(form);
                                                                    console.log(model);
                                                                }
                                                            },
                                                            {
                                                                "key": "disbursements[].disburse",
                                                                "type": "button",
                                                                "notitle": true,
                                                                "style": "btn-primary btn-block",
                                                                "title": "DISBURSE",
                                                                "onClick": function(model, formCtrl, form, event){
                                                                    $log.info("Inside disburse()");
                                                                    $log.info(model);
                                                                    $log.info(form);
                                                                    $log.info(event);
                                                                    PageHelper.clearErrors();
                                                                    var d = model.disbursements;
                                                                    var i = event['arrayIndex'];
                                                                    var accountId = d[i].accountId;

                                                                    /* Transformations */

                                                                    /* TODO: Validations here */
                                                                    if (!_.has(d[i], 'fp_verified') || d[i].fp_verified!=true){
                                                                        if (!_.has(d[i], 'override_fp') || d[i].override_fp!=true){
                                                                            elementsUtils.alert('Fingerprint not verified.');
                                                                            return;
                                                                        }
                                                                    }

                                                                    PageHelper.showLoader();
                                                                    PageHelper.showProgress('disbursement', 'Disbursing ' + accountId + '. Please wait.')
                                                                    LoanAccount.activateLoan({"accountId": accountId},
                                                                        function(data){
                                                                            $log.info("Inside success of activateLoan");
                                                                            var currDate = moment(new Date()).format("YYYY-MM-DD");
                                                                            var toSendData = _.cloneDeep(d[i]);
                                                                            toSendData.disbursementDate = currDate;
                                                                            LoanAccount.disburse(toSendData,
                                                                                function(data){
                                                                                    PageHelper.showProgress('disbursement', 'Disbursement done', 2000);
                                                                                    d[i] = toSendData;
                                                                                },
                                                                                function(res){
                                                                                    PageHelper.showErrors(res);
                                                                                    PageHelper.showProgress('disbursement', 'Disbursement failed', 2000);
                                                                                }).$promise.finally(function() {
                                                                                    PageHelper.hideLoader();
                                                                                }
                                                                            );
                                                                        },
                                                                        function(res){
                                                                            PageHelper.hideLoader();
                                                                            PageHelper.showErrors(res);
                                                                            PageHelper.showProgress('disbursement', 'Error while activating loan.', 2000);
                                                                        })
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type":"actionbox",
                        "items": [
                            {
                                "type":"button",
                                "style":"btn-theme",
                                "title":"PROCEED",
                                "onClick": function(model,formCtrl, form){
                                    $log.info("inside proceed");
                                    PageHelper.clearErrors();
                                    PageHelper.showLoader();
                                    PageHelper.showProgress("disbursement-proceed","Proceeding..");
                                    $log.info(model.group);

                                    Groups.getGroup({groupId: model.group.id},
                                        function(res){ /* SUCCESS */
                                            $log.info(res);

                                            var data = {
                                                "enrollmentAction": "PROCEED",
                                                "group": res
                                            }
                                            Groups.update({}, data,
                                                function(res){
                                                    PageHelper.showProgress("disbursement-proceed", "Done", 2000);
                                                    PageHelper.hideLoader();
                                                    $state.go('Page.GroupDashboard',{
                                                        pageName:"GroupDashboard"
                                                    });
                                                },
                                                function(res){
                                                    PageHelper.hideLoader();
                                                    PageHelper.showProgress("disbursement-proceed", "Error", 2000);
                                                    PageHelper.showErrors(res);
                                                }
                                            )
                                        },
                                        function(res){ /* FAILURE */
                                            PageHelper.hideLoader();
                                        }
                                    ).$promise.finally(function(){

                                    })
                                }
                            }
                        ]
                    }
                ],
                actions: {
                    preSave: function (model, formCtrl) {
                        var deferred = $q.defer();
                        model._storedData = null;
                        deferred.resolve();
                        return deferred.promise;
                    },
                    submit: function (model, formCtrl, formName) {
                        $log.info("Inside submit");
                    }
                },
                schema: {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "title": "Root",
                    "properties": {
                        "disbursements": {
                            "type": "array",
                            "title": "ACCOUNTS",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "accountId": {
                                        "type": "string",
                                        "title": "ACCOUNT_NUMBER"
                                    },
                                    "amount": {
                                        "type": "string",
                                        "title": "DISBURSEMENT_AMOUNT"
                                    },
                                    "finalDisbursementAmount": {
                                        "type": "string",
                                        "title": "GROSS_DISBURSEMENT_AMOUNT"
                                    },
                                    "modeOfDisbursement": {
                                        "type": "string",
                                        "title": "MODE_OF_DISBURSEMENT"
                                    },
                                    "totalFeeAmount": {
                                        "type": "string",
                                        "title": "TOTAL_FEE_AMOUNT"
                                    },
                                    "validate_fp": {
                                        "type": "string",
                                        "title": "VALIDATE_FINGERPRINT"
                                    },
                                    "override_fp": {
                                        "type": "boolean",
                                        "title": "OVERRIDE_FINGERPRINT"
                                    },
                                    "fees": {
                                        "type": "array",
                                        "title": "FEE",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "description": {
                                                    "type": "string",
                                                    "title": "DESCRIPTION"
                                                },
                                                "amount1": {
                                                    "type": "string",
                                                    "title": "CASH"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

            }
        }]);

/*
* @TODO : 1 CGT page for all CGTs, with CGT# as param
* */
irf.pageCollection.factory("Pages__Luc", ["$log","authService","LoanProcess","$state","$stateParams","PageHelper","irfProgressMessage",
    function($log,authService,LoanProcess,$state,$stateParams,PageHelper,irfProgressMessage) {
    return {
        "id": "luc",
        "type": "schema-form",
        "name": "Luc",
        "title": "Loan Utility Check",
        "subTitle": "",
        "uri": "Groups/Loan Utility Check",
        initialize: function (model, form, formCtrl) {
            PageHelper.showLoader();
            irfProgressMessage.pop("luc-init","Loading... Please Wait...");
            try {
                $log.info("Account Number :" + $stateParams.pageId);
                var accountNumber = $stateParams.pageId;
            }catch(err){

            }

            var date = new Date();
            var y = date.getFullYear();
            var m = (date.getMonth()+1);
            var d = date.getDate();
            m = (m.toString().length<2)?("0"+m):m;
            d = (d.toString().length<2)?("0"+d):d;

            model.pldcDto = Array();
            authService.getUser().then(function(data){
                var date=y+"-"+m+"-"+d

                model.pldcDto.push({
                    accountNumber:accountNumber,
                    pldcDate:date,
                    pldcDoneBy:data.login
                });
                PageHelper.hideLoader();
                irfProgressMessage.pop("luc-init","Load Complete",2000);
            },function(resp){
                $log.error(resp);
                PageHelper.hideLoader();
                irfProgressMessage.pop("luc-init","Oops, an error occurred",2000);
            });

        },
        form: [
            {
                "type":"box",
                "title":"LOAN_UTILITY_CHECK",
                "items":[
                    {
                        "key":"pldcDto",
                        "title":"",
                        "add":null,
                        "remove":null,
                        "items":[
                            {
                                "key": "pldcDto[].accountNumber",
                                "title":"ACCOUNT_NUMBER"

                            },
                            {
                                "key":"pldcDto[].pldcDoneBy",
                                "readonly":true,
                                "title":"PLDC_DONE_BY"
                            },
                            {
                                "key": "pldcDto[].pldcDate",
                                "type": "date",
                                "title":"DATE"
                            },
                            {
                                "key": "latitude",
                                "title": "PLDC_LOCATION",
                                "type": "geotag",
                                "latitude": "pldcDto[arrayIndex].latitude",
                                "longitude": "pldcDto[arrayIndex].longitude"
                            },
                            {
                                "key": "pldcDto[].photoId",
                                "title":"PLDC_DOCUMENT",
                                "type": "file",
                                "fileType": "image/*"


                            },
                            {
                                "key": "pldcDto[].pldcComments",
                                "type": "textarea",
                                "title":"COMMENTS"
                            }
                        ]
                    }

                ]
            },{
                "type":"actionbox",
                "items":[
                    {
                        "type":"submit",
                        "style":"btn-primary",
                        "title":"Submit LUC"
                    }
                ]
            }
        ],
        actions: {
            submit: function (model, form, formName) {

                PageHelper.clearErrors();
                PageHelper.showLoader();
                irfProgressMessage.pop('luc-submit',"Submitting Data, Please Wait...");
                $log.info("Submitting LUC",model);
                
                var reqData = _.cloneDeep(model.pldcDto);
                
                LoanProcess.postArray({action:'pldc'},reqData,function (resp,headers) {
                    PageHelper.hideLoader();
                    $log.info("submit result",resp);
                    irfProgressMessage.pop('luc-submit',"Saved Successfully",5000);
                },function (res) {
                    PageHelper.hideLoader();
                    irfProgressMessage.pop('luc-submit',"Oops. An Error Occurred",2000);
                    PageHelper.showErrors(res);
                });
            }
        },
        schema: function () {
            return LoanProcess.getPldcSchema().$promise;
        }
    }
}]);

irf.pageCollection.factory("Pages__CloseGroup", ["$log", "formHelper", "Groups","$state","PageHelper",
    "irfProgressMessage","SessionStore","groupCommons",

    function($log, formHelper, Groups,$state,PageHelper,irfProgressMessage,SessionStore,groupCommons){

        var listOptions= {
            itemCallback: function(item, index) {
                // This will not be called in case of selectable = true in definition
                $log.info(item);
                $state.go("Page.Engine",{
                    pageName:"GroupCRUD",
                    pageId:item.id,
                    pageData:{
                        intent:"DELETE"
                    }
                },{
                    reload: true,
                    inherit: false,
                    notify: true
                });

            },
            getItems: function(response, headers){
                $log.error(response);
                if (response!=null && response.length && response.length!=0){
                    return response;
                }
                return [];
            },
            getListItem: function(item){
                return [
                    'Group ID : ' + item.id,
                    'Group Name : '+item.groupName,
                    'Group Code : '+item.groupCode
                ]
            },
            getActions: function(){
                return [];
            }
        };
        var definition = groupCommons.getSearchDefinition(null,listOptions);

    return {
        "id": "closegroup",
        "type": "search-list",
        "name": "CloseGroup",
        "title": "VIEW_OR_CLOSE_GROUP",
        "subTitle": "",
        "uri":"Groups/View or Close Group",
        initialize: function (model, form, formCtrl) {
            $log.info("CloseGrp Q got initialized");
        },
        definition: definition
    };
}]);

irf.pageCollection.factory("Pages__CustomerFormDownloads",
["$log", "formHelper", "Enrollment","$state", "SessionStore",
function($log, formHelper, Enrollment,$state, SessionStore){
	var branch = SessionStore.getBranch();
	return {
		"id": "CustomerFormDownloads",
		"type": "search-list",
		"name": "CustomerFormDownloads",
		"title": "Customer Form Downloads",
		"subTitle": "",
		"uri":"Customer Form Downloads",
		initialize: function (model, form, formCtrl) {
			$log.info("search-list sample got initialized");
		},
		definition: {
			title: "Search Customers",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"first_name": {
						"title": "CUSTOMER_NAME",
						"type": "string"
					},
					"lastName": {
						"title": "LASTNAME",
						"type": "string"
					},
					"kyc_no": {
						"title": "KYC_NO",
						"type": "string"
					},
					"branch": {
						"title": "BRANCH_NAME",
						"type": "string",
						"enumCode": "branch",
						"default": branch,
						"x-schema-form": {
							"type": "select"
						}
					},
					"centre": {
						"title": "CENTRE",
						"type": "string",
						"enumCode": "centre",
						"x-schema-form": {
							"type": "select"
						}
					}

				},
				"required":["branch"]
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				var promise = Enrollment.search({
					'branchName': searchOptions.branch,
					'firstName': searchOptions.first_name,
					'centreCode': searchOptions.centre,
					'page': pageOpts.pageNo,
					'per_page': pageOpts.itemsPerPage,
                    'kycNumber': searchOptions.kyc_no,
                    'lastName': searchOptions.lastName
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 20;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				itemCallback: function(item, index) {
					$log.info(item);

				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
                        var ret = [];
                        angular.forEach(response,function(value,key){

                            if(value.urnNo!=null) ret.push(value);
                        });
                        console.warn(ret);
                        return ret;
					}
					return [];
				},
				getListItem: function(item){
					return [
						item.firstName + " " + (item.lastName!=null?item.lastName:""),
						'Customer ID : ' + item.id,
						'URN : '+item.urnNo,
						null
					]
				},
				getActions: function(){
					return [
                        {
                            name: "Download Personal Information Form",
                            desc: "",
                            icon: "fa fa-user",
                            fn: function(item, index){
                                if(window.confirm("Start Download?")){
                                    var url = irf.FORM_DOWNLOAD_URL+'?form_name=personal_information&record_id='+item.urnNo;
                                    try {
                                        cordova.InAppBrowser.open(url, '_system', 'location=yes');
                                    }catch(err){
                                        window.open(url, '_blank', 'location=yes');
                                    }
                                }

                            },
                            isApplicable: function(item, index){
                                if(item.urnNo)
                                    return true;
                                else
                                    return false;

                            }
                        },
                        {
                            name: "Download Appraisal and Verification Form",
                            desc: "",
                            icon: "fa fa-check-circle-o",
                            fn: function(item, index){
                                if(window.confirm("Start Download?")){
                                    var url = irf.FORM_DOWNLOAD_URL+'?form_name=appraisal_and_verification&record_id='+item.urnNo;
                                    try {
                                        cordova.InAppBrowser.open(url, '_system', 'location=yes');
                                    }catch(err){
                                        window.open(url, '_blank', 'location=yes');
                                    }
                                }

                            },
                            isApplicable: function(item, index){
                                if(item.urnNo)
                                    return true;
                                else
                                    return false;

                            }
                        }
					];
				}
			}


		}
	};
}]);

/**
 * Created by Sachin.M on 22-07-2016.
 */
irf.pageCollection.factory(irf.page('loans.groups.GroupLoanRepaymentQueue'), ["$log", "formHelper", "LoanAccount",
    "$state","groupCommons","searchResource",
    function($log, formHelper, LoanAccount,$state,groupCommons,searchResource){
        //isLegacy :: single loan prdt (true) or others (false)

        return {
            "id": "GroupRepaymentQueue",
            "type": "schema-form",
            "name": "GroupRepaymentQueue",
            "title": "GROUP_LOAN_REPAYMENT_QUEUE",
            "subTitle": "",
            initialize: function (model, form, formCtrl) {
                $log.info("GroupRepaymentQueue got initialized");
            },
            form:[
                {
                    "type":"box",
                    "title":"SEARCH",
                    "items":[
                        {
                            key:"isLegacy",
                            "type":"radios",
                            "titleMap":{
                                "false":"Single Loan Product",
                                "true":"Others"
                            }

                        },
                        "partner",
                        "groupCode"
                    ]
                },
                {
                    "type":"actionbox",
                    "items": [
                        {
                            "type":"submit",
                            "style":"btn-theme",
                            "title":"SEARCH"

                        }
                    ]
                }
            ],
            schema:{
                "type": 'object',
                "title": 'SearchOptions',
                "properties": {
                    "isLegacy":{
                        "title":"PRODUCT_TYPE",
                        "type":"boolean",
                        "default":"false"

                    },
                    "partner": {
                        "title": "PARTNER",
                        "type": "string",
                        "enumCode":"partner",
                        "x-schema-form":{
                            "type":"select"
                        }
                    },
                    "groupCode":{
                        "title":"GROUP_CODE",
                        "type":"integer"
                    }


                },
                "required":["partner","groupCode","isLegacy"]
            },
            actions:{
                submit:function(model, formCtrl, formName){
                    console.log(model);
                    $state.go("Page.Engine",{
                        pageName:'loans.groups.GroupLoanRepay',
                        pageId:[model.partner,model.groupCode,model.isLegacy].join(".")
                    });
                }
            }
        };
    }]);


irf.pageCollection.factory(irf.page('loans.groups.GroupLoanRepay'),
    ["$log","SessionStore", "$state",  "formHelper",
        "$stateParams", "LoanAccount", "LoanProcess", "PageHelper",
        "Groups", "Utils","elementsUtils",
        function ($log,SessionStore, $state, formHelper, $stateParams,
                  LoanAccount, LoanProcess,  PageHelper,
                  Groups, Utils) {

            function backToQueue(){
                $state.go("Page.Engine",{
                    pageName:"loans.groups.GroupLoanRepaymentQueue",
                    pageId:null
                });
            }

            var cashCollectionRemarks = {
                "Cash received at the branch":"Cash received at the branch",
                "Cash collected at field by WM":"Cash collected at field by WM",
                "Cash collected at field through CSP":"Cash collected at field through CSP",
                "Receipt Number":"Receipt Number"
            };

            return {
                "type": "schema-form",
                "title": "LOAN_REPAYMENT",
                "subTitle": "",
                initialize: function (model, form, formCtrl) {
                    PageHelper.showLoader();

                    //pageId = PartnerCode.GroupCode.isLegacy
                    var groupParams = $stateParams.pageId.toString().split(".");
                    var isLegacy = false;
                    try{
                        isLegacy = groupParams[2]=="true";
                    }
                    catch (err){
                        isLegacy = false;
                    }

                    var promise = LoanAccount.getGroupRepaymentDetails({
                        partnerCode: groupParams[0],
                        groupCode:groupParams[1],
                        isLegacy:isLegacy
                    }).$promise;
                    promise.then(function (data) { /* SUCCESS */
                        delete data.$promise;
                        delete data.$resolved;

                        console.warn(data);
                        model.ui = { submissionDone: false};

                        model.repayments = Array();
                        model.total=0;
                        model.groupCode = groupParams[1];
                        for(var i=0;i<data.length;i++){

                            var repData = data[i];

                            var totalDemandDue = Number(repData.totalDemandDue);
                            var txName = (totalDemandDue==0)?"Advance Repayment":"Scheduled Demand";
                            model.repayments.push({

                                accountId:repData.accountId,
                                amount:parseInt(Number(repData.equatedInstallment)),
                                demandAmount: parseInt(Number(repData.equatedInstallment)),
                                payOffAmount: repData.payOffAmount,
                                accountName: repData.accountName,
                                numSatisifiedDemands: repData.numSatisifiedDemands,
                                numDemands: repData.numDemands,
                                groupCode:repData.groupCode,
                                productCode:repData.productCode,
                                urnNo:repData.urnNo,
                                transactionName:txName,
                                repaymentDate:Utils.getCurrentDate(),
                                additional:{
                                    name:Utils.getFullName(repData.firstName,repData.middleName,repData.lastName),
                                    accountBalance:Number(repData.accountBalance)
                                }

                            });
                            model.total += parseInt(Number(repData.equatedInstallment));


                        }
                        if(model.repayments.length<1){
                            PageHelper.showProgress("group-repayment","No Records",3000);
                            backToQueue();
                        }


                        }, function (resData) {
                            PageHelper.showProgress("group-repayment","No Records",3000);
                            backToQueue();
                        })
                        .finally(function () {
                            PageHelper.hideLoader();
                        });

                },
                offline: false,
                form: [
                    {
                        "type": "box",
                        "title": "GROUP_LOAN_REPAYMENT",
                        "items": [
                            {
                                "key":"groupCode",
                                "title":"GROUP_CODE",
                                "readonly":true

                            },
                            {
                                "key":"_cashCollectionRemark",
                                "title":"CASH_COLLECTION_REMARK",
                                "titleMap":cashCollectionRemarks,
                                "type":"select",
                                "onChange":function(value,form,model){
                                    for(var i=0;i<model.repayments.length;i++){
                                        var repayment = model.repayments[i];
                                        repayment.cashCollectionRemark  = value;
                                    }
                                }
                            },
                            {
                                "key":"_remarks",
                                "title":"REMARKS",
                                "onChange":function(value,form,model){
                                    console.warn(model);
                                    console.warn(value);
                                    for(var i=0;i<model.repayments.length;i++){
                                        var repayment = model.repayments[i];
                                        repayment.remarks  = value;
                                    }
                                }
                            },
                            {
                                key:"repayments",
                                add:null,
                                remove:null,
                                titleExpr:"model.repayments[arrayIndex].urnNo + ' : ' + model.repayments[arrayIndex].name",
                                items:[
                                    {
                                        key:"repayments[].accountId",
                                        readonly:true

                                    },
                                    {
                                        key:"repayments[].additional.name",
                                        readonly:true,
                                        title:"NAME",
                                        condition:"model.repayments[arrayIndex].name!=null"

                                    },
                                    {
                                        key:"repayments[].urnNo",
                                        readonly:true

                                    },
                                    {
                                        key:"repayments[].additional.accountBalance",
                                        title:"ACCOUNT_BALANCE",
                                        type:"amount",
                                        readonly:true

                                    },
                                    {
                                        key:"repayments[].amount",
                                        type:"amount",
                                        validationMessage: {
                                            'invalidAmount': 'Should be Less than Account Balance'
                                        },
                                        onChange:function(value,form,model,schemaForm){

                                            try {
                                                var i = form["arrayIndex"];
                                                if (value > model.repayments[i].additional.accountBalance) {
                                                    Utils.alert("Amount should be Less than Account Balance");
                                                }
                                                model.total=0;
                                                for(var i=0;i<model.repayments.length;i++){
                                                    model.total +=  model.repayments[i].amount;
                                                }

                                            }catch(err){
                                                console.error(err);
                                            }

                                        }


                                    },
                                    {
                                        key:"repayments[].cashCollectionRemark",
                                        "type":"select",
                                        "titleMap":cashCollectionRemarks

                                    },
                                    "repayments[].remarks",
                                    {
                                        key:"repayments[].repaymentDate",
                                        type:"date"
                                    },
                                    {
                                        key:"repayments[].transactionName",
                                        "type":"select",
                                        "titleMap":{
                                            "Advance Repayment":"Advance Repayment",
                                            "Scheduled Demand":"Scheduled Demand",
                                            "Fee Payment":"Fee Payment",
                                            "Pre-closure":"Pre-closure",
                                            "Prepayment":"Prepayment"
                                        }
                                    }


                                ]
                            },
                            {
                                "key":"total",
                                "type":"amount",
                                "title":"TOTAL",
                                readonly:true
                            }

                        ]
                    },
                    {
                        "type":"actionbox",
                        "condition": "model.ui.submissionDone==false",
                        "items": [
                            {
                                "type":"submit",
                                "style":"btn-theme",
                                "title":"SUBMIT"
                            }
                        ]
                    },
                    {
                        "type": "actionbox",
                        "condition": "model.ui.submissionDone==true",
                        "items": [
                            {
                                "type": "button",
                                "style": "btn-theme",
                                "title": "BACK",
                                "onClick": function(model, formCtrl, formName){
                                    backToQueue();
                                }
                            },
                            {
                                "type": "button",
                                "style": "btn-theme",
                                "title": "PRINT",
                                "onClick": function(model, formCtrl, formName){
                                    function PrinterConstants(){

                                    }
                                    PrinterConstants.FONT_LARGE_BOLD = 2;
                                    PrinterConstants.FONT_LARGE_NORMAL = 1;
                                    PrinterConstants.FONT_SMALL_NORMAL = 3;
                                    PrinterConstants.FONT_SMALL_BOLD = 4;

                                    function PrinterData(){
                                        this.lines = [];
                                    }

                                    PrinterData.prototype.getLineLength = function(font){
                                        if (font == PrinterConstants.FONT_LARGE_BOLD || font == PrinterConstants.FONT_LARGE_NORMAL){
                                            return 24;
                                        } else {
                                            return 42;
                                        }
                                    }

                                    PrinterData.prototype.addLine = function(text, opts){
                                        opts['font'] = opts['font'] || PrinterConstants.FONT_SMALL_NORMAL;
                                        opts['center'] = _.has(opts,'center') && _.isBoolean(opts['center'])? opts['center']: false;
                                        var obj = {
                                            "bFont": opts['font'],
                                            "text": text,
                                            "style": {
                                                "center": opts['center']
                                            }
                                        };
                                        this.lines.push(obj);
                                        return this;
                                    }

                                    PrinterData.prototype.addKeyValueLine = function(key, value, opts){
                                        opts['font'] = opts['font'] || PrinterConstants.FONT_SMALL_NORMAL;
                                        var keyLength = parseInt(this.getLineLength(opts['font'])/2)-1;
                                        var line = _.padEnd(key, keyLength, ' ') + ': ' + value;
                                        var obj = {
                                            "bFont": opts['font'],
                                            "text": line,
                                            "style": {
                                                "center": false
                                            }
                                        };
                                        this.lines.push(obj);
                                        return this;
                                    }

                                    PrinterData.prototype.addStrRepeatingLine = function(str, opts){
                                        opts['font'] = opts['font'] || PrinterConstants.FONT_SMALL_NORMAL;
                                        var lineLength = this.getLineLength(opts['font']);
                                        var line = _.padEnd("", lineLength, '-')
                                        var obj = {
                                            "bFont": opts['font'],
                                            "text": line,
                                            "style": {
                                                "center": false
                                            }
                                        };
                                        this.lines.push(obj);
                                        return this;
                                    }



                                    PrinterData.prototype.addLines = function(lines){
                                        this.lines = this.lines.concat(lines);
                                    }

                                    PrinterData.prototype.getLines = function(){
                                        return this.lines;
                                    }

                                    var getPrintReceipt = function(repaymentInfo, opts){
                                        opts['duplicate'] = opts['duplicate'] || false;
                                        var pData = new PrinterData();
                                        if(opts['duplicate']){
                                            pData.addLine('DUPLICATE', {'center': true, font: PrinterConstants.FONT_SMALL_BOLD});
                                        } else {
                                            pData.addLine('RECEIPT', {'center': true, font: PrinterConstants.FONT_SMALL_BOLD});
                                        }

                                        var curTime = moment();
                                        var curTimeStr = curTime.local().format("DD-MM-YYYY HH:MM:SS");
                                        pData.addLine(opts['entity_name'], {'center': true, font: PrinterConstants.FONT_SMALL_BOLD})
                                            .addLine(opts['branch'], {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine("Date : " + curTimeStr, {'center': false, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            //.addLine("Customer ID : " + repaymentInfo['customerId'], {'center': false, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine("LOAN REPAYMENT", {'center': true, font: PrinterConstants.FONT_LARGE_BOLD})
                                            .addLine("", {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine(repaymentInfo['accountName'], {'center': true, font: PrinterConstants.FONT_SMALL_BOLD})
                                            .addKeyValueLine("Customer URN", repaymentInfo['customerURN'], {font:PrinterConstants.FONT_SMALL_NORMAL})
                                            //.addKeyValueLine("Customer Name", repaymentInfo['customerName'], {font:PrinterConstants.FONT_SMALL_NORMAL})
                                            .addKeyValueLine("Loan A/C No", repaymentInfo['accountNumber'], {font:PrinterConstants.FONT_SMALL_NORMAL})
                                            .addKeyValueLine("Transaction Type", repaymentInfo['transactionType'], {font:PrinterConstants.FONT_SMALL_NORMAL})
                                            .addKeyValueLine("Transaction ID", repaymentInfo['transactionID'], {font:PrinterConstants.FONT_SMALL_NORMAL})
                                            .addKeyValueLine("Demand Amount", repaymentInfo['demandAmount'], {font:PrinterConstants.FONT_SMALL_BOLD})
                                            .addKeyValueLine("Amount Paid", repaymentInfo['amountPaid'], {font:PrinterConstants.FONT_SMALL_BOLD})
                                            .addKeyValueLine("Total Payoff Amount", repaymentInfo['payOffAmount'], {font:PrinterConstants.FONT_SMALL_BOLD})
                                            .addKeyValueLine("Demand Amount", repaymentInfo['demandAmount'], {font:PrinterConstants.FONT_SMALL_BOLD})
                                            .addKeyValueLine("Demands Paid/Pending", repaymentInfo['demandsPaidAndPending'], {font:PrinterConstants.FONT_SMALL_BOLD})
                                            .addStrRepeatingLine("-", {font: PrinterConstants.FONT_LARGE_BOLD})
                                            .addLine(opts['company_name'], {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine("CIN :" + opts['cin'], {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine(opts['address1'], {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine(opts['address2'], {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine(opts['address3'], {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine("Website :" + opts['website'], {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine("Helpline No :" + opts['helpline'], {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine("", {})
                                            .addLine("", {})
                                            .addLine("Signature not required as this is an", {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL})
                                            .addLine("electronically generated receipt.", {'center': true, font: PrinterConstants.FONT_SMALL_NORMAL});

                                        return pData;
                                    }

                                    var fullPrintData = new PrinterData();

                                    for (var i=0; i<model.repayments.length; i++){
                                        var r = model.repayments[i];
                                        var repaymentInfo = {
                                            'repaymentDate': r.repaymentDate,
                                            'customerURN': r.urnNo,
                                            'accountNumber': r.accountId,
                                            'transactionType': r.transactionName,
                                            'transactionID': 1,
                                            'demandAmount': r.demandAmount,
                                            'amountPaid': r.demandAmount,
                                            'payOffAmount': r.payOffAmount,
                                            'accountName': r.accountName,
                                            'demandsPaidAndPending': (1 + r.numSatisifiedDemands) + " / " + parseInt(r.numDemands - r.numSatisifiedDemands)
                                        };
                                        var opts = {
                                            'entity_name': "Pudhuaaru KGFS",
                                            'company_name': "IFMR Rural Channels and Services Pvt. Ltd.",
                                            'cin': 'U74990TN2011PTC081729',
                                            'address1': 'IITM Research Park, Phase 1, 10th Floor',
                                            'address2': 'Kanagam Village, Taramani',
                                            'address3': 'Chennai - 600113, Phone: 91 44 66687000',
                                            'website': "http://ruralchannels.kgfs.co.in",
                                            'helpline': '18001029370'
                                        }

                                        var pData = getPrintReceipt(repaymentInfo, opts);
                                        pData.addLine("", {});
                                        pData.addLine("", {});
                                        fullPrintData.addLines(pData.getLines());
                                    }

                                    cordova.plugins.irfBluetooth.print(function(){
                                        console.log("succc callback");
                                    }, function(err){
                                        console.error(err);
                                        console.log("errr collback");
                                    }, fullPrintData.getLines());
                                }
                            }
                        ]
                    }
                ],
                schema: {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "advanceRepayment": {
                            "title":"ADVANCE_REPAYMENT",
                            "type": "boolean"
                        },
                        "repayments": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {

                                    "accountId": {
                                        "type": "string",
                                        "title":"ACCOUNT_ID"
                                    },
                                    "amount": {
                                        "type": "integer",
                                        "title":"AMOUNT"
                                    },
                                    "authorizationRemark": {
                                        "type": "string",
                                        "title":"AUTHORIZATION_REMARK"
                                    },
                                    "authorizationUsing": {
                                        "type": "string",
                                        "title":"AUTHORIZATION_USING"
                                    },
                                    "cashCollectionRemark": {
                                        "type": "string",
                                        "title":"CASH_COLLECTION_REMARK"
                                    },
                                    "groupCode": {
                                        "type": "string",
                                        "title":"GROUP_CODE"
                                    },
                                    "productCode": {
                                        "type": "string",
                                        "title":"PRODUCT_CODE"
                                    },
                                    "remarks": {
                                        "type": "string",
                                        "title":"REMARKS"
                                    },
                                    "repaymentDate": {
                                        "type": "string",
                                        "title":"REPAYMENT_DATE"
                                    },
                                    "transactionId": {
                                        "type": "string",
                                        "title":"TRANSACTION_ID"
                                    },
                                    "transactionName": {
                                        "type": "string",
                                        "title":"TRANSACTION_NAME"


                                    },
                                    "urnNo": {
                                        "type": "string",
                                        "title":"URN_NO"
                                    }
                                },
                                "required": [
                                    "accountId",
                                    "amount",
                                    "cashCollectionRemark",
                                    "groupCode",
                                    "productCode",
                                    "repaymentDate",
                                    "transactionName",
                                    "urnNo"
                                ]
                            }
                        }
                    },
                    "required": [
                        "repayments"
                    ]
                },
                actions: {
                    preSave: function (model, formCtrl) {
                        var deferred = $q.defer();
                        model._storedData = null;
                        deferred.resolve();
                        return deferred.promise;
                    },
                    submit: function (model, formCtrl, formName) {
                        $log.info("Inside submit");
                        console.log(formCtrl);
                        var reqData = _.cloneDeep(model);
                        var msg="";
                        for(var i=0;i<reqData.repayments.length;i++) {

                            //Check for advance repayments
                            if(reqData.repayments[i].transactionName=="Advance Repayment") {
                                reqData.advanceRepayment = true;
                                msg = "There are Advance Repayments - ";
                            }

                            //check for larger amounts
                            if(Number(reqData.repayments[i].amount)>reqData.repayments[i].additional.accountBalance) {
                                msg = "For URN "+reqData.repayments[i].urnNo;
                                msg+=" Payable amount is larger than account balance."
                                Utils.alert(msg);
                                return;
                            }
                        }

                        if(window.confirm(msg+"Are you Sure?")){
                            PageHelper.showLoader();


                            LoanAccount.groupRepayment(reqData, function(resp, headers){
                                console.log(resp);
                                try {
                                    alert(resp.response);
                                    model.repaymentResponse = resp;
                                    model.ui.submissionDone = true;
                                }catch(err){
                                    console.error(err);
                                    PageHelper.showProgress("group-repay","Oops. An Error Occurred",3000);
                                }

                            },function(resp){
                                console.error(resp);
                                try{
                                    PageHelper.showErrors(resp);
                                }catch(err){
                                    console.error(err);
                                }

                                PageHelper.showProgress("group-repay","Oops. An Error Occurred",3000);
                            }).$promise.finally(function(){
                                PageHelper.hideLoader();
                            });
                        }
                    }
                }
            }
        }]);

irf.pageCollection.factory(irf.page("loans.individual.booking.LoanBookingQueue"),
["$log", "formHelper", "IndividualLoan", "$state", "SessionStore",
function($log, formHelper, IndividualLoan, $state, SessionStore){
    return {
        "type": "search-list",
        "title": "Pending for Loan Booking Queue",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
        },
        definition: {
            title: "Search Loans pending for Booking",
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": 'SearchOptions',
                "required":["branch"],
                "properties": {
                    "loan_no": {
                        "title": "Loan Account Number",
                        "type": "string"
                    },
                    "first_name": {
                        "title": "CUSTOMER_NAME",
                        "type": "string"
                    },
                    "kyc_no": {
                        "title": "KYC_NO",
                        "type": "string"
                    },
                    "branch": {
                        "title": "BRANCH_NAME",
                        "type": "string",
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "centre": {
                        "title": "CENTRE",
                        "type": "string",
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "filter": {
                                "parentCode as branch": "model.branch"
                            }
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = IndividualLoan.search({
                    'stage': 'LoanBooking',
                    'branchName': searchOptions.branch,
                    'centreCode': searchOptions.centre,
                    'customerId': null,
                    'accountNumber':loan_no,
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage,
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                itemCallback: function(item, index) {
                    $log.info(item);
                    $log.info("Redirecting");
                    $state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
                },
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.firstName + " " + (item.lastName!=null?item.lastName:""),
                        'Customer ID : ' + item.id,
                        null
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "Do House Verification",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                $state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

/*
About Queue.js
-------------------------
1. Search page that displays all the Loan Accounts based on the sort criteria.
2. To Create/update ACH Account
3. To Create/update PDC Account.

Methods
-------
Initialize : To decare the required model variables.
getResultsPromise : TO return the result of IndividualLoan.search.
getListItem : Values to display from search result
getActions : Menu icon to create/update ACH or create/update PDC.

Services
--------
IndividualLoan.search : To get all the Loan Accounts.
*/
irf.pageCollection.factory(irf.page("loans.individual.Queue"),
["$log", "formHelper","entityManager", "IndividualLoan","$state", "SessionStore", "Utils",
function($log, formHelper,EntityManager, IndividualLoan,$state, SessionStore, Utils){

	var branch = SessionStore.getBranch();

	return {
		"type": "search-list",
		"title": "LOANS_SEARCH",
		"subTitle": "",

		initialize: function (model, form, formCtrl) {
			model.branch = branch;
		},

		definition: {
			title: "SEARCH_LOANS",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"stage": {
						"title": "STAGE",
						"type": "string",
						"enumCode": "loan_stage",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true
						}
					},
					"branchName": {
						"title": "BRANCH_ID",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true
						}
					},
					"centreCode": {
						"title": "CENTRE_CODE",
						"type": "string"
					},
					"customerId": {
						"title": "CUSTOMER_ID",
						"type": "number"
					},
					"accountNumber": {
						"title": "ACCOUNT_NUMBER",
						"type": "string"
					}
				},
				"required":["stage", "branchName"]
			},

			getSearchFormHelper: function() {
				return formHelper;
			},

			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
				var promise = IndividualLoan.search({
					'stage': searchOptions.stage,
					'branchName': searchOptions.branchName,
					'centreCode': searchOptions.centreCode,
					'customerId': searchOptions.customerId,
					'accountNumber': searchOptions.accountNumber,
                    'page': pageOpts.pageNo
				}).$promise;
				return promise;
			},

			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 20;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},

			listOptions: {
				expandable: true,
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [

						"{{'ACCOUNT_NUMBER'|translate}} : " + item.accountNumber,
						"{{'ENTITY_NAME'|translate}} : " + item.customerName,
						"{{'LOAN_AMOUNT'|translate}} : " + item.loanAmount,
						"{{'LOAN_TYPE'|translate}} : " + item.loanType,
						"{{'PARTNER_CODE'|translate}} : " + item.partnerCode,
						"{{'PROCESS_TYPE'|translate}} : " + item.processType
					]
				},
				getActions: function(){
					return [
						{
							name: "LOAN_INPUT",
							desc: "",
							icon: "fa fa-book",
							fn: function(item, index){
								EntityManager.setModel("loans.individual.booking.LoanInput",{_loan:item});
								$state.go("Page.Engine",{
									pageName:"loans.individual.booking.LoanInput",
									pageId:item.loanId
								});
							},
							isApplicable: function(item, index){
								if(item.stage == "LoanInitiation") {
									return true;
								} else {
									return false;
								}
							}
						},
						{
							name: "CAPTURE_DATES",
							desc: "",
							icon: "fa fa-clock-o",
							fn: function(item, index){
								EntityManager.setModel("loans.individual.booking.LoanBooking",{_loan:item});
								$state.go("Page.Engine",{
									pageName:"loans.individual.booking.LoanBooking",
									pageId:item.loanId
								});
							},
							isApplicable: function(item, index){
								if(item.stage == "LoanBooking") {
									return true;
								} else {
									return false;
								}
							}
						},
						{
							name: "DOCUMENT_UPLOAD",
							desc: "",
							icon: "fa fa-file-excel-o",
							fn: function(item, index){
								EntityManager.setModel("loans.individual.booking.DocumentUpload",{_loan:item});
								$state.go("Page.Engine",{
									pageName:"loans.individual.booking.DocumentUpload",
									pageId:item.loanId
								});
							},
							isApplicable: function(item, index){
								if(item.stage == "DocumentUpload") {
									return true;
								} else {
									return false;
								}
							}
						},
						{
							name: "COLLECT_ADHOC_CHARGES",
							desc: "",
							icon: "fa fa-rupee",
							fn: function(item, index){
								EntityManager.setModel("loans.individual.collections.ChargeFee", {"_loan": item});
								$state.go("Page.Engine",{
									pageName:"loans.individual.collections.ChargeFee",
									pageId:item.accountNumber
								});
							},
							isApplicable: function(item, index){
								if(item.stage == "Completed") {
									return true;
								} else {
									return false;
								}
							}
						},
						{
							name: "ACH_REGISTRATION",
							desc: "",
							icon: "fa fa-cc",
							fn: function(item, index){
								//EntityManager.setModel("loans.individual.achpdc.ACHRegistration",{_loanAch:item});
								$state.go("Page.Engine",{
									pageName:"loans.individual.achpdc.ACHRegistration",
									pageId:item.loanId, 
									pageData: item
								});
							},
							isApplicable: function(item, index){
								if(item.stage == "Completed") {
									return true;
								} else {
									return false;
								}
							}
						},
						{
							name: "PDC_REGISTRATION",
							desc: "",
							icon: "fa fa-cc",
							fn: function(item, index){
								//EntityManager.setModel("loans.individual.achpdc.PDCRegistration",{_pdc:item});
								$state.go("Page.Engine",{
									pageName:"loans.individual.achpdc.PDCRegistration",
									pageId:item.loanId,
									pageData: item
								});
							},
							isApplicable: function(item, index){
								if(item.stage == "Completed") {
									return true;
								} else {
									return false;
								}

							}
						}
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("loans.individual.PendingClearingQueue"),
["$log", "formHelper", "Enrollment", "$state", "SessionStore", "$q",
function($log, formHelper, Enrollment, $state, SessionStore,$q){
    return {
        "type": "search-list",
        "title": "Pending for Clearing",
        //"subTitle": "T_ENROLLMENTS_PENDING",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
        },
        /*offline: true,
        getOfflineDisplayItem: function(item, index){
            return [
                "Branch: " + item["branch"],
                "Centre: " + item["centre"]
            ]
        },
        getOfflinePromise: function(searchOptions){      \* Should return the Promise *\
            var promise = Enrollment.search({
                'branchName': searchOptions.branch,
                'centreCode': searchOptions.centre,
                'firstName': searchOptions.first_name,
                'lastName': searchOptions.last_name,
                'page': 1,
                'per_page': 100,
                'stage': "Stage02"
            }).$promise;

            return promise;
        },*/
        definition: {
            title: "Search Loans pending for Clearing",
            searchForm: [
                "*"
            ],
            autoSearch:true,
            searchSchema: {
                "type": 'object',
                "title": 'SearchOptions',
                "required":["branch"],
                "properties": {
                    "loan_no": {
                        "title": "Loan Account Number",
                        "type": "string"
                    },
                    "first_name": {
                        "title": "CUSTOMER_NAME",
                        "type": "string"
                    },
                    /*"kyc_no": {
                        "title": "KYC_NO",
                        "type": "string"
                    },
                    "branch": {
                        "title": "BRANCH_NAME",
                        "type": "string",
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },*/
                    "centre": {
                        "title": "CENTRE",
                        "type": "string",
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "filter": {
                                "parentCode as branch": "model.branch"
                            }
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = Enrollment.search({
                    'branchName': searchOptions.branch,
                    'centreCode': searchOptions.centre,
                    'firstName': searchOptions.first_name,
                    'lastName': searchOptions.last_name,
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage,
                    'stage': "Stage02"
                }).$promise;


                return $q.resolve({
                    headers: {
                        'x-total-count': 8
                    },
                    body:[
                        {
                            custname:"Simran Kuppusamy",
                            loanacno:"508640101345",
                            paymenttype:"PDC",
                            amountdue:"2489",
                            installmentdate:"03-03-2016",
                            p2pdate:"15-03-2016"
                        },
                        {
                            custname:"Swapnil",
                            loanacno:"508640108976",
                            paymenttype:"PDC",
                            amountdue:"1176",
                            installmentdate:"02-03-2016",
                            p2pdate:""
                        },
                        {
                            custname:"Suseela Gandhi",
                            loanacno:"508651508976",
                            paymenttype:"ACH",
                            amountdue:"3683",
                            installmentdate:"05-03-2016",
                            p2pdate:""
                        }
                    ]
                });
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 3;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                /*itemCallback: function(item, index) {
                    $log.info(item);
                    $log.info("Redirecting");
                    $state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
                },*/
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.custname,
                        'Loan Number : ' + item.loanacno,
                        'Amount Due: ' + item.amountdue
                    ]
                },
                getActions: function(){
                    return [
                        /*{
                            name: "Do House Verification",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                $state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        }*/
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.PendingCashQueue"),
["$log", "formHelper", "Enrollment", "$state", "SessionStore", "$q",
function($log, formHelper, Enrollment, $state, SessionStore,$q){
    return {
        "type": "search-list",
        "title": "Pending for Cash Payment",
        //"subTitle": "T_ENROLLMENTS_PENDING",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
        },
        /*offline: true,
        getOfflineDisplayItem: function(item, index){
            return [
                "Branch: " + item["branch"],
                "Centre: " + item["centre"]
            ]
        },
        getOfflinePromise: function(searchOptions){      \* Should return the Promise *\
            var promise = Enrollment.search({
                'branchName': searchOptions.branch,
                'centreCode': searchOptions.centre,
                'firstName': searchOptions.first_name,
                'lastName': searchOptions.last_name,
                'page': 1,
                'per_page': 100,
                'stage': "Stage02"
            }).$promise;

            return promise;
        },*/
        definition: {
            title: "Search Loans pending for Cash Payment",
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": 'SearchOptions',
                "required":["branch"],
                "properties": {
                    "loan_no": {
                        "title": "Loan Account Number",
                        "type": "string"
                    },
                    "first_name": {
                        "title": "CUSTOMER_NAME",
                        "type": "string"
                    },
                    /*"kyc_no": {
                        "title": "KYC_NO",
                        "type": "string"
                    },
                    "branch": {
                        "title": "BRANCH_NAME",
                        "type": "string",
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },*/
                    "centre": {
                        "title": "CENTRE",
                        "type": "string",
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "filter": {
                                "parentCode as branch": "model.branch"
                            }
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = Enrollment.search({
                    'branchName': searchOptions.branch,
                    'centreCode': searchOptions.centre,
                    'firstName': searchOptions.first_name,
                    'lastName': searchOptions.last_name,
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage,
                    'stage': "Stage02"
                }).$promise;


                return $q.resolve({
                    headers: {
                        'x-total-count': 8
                    },
                    body:[
                        {
                            custname:"Anjalidevi",
                            loanacno:"508640108845",
                            amountdue:"1167",
                            installmentdate:"02-03-2016",
                            p2pdate:""
                        },
                        {
                            custname:"Banumathi",
                            loanacno:"508640108549",
                            amountdue:"2020",
                            installmentdate:"03-03-2016",
                            p2pdate:"26-03-2016"
                        },
                        {
                            custname:"Dhanalakshmi",
                            loanacno:"508651508098",
                            amountdue:"1345",
                            installmentdate:"02-03-2016",
                            p2pdate:""
                        }
                    ]
                });
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 3;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                /*itemCallback: function(item, index) {
                    $log.info(item);
                    $log.info("Redirecting");
                    $state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
                },*/
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.custname,
                        'Loan Number : ' + item.loanacno,
                        'Amount Due: ' + item.amountdue
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "Pay Cash",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                $state.go('Page.Engine', {pageName: 'Repayment', pageId: item.loanacno});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.commons.factory('LoanBookingCommons', [ 'Queries',
    function(Queries){

        return {
            getDocsForProduct: function(productCode,process,stage){
                return Queries.getLoanProductDocuments(productCode,process,stage)
            },
            getDocumentDetails: function(docsForProduct, docCode){
                var i = 0;
                for (i=0;i <docsForProduct.length; i++){
                    if (docsForProduct[i].document_code == docCode){
                        return docsForProduct[i];
                    }
                }
                return null;
            },
            getCentreCodeFromId: function(centreId, formHelper){
                var centres = formHelper.enum('centre');
                for (var i = 0; i< centres.data.length; i++){
                    var c = centres.data[i];
                    if (parseInt(c.code) == centreId){
                        //console.log(c);
                        return c.field5;
                    }
                }
            }
        }
    }
])

irf.pageCollection.factory(irf.page("loans.individual.booking.PendingQueue"),
["$log", "formHelper", "Enrollment", "$state", "SessionStore", "$q", "IndividualLoan", "LoanBookingCommons",
function($log, formHelper, Enrollment, $state, SessionStore, $q, IndividualLoan, LoanBookingCommons){
    return {
        "type": "search-list",
        "title": "LOAN_BOOKING_QUEUE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.stage = 'LoanBooking';
            console.log(model);
        },
        offline: false,
        definition: {
            title: "LOAN_TYPE",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "customer name":"Customer Name",
                "centre id":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": "VIEW_LOANS",
                "required":["branch"],
                "properties": {

                    "branchName": {
                        "title": "BRANCH_NAME",
                        "type": ["string", "null"],
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }

                    },
                    "centreCode": {
                        "title": "CENTER_NAME",
                        "type": ["number", "null"],
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "parentEnumCode":"branch"
                        }
                    },
                    "sanction_date": {
                        "title": "SANCTION_DATE",
                        "type": "string",
                        "x-schema-form": {
                            "type": "date"
                        }
                    },
                    "loan_product": {
                        "title": "Loan Product",
                        "type": "string",
                        "default": "1",
                        "x-schema-form": {
                            "type": "select",
                            "enumCode": "loan_product"
                        }
                    },
                    "account_number": {
                        "title": "LOAN_ACCOUNT_NUMBER",
                        "type": "string"
                    }
                    // "customer_name": {
                    //     "title": "CUSTOMER_NAME",
                    //     "type": "string",
                    //     "x-schema-form": {
                    //         "type": "select"
                    //     }
                    // },
                    // "entity_name": {
                    //     "title": "ENTITY_NAME",
                    //     "type": "string",
                    //     "x-schema-form": {
                    //         "type": "select"
                    //     }
                    // }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                if (_.hasIn(searchOptions, 'centreCode')){
                    searchOptions.centreCodeForSearch = LoanBookingCommons.getCentreCodeFromId(searchOptions.centreCode, formHelper);
                }
                return IndividualLoan.search({
                    'stage': 'LoanBooking',
                    'branchName': searchOptions.branchName,
                    'centreCode': searchOptions.centreCodeForSearch,
                    'customerId': null,
                    'accountNumber':null,
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage,
                    'sortBy':searchOptions.sortBy
                }).$promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count'];
                }
            },
            listOptions: {
                itemCallback: function(item, index) {
                    $log.info(item);
                },
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName ,
                        "<em>Loan Amount: Rs."+item.loanAmount+", Sanction Date: "+item.sanctionDate + "</em>",
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "Book Loan",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                $state.go('Page.Engine', {pageName: 'loans.individual.booking.LoanBooking', pageId: item.loanId});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.booking.CaptureDisbursement"),
["$log", "Enrollment", "SessionStore", "$state", "SchemaResource", function($log, Enrollment, SessionStore, $state, SchemaResource){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "LOAN_BOOKING_SCREEN",
        initialize: function (model, form, formCtrl) {
            $log.info("Loan Booking Screen got initialized");
        },
        offline: false,
        getOfflineDisplayItem: function(item, index){

        },
        form: [{
            "type": "box",
            "title": "LOAN_ACCOUNT", // sample label code
            "colClass": "col-sm-12", // col-sm-6 is default, optional

            "items": [
                {
                    "key": "loanAccount.accountNumber",
                    
                    "readonly": true,
                    "type": "number"
                },
                {
                    "key": "loanAccount.disbursementSchedules.customerSignatureDate",
                    
                    "type": "date",
                    "required": true,
                    "onChange": function(modelValue, form, model, formCtrl, event) {
                        model.loanAccount.scheduledDisbursementDate = moment(modelValue).add(2,"days");
                    }
                },
                {
                    "key": "loanAccount.disbursementSchedules.scheduledDisbursementDate",
                    
                    "type": "date"
                },
                {
                    "type": "submit",
                    "title": "SUBMIT"
                }
            ]
        }],
        schema: function() {
            return SchemaResource.getLoanAccountSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                // Disbursement Date should be >= Sanction Date + 30 days
                // if (model.loanAccount.sanctionDate <= model.loanAccount.scheduledDisbursementDate-30)
                {
                    $log.info("Redirecting");
                    $state.go('Page.Engine', {pageName: 'loans.individual.booking.PendingQueue', pageId: ''});
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.booking.DocumentUpload"), ["$log", "Enrollment", "SessionStore", "$state", '$stateParams', 'PageHelper', 'IndividualLoan', 'Queries', 'Utils', 'formHelper', "LoanProcess", "CustomerBankBranch", "SchemaResource", "LoanAccount",
    function($log, Enrollment, SessionStore, $state, $stateParams, PageHelper, IndividualLoan, Queries, Utils, formHelper, LoanProcess, CustomerBankBranch, SchemaResource, LoanAccount) {


        var getDocument = function(docsArr, docCode) {
            var i = 0;
            for (i = 0; i < docsArr.length; i++) {
                if (docsArr[i].docCode == docCode) {
                    return docsArr[i];
                }
            }
            return null;
        }

        return {
            "type": "schema-form",
            "title": "LOAN_DOCUMENT_UPLOAD_QUEUE",
            "subTitle": " ",
            initialize: function(model, form, formCtrl) {
                $log.info("Demo Customer Page got initialized");

                if (!model._queue) {
                    $log.info("Screen directly launched hence redirecting to queue screen");
                    $state.go('Page.Engine', {
                        pageName: 'loans.individual.booking.DocumentUploadQueue',
                        pageId: null
                    });
                    return;
                }

                var loanId = $stateParams['pageId'];
                PageHelper.showProgress('loan-load', 'Loading loan details...');
                PageHelper.showLoader();
                IndividualLoan.get({
                        id: $stateParams.pageId
                    })
                    .$promise
                    .then(
                        function(res) {
                            PageHelper.showProgress('loan-load', 'Loading done.', 2000);
                            model.loanAccount = res;
                            model.loanAccount.disbursementSchedules[0].party = model.loanAccount.disbursementSchedules[0].party || 'CUSTOMER';

                            Queries.getLoanProductDocuments(model.loanAccount.productCode, "LoanBooking", "DocumentUpload")
                                .then(
                                    function(docs) {
                                        var docsForProduct = [];
                                        for (var i = 0; i < docs.length; i++) {
                                            var doc = docs[i];
                                            docsForProduct.push({
                                                docTitle: doc.document_name,
                                                docCode: doc.document_code,
                                                formsKey: doc.forms_key,
                                                downloadRequired: doc.download_required
                                            })
                                        }
                                        var loanDocuments = model.loanAccount.loanDocuments;
                                        var availableDocCodes = [];

                                        for (var i = 0; i < loanDocuments.length; i++) {
                                            availableDocCodes.push(loanDocuments[i].document);
                                            var documentObj = getDocument(docsForProduct, loanDocuments[i].document);
                                            if (documentObj != null) {
                                                loanDocuments[i].$title = documentObj.docTitle;
                                                loanDocuments[i].$key = documentObj.formsKey;
                                                loanDocuments[i].$downloadRequired = documentObj.downloadRequired;
                                            } else {
                                                loanDocuments[i].$title = "DOCUMENT_TITLE_NOT_MAINTAINED";
                                            }

                                        }
                                        for (var i = 0; i < docsForProduct.length; i++) {
                                            if (_.indexOf(availableDocCodes, docsForProduct[i].docCode) == -1) {
                                                loanDocuments.push({
                                                    document: docsForProduct[i].docCode,
                                                    $downloadRequired: docsForProduct[i].downloadRequired,
                                                    $title: docsForProduct[i].docTitle,
                                                    $formsKey: docsForProduct[i].formsKey,
                                                    disbursementId: model.loanAccount.disbursementSchedules[0].id
                                                })
                                            }
                                        }

                                        if (model._queue.accountNumber != null) {
                                            LoanAccount.activateLoan({
                                                "accountId": model._queue.accountNumber
                                            }, function(data) {
                                                $log.info("Inside success of activateLoan");
                                                LoanProcess.generateScheduleForSpecifiedDate({
                                                "accountNumber": model._queue.accountNumber,
                                                "amount":model.loanAccount.disbursementSchedules[0].disbursementAmount,
                                                "scheduledDisbursementDate":model.loanAccount.disbursementSchedules[0].scheduledDisbursementDate,
                                                "firstRepaymentDate":model.loanAccount.firstRepaymentDate
                                            })
                                                    .$promise
                                                    .then(function(resp) {}, function(httpRes) {
                                                        PageHelper.showProgress('loan-load', 'Failed to load the EMI Schedule. Try again.', 4000);
                                                        PageHelper.showErrors(httpRes);
                                                    });
                                            }, function(res) {
                                                PageHelper.hideLoader();
                                                PageHelper.showErrors(res);
                                                PageHelper.showProgress('disbursement', 'Error while activating loan.', 2000);
                                            });
                                        }
                                    },
                                    function(httpRes) {

                                    }
                                )
                                .finally(function(httpRes) {

                                })
                            PageHelper.hideLoader();
                        },
                        function(httpRes) {
                            PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                            PageHelper.showErrors(httpRes);
                            PageHelper.hideLoader();
                        }
                    )
            },

            form: [{
                "type": "box",
                "title": "DISBURSEMENT_DETAILS",
                "colClass": "col-sm-12",
                "items": [{
                    "type": "fieldset",
                    "title": "DISBURSEMENT_ACCOUNT_DETAILS",
                    "items": [{
                        "key": "loanAccount.disbursementSchedules[0].party",
                        "type": "radios",
                        "titleMap": [{
                            "name": "Customer",
                            "value": "CUSTOMER"
                        }, {
                            "name": "Vendor",
                            "value": "VENDOR"
                        }],
                        onChange: function(value, form, model) {
                            model.loanAccount.customerBankAccountNumber = '';
                            model.loanAccount.customerBankIfscCode = '';
                            model.loanAccount.customerBank = '';
                            model.loanAccount.customerBranch = '';
                            model.loanAccount.disbursementSchedules[0].customerNameInBank = '';
                        }
                    }, {
                        key: "loanAccount.disbursementSchedules[0].customerNameInBank",
                        title: "CUSTOMER_NAME_IN_BANK"
                    }, {
                        key: "loanAccount.customerBankAccountNumber",
                        type: "lov",
                        autolov: true,
                        title: "CUSTOMER_BANK_ACC_NO",
                        "condition": "model.loanAccount.disbursementSchedules[0].party=='CUSTOMER'",
                        bindMap: {
                            "customerId": "loanAccount.customerId"
                        },
                        outputMap: {
                            "account_number": "loanAccount.customerBankAccountNumber",
                            "ifsc_code": "loanAccount.customerBankIfscCode",
                            "customer_bank_name": "loanAccount.customerBank",
                            "customer_bank_branch_name": "loanAccount.customerBranch",
                            "customer_name_as_in_bank":"loanAccount.customerNameAsInBank"
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form, model) {
                            var urn = [];
                            for(var i =0; i <model.loanAccount.loanCustomerRelations.length; i++)
                            {
                                urn.push(model.loanAccount.loanCustomerRelations[i].urn);   
                            }
                            urn.push(model.loanAccount.urnNo);
                            return Queries.getCustomersBankAccounts({
                               customer_urns : urn,
                               customer_ids : model.loanAccount.customerId
                            });
                        },
                        onSelect: function(result, model, context) {
                            model.loanAccount.disbursementSchedules[0].customerNameInBank = model.loanAccount.customerNameAsInBank;
                        },

                        getListDisplayItem: function(item, index) {
                            return [
                                'Account Number : ' +item.account_number,
                                'Branch : ' + item.customer_bank_branch_name,
                                'Bank : ' + item.customer_bank_name,
                                'IFSC Code : ' + item.ifsc_code

                            ];
                        }
                    }, {
                        key: "loanAccount.customerBankAccountNumber",
                        title: "CUSTOMER_BANK_ACC_NO",
                        "condition": "model.loanAccount.disbursementSchedules[0].party=='VENDOR'"
                    }, {
                        key: "loanAccount.customerBankIfscCode",
                        title: "CUSTOMER_BANK_IFSC",
                        "condition": "model.loanAccount.disbursementSchedules[0].party=='CUSTOMER'"
                    }, {
                        key: "loanAccount.customerBankIfscCode",
                        type: "lov",
                        lovonly: true,
                        "condition": "model.loanAccount.disbursementSchedules[0].party=='VENDOR'",
                        inputMap: {
                            "ifscCode": {
                                "key": "loanAccount.customerBankIfscCode"
                            },
                            "bankName": {
                                "key": "loanAccount.customerBank"
                            },
                            "branchName": {
                                "key": "loanAccount.customerBranch"
                            }
                        },
                        outputMap: {
                            "bankName": "loanAccount.customerBank",
                            "branchName": "loanAccount.customerBranch",
                            "ifscCode": "loanAccount.customerBankIfscCode"
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form) {
                            var promise = CustomerBankBranch.search({
                                'bankName': inputModel.bankName,
                                'ifscCode': inputModel.ifscCode,
                                'branchName': inputModel.branchName
                            }).$promise;
                            return promise;
                        },
                        getListDisplayItem: function(data, index) {
                            return [
                                data.ifscCode,
                                data.branchName,
                                data.bankName
                            ];
                        }
                    }, {
                        key: "loanAccount.customerBank",
                        title: "CUSTOMER_BANK"
                    }, {
                        key: "loanAccount.customerBranch",
                        title: "BRANCH_NAME"
                    }]
                }]
            }, {
                "type": "box",
                "colClass": "col-sm-12",
                "title": "LOAN_DOCUMENT_UPLOAD_QUEUE",
                "items": [{
                        "key": "_queue.centreName",
                        "title": "CENTRE",
                        "readonly": true
                    }, {
                        "key": "_queue.customerName",
                        "title": "ENTITY_NAME",
                        "readonly": true
                    }, {
                        "type": "button",
                        "title": "DOWNLOAD_ALL_FORMS",
                        "onClick": function(model, form, schemaForm, event) {
                            Utils.downloadFile(irf.MANAGEMENT_BASE_URL + "/forms/AllFormsDownload.php?record_id=" + model.loanAccount.id);
                        }
                    }, {
                        "type": "fieldset",
                        "title": "LOAN_DOCUMENT_UPLOAD_QUEUE",
                        "items": [{
                            "type": "array",
                            "notitle": true,
                            "view": "fixed",
                            "key": "loanAccount.loanDocuments",
                            "add": null,
                            "remove": null,
                            "items": [{
                                "type": "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-sm-3",
                                    "items": [{
                                        "key": "loanAccount.loanDocuments[].$title",
                                        "notitle": true,
                                        "titleExpr": "model.loanAccount.loanDocuments[arrayIndex].$title",
                                        "type": "anchor",
                                        "fieldHtmlClass": "text-bold",
                                        "condition": "model.loanAccount.loanDocuments[arrayIndex].$downloadRequired",
                                        "onClick": function(model, form, schemaForm, event) {
                                            var doc = model.loanAccount.loanDocuments[event.arrayIndex];
                                            console.log(doc);
                                            Utils.downloadFile(irf.FORM_DOWNLOAD_URL + "?form_name=" + doc.$formsKey + "&record_id=" + model.loanAccount.id)
                                        }
                                    },{
                                        "key": "loanAccount.loanDocuments[].$title",
                                        "notitle": true,
                                        "title": " ",
                                        "condition": "!model.loanAccount.loanDocuments[arrayIndex].$downloadRequired",
                                        "readonly": true
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-2",
                                    "key": "loanAccount.loanDocuments[].documentStatus",
                                    "items": [{
                                        "notitle": true,
                                        "key": "loanAccount.loanDocuments[].documentStatus",
                                        "readonly": true
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-4",
                                    "key": "loanAccount.loanDocuments[].remarks",
                                    "condition": "model.loanAccount.loanDocuments[arrayIndex].documentStatus === 'APPROVED'",
                                    "items": [{
                                        "notitle": true,
                                        "key": "loanAccount.loanDocuments[].remarks",
                                        "readonly": true
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-4",
                                    "key": "loanAccount.loanDocuments[].documentStatus",
                                    "condition": "model.loanAccount.loanDocuments[arrayIndex].documentStatus === 'REJECTED' && !model.loanAccount.loanDocuments[arrayIndex].remarks",
                                    "items": [{
                                        "notitle": true,
                                        "key": "loanAccount.loanDocuments[].rejectReason",
                                        "readonly": true
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-2",
                                    "key": "loanAccount.loanDocuments[].documentStatus",
                                    "condition": "model.loanAccount.loanDocuments[arrayIndex].documentStatus === 'REJECTED' && model.loanAccount.loanDocuments[arrayIndex].remarks",
                                    "items": [{
                                        "notitle": true,
                                        "key": "loanAccount.loanDocuments[].rejectReason",
                                        "readonly": true
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-2",
                                    "key": "loanAccount.loanDocuments[].documentStatus",
                                    "condition": "model.loanAccount.loanDocuments[arrayIndex].documentStatus === 'REJECTED' && model.loanAccount.loanDocuments[arrayIndex].remarks",
                                    "items": [{
                                        "notitle": true,
                                        "key": "loanAccount.loanDocuments[].remarks",
                                        "readonly": true
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-4",
                                    "key": "loanAccount.loanDocuments[].documentStatus",
                                    "condition": "model.loanAccount.loanDocuments[arrayIndex].documentStatus !== 'REJECTED' && model.loanAccount.loanDocuments[arrayIndex].documentStatus !== 'APPROVED'"
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-3",
                                    "items": [{
                                        title: "Upload",
                                        key: "loanAccount.loanDocuments[].documentId",
                                        "required": true,
                                        type: "file",
                                        fileType: "*/*",
                                        category: "Loan",
                                        subCategory: "DOC1",
                                        "notitle": true
                                    }]
                                }]
                            }] // END of array items
                        }]
                    }] // END of box items
            }, {
                "type": "actionbox",
                "items": [{
                    "type": "button",
                    "title": "BACK",
                    "onClick": "actions.goBack(model, formCtrl, form, $event)"
                }, {
                    "type": "submit",
                    "title": "Submit"
                }]
            }],
            schema: function() {
                return SchemaResource.getLoanAccountSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {
                    $log.info("Redirecting");

                    if (model.loanAccount.disbursementSchedules && model.loanAccount.disbursementSchedules.length) {
                        for (var i = model.loanAccount.disbursementSchedules.length - 1; i >= 0; i--) {
                            model.loanAccount.disbursementSchedules[i].customerAccountNumber = model.loanAccount.customerBankAccountNumber;
                            model.loanAccount.disbursementSchedules[i].ifscCode = model.loanAccount.customerBankIfscCode;
                            model.loanAccount.disbursementSchedules[i].customerBankName = model.loanAccount.customerBank;
                            model.loanAccount.disbursementSchedules[i].customerBankBranchName = model.loanAccount.customerBranch;
                            model.loanAccount.disbursementSchedules[i].party = model.loanAccount.disbursementSchedules[0].party;
                            model.loanAccount.disbursementSchedules[i].customerNameInBank = model.loanAccount.disbursementSchedules[0].customerNameInBank;
                        }
                    }
                    var reqData = {
                        'loanAccount': _.cloneDeep(model.loanAccount),
                        'loanProcessAction': 'PROCEED'
                    };
                    PageHelper.showProgress('update-loan', 'Working...');
                    PageHelper.showLoader();
                    return IndividualLoan.update(reqData)
                        .$promise
                        .then(
                            function(res) {
                                PageHelper.showProgress('update-loan', 'Done.', 2000);
                                $state.go('Page.Engine', {
                                    pageName: 'loans.individual.booking.DocumentUploadQueue'
                                });
                                return;
                            },
                            function(httpRes) {
                                PageHelper.showProgress('update-loan', 'Unable to proceed.', 2000);
                                PageHelper.showErrors(httpRes);
                            }
                        )
                        .finally(function() {
                            PageHelper.hideLoader();
                        })
                        //
                        //$state.go('Page.Engine', {pageName: 'loans.individual.booking.PendingQueue', pageId: ''});
                },
                goBack: function(model, formCtrl, form, $event) {
                    $state.go("Page.Engine", {
                        pageName: 'loans.individual.booking.DocumentUploadQueue',
                        pageId: null
                    });
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("loans.individual.booking.DocumentVerification"), ["$log", "SessionStore", "$state", "$stateParams", "PageHelper", "IndividualLoan", "LoanBookingCommons", "Utils", "Files", "Queries", "formHelper", "$q", "$filter",
    function($log, SessionStore, $state, $stateParams, PageHelper, IndividualLoan, LoanBookingCommons, Utils, Files, Queries, formHelper, $q, $filter) {

        var docRejectReasons = [];
        Queries.getLoanProductDocumentsRejectReasons().then(function(resp){
            docRejectReasons = resp;
        });

        return {
            "type": "schema-form",
            "title": "DOCUMENT_VERIFICATION",
            "subTitle": " ",
            initialize: function(model, form, formCtrl) {
                $log.info("Demo Customer Page got initialized");

                var loanId = $stateParams['pageId'];
                PageHelper.showProgress('loan-load', 'Loading loan details...');
                PageHelper.showLoader();
                IndividualLoan.get({ id: $stateParams.pageId }).$promise.then(function(res) {
                    PageHelper.showProgress('loan-load', 'Loading done.', 2000);
                    model.loanAccount = res;
                    model.loanAccount.disbursementSchedules[0].party = model.loanAccount.disbursementSchedules[0].party || 'CUSTOMER';
                    var loanDocuments = model.loanAccount.loanDocuments;
                    var availableDocCodes = [];
                    LoanBookingCommons.getDocsForProduct(model.loanAccount.productCode, "LoanBooking", "DocumentUpload").then(function(docsForProduct) {
                        $log.info(docsForProduct);
                        for (var i = 0; i < loanDocuments.length; i++) {
                            availableDocCodes.push(loanDocuments[i].document);
                            var documentObj = LoanBookingCommons.getDocumentDetails(docsForProduct, loanDocuments[i].document);
                            if (documentObj != null) {
                                loanDocuments[i].$title = documentObj.document_name;
                            } else {
                                loanDocuments[i].$title = "DOCUMENT_TITLE_NOT_MAINTAINED";
                            }
                        }
                        PageHelper.hideLoader();
                    },
                    function(httpRes) {
                        PageHelper.hideLoader();
                    });
                },
                function(httpRes) {
                    PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                    PageHelper.showErrors(httpRes);
                });
            },
            form: [{
                "type": "box",
                "title": "DISBURSEMENT_DETAILS",
                "colClass": "col-sm-12",
                "items": [{
                    "type": "fieldset",
                    "title": "DISBURSEMENT_ACCOUNT_DETAILS",
                    "items": [{
                        "key": "loanAccount.disbursementSchedules[0].party",
                        "type": "text",
                        "readonly":true,
                        "title":"PARTY"
                    }, {
                        key: "loanAccount.disbursementSchedules[0].customerNameInBank",
                        title: "CUSTOMER_NAME_IN_BANK",
                        "readonly":true,
                        "condition": "model.loanAccount.disbursementSchedules[0].party=='VENDOR'"
                    }, {
                        key: "loanAccount.customerBankAccountNumber",
                        title: "CUSTOMER_BANK_ACC_NO",
                        "readonly":true
                    }, {
                        key: "loanAccount.customerBankIfscCode",
                        title: "CUSTOMER_BANK_IFSC",
                        "readonly":true
                    }, {
                        key: "loanAccount.customerBank",
                        "readonly":true,
                        title: "CUSTOMER_BANK"
                    }, {
                        key: "loanAccount.customerBranch",
                        "readonly":true,
                        title: "BRANCH_NAME"
                    }]
                }]
            },
            {
                "type": "box",
                "colClass": "col-sm-12",
                "title": "DOCUMENT_VERIFICATION",
                "htmlClass": "text-danger",
                "items": [{
                        "key": "_queue.centreName",
                        "title": "CENTRE",
                        "readonly": true
                    }, {
                        "key": "_queue.customerName",
                        "title": "ENTITY_NAME",
                        "readonly": true
                    }, {
                        "type": "fieldset",
                        "title": "DOCUMENT_VERIFICATION",
                        "items": [{
                            "type": "array",
                            "notitle": true,
                            "view": "fixed",
                            "key": "loanAccount.loanDocuments",
                            "add": null,
                            "remove": null,
                            "items": [{
                                "type": "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-sm-3",
                                    "items": [{
                                        "key": "loanAccount.loanDocuments[].$title",
                                        "notitle": true,
                                        "title": " ",
                                        "readonly": true
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-2",
                                    "key": "loanDocs[].downloadRequired",
                                    //"condition": "model.loanDocs[arrayIndex].downloadRequired==true",
                                    "items": [{
                                        "title": "DOWNLOAD_FORM",
                                        "notitle": true,
                                        "fieldHtmlClass": "btn-block",
                                        "style": "btn-default",
                                        "icon": "fa fa-download",
                                        "type": "button",
                                        "readonly": false,
                                        "key": "loanAccount.loanDocs[].documentId",
                                        "onClick": function(model, form, schemaForm, event) {
                                            var fileId = model.loanAccount.loanDocuments[schemaForm.arrayIndex].documentId;
                                            Utils.downloadFile(Files.getFileDownloadURL(fileId));
                                        }
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-2",
                                    "items": [{
                                        "key": "loanAccount.loanDocuments[].documentStatus",
                                        "title": "Status",
                                        "notitle": true,
                                        "type": "select",
                                        "titleMap": [{
                                            value: "REJECTED",
                                            name: "Rejected"
                                        }, {
                                            value: "APPROVED",
                                            name: "Approved"
                                        }]
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-3",
                                    "condition": "model.loanAccount.loanDocuments[arrayIndex].documentStatus === 'REJECTED'",
                                    "items": [{
                                        title: "Reason",
                                        notitle: true,
                                        placeholder: "Reason",
                                        key: "loanAccount.loanDocuments[].rejectReason",
                                        type: "lov",
                                        lovonly: true,
                                        searchHelper: formHelper,
                                        search: function(inputModel, form, model, context) {
                                            var f = $filter('filter')(docRejectReasons, {"document_code": model.loanAccount.loanDocuments[context.arrayIndex].document},true);
                                            return $q.resolve({
                                                "header": {
                                                    "x-total-count": f && f.length
                                                },
                                                "body": f
                                            });
                                        },
                                        getListDisplayItem: function(item, index) {
                                            return [item.reject_reason];
                                        },
                                        onSelect: function(result, model, context) {
                                            model.loanAccount.loanDocuments[context.arrayIndex].rejectReason = result.reject_reason;
                                        }
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-2",
                                    "condition": "model.loanAccount.loanDocuments[arrayIndex].documentStatus === 'REJECTED'",
                                    "items": [{
                                        title: "Remarks",
                                        notitle: true,
                                        placeholder: "Remarks",
                                        key: "loanAccount.loanDocuments[].remarks"
                                    }]
                                }, {
                                    "type": "section",
                                    "htmlClass": "col-sm-5",
                                    "condition": "model.loanAccount.loanDocuments[arrayIndex].documentStatus !== 'REJECTED'",
                                    "items": [{
                                        title: "Remarks",
                                        notitle: true,
                                        placeholder: "Remarks",
                                        key: "loanAccount.loanDocuments[].remarks"
                                    }]
                                }]
                            }] // END of array items
                        }]
                    }] // END of box items
            }, {
                "type": "actionbox",
                "items": [{
                    "type": "button",
                    "title": "BACK",
                    "onClick": "actions.goBack(model, formCtrl, form, $event)"
                }, {
                    "type": "submit",
                    "title": "Submit"
                }]
            }],
            schema: {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "userRoles": {
                        "type": "object",
                        "properties": {
                            "userId": {
                                "type": "string",
                                "title": "User ID"
                            }
                        }
                    }
                }
            },
            actions: {
                submit: function(model, form, formName) {
                    var reqData = {
                        'loanAccount': _.cloneDeep(model.loanAccount),
                        'loanProcessAction': 'PROCEED'
                    };
                    var docStatuses = [];
                    var allowedStatues = ['APPROVED', 'REJECTED'];
                    var redirectToUploadFlag = false;
                    for (var i = 0; i < reqData.loanAccount.loanDocuments.length; i++) {
                        var doc = reqData.loanAccount.loanDocuments[i];
                        if (_.indexOf(allowedStatues, doc.documentStatus) == -1) {
                            PageHelper.showProgress('update-loan', 'Invalid document status selected. Only Approved or Rejected are allowed.');
                            return;
                        }

                        if (doc.documentStatus == 'REJECTED') {
                            redirectToUploadFlag = true;
                        }
                    }

                    if (redirectToUploadFlag == true) {
                        reqData['stage'] = 'DocumentUpload';
                    }

                    PageHelper.showProgress('update-loan', 'Working...');
                    PageHelper.showLoader();
                    console.log(JSON.stringify(reqData));
                    return IndividualLoan.update(reqData)
                        .$promise
                        .then(
                            function(res) {
                                PageHelper.showProgress('update-loan', 'Done.', 2000);
                                $state.go('Page.Engine', {
                                    pageName: 'loans.individual.booking.PendingVerificationQueue'
                                });
                                return;
                            },
                            function(httpRes) {
                                PageHelper.showProgress('update-loan', 'Unable to proceed.', 2000);
                                PageHelper.showErrors(httpRes);
                            }
                        )
                        .finally(function() {
                            PageHelper.hideLoader();
                        })
                },
                goBack: function(model, formCtrl, form, $event) {
                    $state.go("Page.Engine", {
                        pageName: 'loans.individual.booking.PendingVerificationQueue',
                        pageId: null
                    });
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("loans.individual.booking.PendingVerificationQueue"),
["$log", "formHelper", "Enrollment", "$state", "SessionStore", "$q", "IndividualLoan", "entityManager", "LoanBookingCommons",
function($log, formHelper, Enrollment, $state, SessionStore, $q, IndividualLoan, entityManager, LoanBookingCommons){
    return {
        "type": "search-list",
        "title": "LOAN_PENDING_VERIFICATION_QUEUE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
        
            model.stage = 'DocumentVerification';
            console.log(model);
        },

        offline: false,
        definition: {
            title: "LOAN_TYPE",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "customer name":"Customer Name",
                "centre id":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": "VIEW_LOANS",
                "required":["branch"],
                "properties": {
                    "branchName": {
                        "title": "BRANCH_NAME",
                        "type": ["string", "null"],
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }

                    },
                    "centreCode": {
                        "title": "CENTER_NAME",
                        "type": ["number", "null"],
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "parentEnumCode":"branch"
                        }
                    },
                    "loan_product": {
                        "title": "Loan Product",
                        "type": "string",
                        "default": "1",
                        "x-schema-form": {
                            "type": "select",
                            /*"titleMap": {
                                "1": "Asset Purchase- Secured",
                                "2": "Working Capital - Secured",
                                "3": "Working Capital -Unsecured",
                                "4": "Machine Refinance- Secured",
                                "5": "Business Development- Secured",
                                "6": "Business Development- Unsecured",
                                "7": "LOC- RFD-Secured",
                                "8": "LOC- RFD-Unsecured",
                                "9": "LOC RFID- Secured",
                                "10": "LOC- RFID- Unsecured"
                            }*/
                            "enumCode": "loan_product"
                        }
                    }
                    // "sanction_date": {
                    //     "title": "SANCTION_DATE",
                    //     "type": "string",
                    //     "x-schema-form": {
                    //         "type": "date"
                    //     }
                    // }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                if (_.hasIn(searchOptions, 'centreCode')){
                    searchOptions.centreCodeForSearch = LoanBookingCommons.getCentreCodeFromId(searchOptions.centreCode, formHelper);
                }
                return IndividualLoan.search({
                    'stage': 'DocumentVerification',
                    'branchName': searchOptions.branchName,
                    'centreCode': searchOptions.centreCodeForSearch,
                    'customerId': searchOptions.customerId,
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage,
                }).$promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                expandable: true,
                itemCallback: function(item, index) {
                },
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName ,
                        "<em>Loan Amount: Rs."+item.loanAmount+", Sanction Date: "+item.sanctionDate + "</em>",
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "VERIFY_DOCUMENT",
                            desc: "",
                            fn: function(item, index){
                                entityManager.setModel('loans.individual.booking.DocumentVerification', {_queue:item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.booking.DocumentVerification', pageId: item.loanId});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.booking.Disburse"),
["$log", "Enrollment", "SessionStore","$state", "$stateParams", function($log, Enrollment, SessionStore,$state,$stateParams){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "DISBURSE_LOAN",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("Individual Loan Booking Page got initialized");
        },
        offline: false,
        getOfflineDisplayItem: function(item, index){
            
        },
        form: [{
            "type": "box",
            "title": "DISBURSEMENT_DETAILS", // sample label code
            "colClass": "col-sm-12", // col-sm-6 is default, optional
            //"readonly": false, // default-false, optional, this & everything under items becomes readonly
            "items": [
                {
                    
                    "title": "BANK_NAME",
                    "key": "loanAccount.bank_name",
                    "type": "select",
                    "enumCode": "bank"
                    /*"titleMap": {
                                "1": "ICICI Bank",
                                "2": "Kotak Mahindra Bank"
                            }*/
                },
                {
                    "key": "loanAccount.customerBranch"
                },
                {

                    "key": "loanAccount.accountNumber"
                },
                {

                    
                    "key": "loanAccount.applicationStatus",
                    "type": "select",
                    "enumCode": "status"
                    /*"titleMap": {
                                "1": "Sent To Bank",
                                "2": "Reject"
                            }*/
                },
                {

                    "key": "loanAccount.reject_reason",
                    "title": "REJECTED_REASON",
                    "type": "select",
                    "enumCode": "reject_reason"
                },
                {

                    "key": "loanAccount.reject_remarks",
                    "title": "REJECT_REMARKS"
                },
                {
                    "type": "actionbox",
                    "items": [{
                        "type": "submit",
                        "title": "Disburse"
                    },{
                        "type": "submit",
                        "title": "Reject"
                    }]
                }
            ]
        }],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                    $state.go("Page.Engine", {
                        pageName: 'IndividualLoanBookingConfirmation',
                        pageId: model.customer.id
                    });
            }
        }
    };
}]);
irf.pageCollection.factory(irf.page("loans.individual.booking.LoanBooking"),
    ["$log", "IndividualLoan", "SessionStore", "$state", "$stateParams", "SchemaResource", "PageHelper", "Enrollment", "Utils","Queries",
    function ($log, IndividualLoan, SessionStore, $state, $stateParams, SchemaResource, PageHelper, Enrollment, Utils,Queries) {

        var branch = SessionStore.getBranch();
        var pendingDisbursementDays;

        Queries.getGlobalSettings("loan.individual.booking.pendingDisbursementDays").then(function(value){
            pendingDisbursementDays = Number(value);
            $log.info("pendingDisbursementDays:" + pendingDisbursementDays);
        },function(err){
            $log.info("pendingDisbursementDays is not available");
        });

        var populateDisbursementDate = function(modelValue,form,model){
            if (modelValue){
                modelValue = new Date(modelValue);
                model._currentDisbursement.scheduledDisbursementDate = new Date(modelValue.setDate(modelValue.getDate()+1));
            }
        };

        return {
            "type": "schema-form",
            "title": "CAPTURE_DATES",
            "subTitle": "",
            initialize: function (model, form, formCtrl) {
                $log.info("Individual Loan Booking Page got initialized");
                PageHelper.showProgress('load-loan', 'Loading loan account...');
                IndividualLoan.get({id: $stateParams.pageId})
                    .$promise
                    .then(
                        function (res) {


                            /* DO BASIC VALIDATION */
                            if (res.currentStage!= 'LoanBooking'){
                                PageHelper.showProgress('load-loan', 'Loan is in different Stage', 2000);
                                $state.go('Page.Engine', {pageName: 'loans.individual.booking.PendingQueue'});
                                return;
                            }

                            if (_.has(res, 'disbursementSchedules') &&
                                _.isArray(res.disbursementSchedules) &&
                                res.disbursementSchedules.length > 0 &&
                                res.numberOfDisbursed < res.disbursementSchedules.length){
                                model._currentDisbursement = res.disbursementSchedules[res.numberOfDisbursed];
                            } else {
                                PageHelper.showProgress('load-loan', 'No disbursement schedules found for the loan', 2000);
                                $state.go('Page.Engine', {pageName: 'loans.individual.booking.PendingQueue'});
                                return;
                            }

                            model.loanAccount = res;
                            PageHelper.showProgress('load-loan', 'Almost Done...');

                            if(model.loanAccount.collateral.length > 0){
                                for (var i = model.loanAccount.collateral.length - 1; i >= 0; i--) {
                                    if(model.loanAccount.collateral[i].loanToValue != "" && model.loanAccount.collateral[i].loanToValue != null)
                                        model.loanAccount.collateral[i].loanToValue = Number(model.loanAccount.collateral[i].loanToValue);
                                    else
                                        model.loanAccount.collateral[i].loanToValue = 0;
                                }
                            }

                            /* Now load the customer */
                            Enrollment.getCustomerById({id: model.loanAccount.customerId})
                                .$promise
                                .then(
                                    function (res) {
                                        model.loanAccount.customer = res;
                                        PageHelper.showProgress('load-loan', 'Done.', 2000);
                                    }, function (httpRes) {
                                        PageHelper.showProgress('load-loan', "Error while loading customer details", 2000);
                                    }
                                )
                        }, function (httpRes) {
                            PageHelper.showProgress('load-loan', 'Some error while loading the loan details', 2000)
                        }
                    )
            },
            offline: false,
            getOfflineDisplayItem: function (item, index) {
            },
            form: [{
                "type": "box",
                "title": "UPDATE_ACCOUNT", // sample label code
                "colClass": "col-sm-6", // col-sm-6 is default, optional
                //"readonly": false, // default-false, optional, this & everything under items becomes readonly
                "items": [
                    {
                        "key": "_currentDisbursement.customerSignatureDate",
                        "title": "CUSTOMER_SIGNATURE_DATE",
                        "type": "date",
                        "required": true,
                        "onChange":function(modelValue,form,model){
                            populateDisbursementDate(modelValue,form,model);
                        }
                    },
                    {
                        "key": "_currentDisbursement.scheduledDisbursementDate",
                        "title": "SCHEDULED_DISBURSEMENT_DATE",
                        "type": "date",
                        "required": true
                    },
                    {
                        "key": "loanAccount.firstRepaymentDate",
                        "title": "REPAYMENT_DATE",
                        "type": "date",
                        "required": true
                    },
                    {
                        "type": "actionbox",
                        "items": [{
                            "type": "button",
                            "title": "BACK",
                            "onClick": "actions.reenter(model, formCtrl, form, $event)"
                        },
                        {
                            "type": "button",
                            "title": "SEND_BACK",
                            "onClick": "actions.reject(model, formCtrl, form, $event)"
                        },
                        {
                            "type": "submit",
                            "title": "CONFIRM_LOAN_CREATION"
                        }]
                    }
                ]
            }, {
                "type": "box",
                "title": "LOAN_DETAILS", // sample label code
                "colClass": "col-sm-6", // col-sm-6 is default, optional
                //"readonly": false, // default-false, optional, this & everything under items becomes readonly
                "items": [

                    {
                        "key": "loanAccount.partnerCode",
                        "title": "PARTNER_NAME",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.loanType",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.frequency",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.customer.firstName",
                        "title": "CUSTOMER_NAME",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.customer.urnNo",
                        "title": "CUSTOMER_URN",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.tenure",
                        "title": "DURATION_IN_MONTHS",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.loanAmount",
                        "title": "LOAN_AMOUNT",
                        "type":"amount",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.loanApplicationDate",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.loanPurpose1",
                        "readonly": true
                    },
                    /*{
                        "key": "loanAccount.loanPurpose2",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.loanPurpose3",
                        "readonly": true
                    },*/
                    {
                        "key": "loanAccount.loanCentre.centreId",
                        "title": "CENTRE",
                        "readonly": true,
                        "type":"select"
                    },
                    {
                        "key": "loanAccount.interestRate",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.processingFeePercentage",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.portfolioInsurancePremium",
                        "title": "INSURANCE",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.commercialCibilCharge",
                        "title": "CIBIL_CHARGES",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.loanAmountRequested",
                        "title": "LOAN_AMOUNT_REQUESTED",
                        "type":"amount",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.securityEmiRequired",
                        "readonly": true
                    },
                    {
                        "key": "loanAccount.sanctionDate",
                        "readonly": true
                    }/*,
                    {
                        "type": "fieldset",
                        "title": "GUARANTOR_DETAILS",
                        "items": [
                            {
                                "key": "loanAccount.guarantors",
                                "type": "array",
                                "add": null,
                                "remove": null,
                                "items": [
                                    {
                                        "key": "loanAccount.guarantors[].guaUrnNo",

                                        "readonly": true
                                    },
                                    {
                                        "key": "loanAccount.guarantors[].guaFirstName",

                                        "readonly": true
                                    }
                                ]
                            }
                        ]
                    }*/,
                    {
                        "type": "fieldset",
                        "notitle": true,
                        "items": [
                            {
                                "key":"loanAccount.collateral",
                                "title":"COLLATERAL",
                                "type":"array",
                                "readonly": true,
                                "items":[
                                    {
                                        "key":"loanAccount.collateral[].collateralType",
                                        "type":"select"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].collateralDescription"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].manufacturer"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].quantity",
                                        "onChange": function(value ,form ,model, event){
                                            calculateTotalValue(value, form, model);
                                        }
                                    },
                                    {
                                        "key":"loanAccount.collateral[].modelNo"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].machineOld"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].loanToValue",
                                        "type":"amount",
                                        "title":"PRESENT_VALUE"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].collateralValue",
                                        "type":"amount",
                                        "title":"PURCHASE_PRICE"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].totalValue",
                                        "type":"amount",
                                        "title":"TOTAL_VALUE"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].collateral1FilePath",
                                        "type":"file",
                                        "title":"DOCUMENT_1"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].collateral2FilePath",
                                        "type":"file",
                                        "title":"DOCUMENT_2"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].collateral3FilePath",
                                        "type":"file",
                                        "title":"DOCUMENT_3"
                                    },
                                    {
                                        "key":"loanAccount.collateral[].photoFilePath",
                                        "type":"file",
                                        "fileType":"image/*",
                                        "title":"PHOTO"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }],
            schema: function () {
                return SchemaResource.getLoanAccountSchema().$promise;
            },
            actions: {
                submit: function (model, form, formName) {

                    $log.info("submitting");

                    if(model._currentDisbursement.scheduledDisbursementDate)
                        var scheduledDisbursementDate = moment(model._currentDisbursement.scheduledDisbursementDate,SessionStore.getSystemDateFormat());
                    if(model.loanAccount.sanctionDate)
                        var sanctionDate = moment(model.loanAccount.sanctionDate,SessionStore.getSystemDateFormat());
                    if(model._currentDisbursement.customerSignatureDate)
                        var customerSignatureDate = moment(model._currentDisbursement.customerSignatureDate,SessionStore.getSystemDateFormat());
                    if(model._currentDisbursement.scheduledDisbursementDate && model.loanAccount.sanctionDate)
                        var diffDays = scheduledDisbursementDate.diff(sanctionDate, "days");
                    if(model.loanAccount.firstRepaymentDate)
                        var firstRepaymentDate = moment(model.loanAccount.firstRepaymentDate,SessionStore.getSystemDateFormat());
                    if (model.loanAccount.firstRepaymentDate){
                        var date = firstRepaymentDate.get("date");
                        if(date != 5 && date != 15){
                            PageHelper.showProgress("loan-create","First repayment date should be 5 or 15",5000);
                            return false;
                        }
                    }


                    if (diffDays > pendingDisbursementDays){
                        PageHelper.showProgress("loan-create","Difference between Loan sanction date and disbursement date is greater than " + pendingDisbursementDays + " days",5000);
                        return false;
                    }
                    if (customerSignatureDate.isBefore(sanctionDate)){
                        PageHelper.showProgress("loan-create","Customer sign date should be greater than the Loan sanction date",5000);
                        return false;
                    }

                    if (scheduledDisbursementDate.diff(customerSignatureDate,"days") <= 0){
                        PageHelper.showProgress("loan-create","Scheduled disbursement date should be greater than Customer sign date",5000);
                        return false;
                    }

                    if (model.loanAccount.firstRepaymentDate){
                        if (firstRepaymentDate.diff(scheduledDisbursementDate,"days") <= 0){
                            PageHelper.showProgress("loan-create","Repayment date should be greater than sanction date",5000);
                            return false;
                        }
                    }

                    Utils.confirm("Ready to book the loan?")
                        .then(function(){
                            model.loanAccount.disbursementSchedules[model.loanAccount.numberOfDisbursed].customerSignatureDate = model._currentDisbursement.customerSignatureDate;
                            model.loanAccount.disbursementSchedules[model.loanAccount.numberOfDisbursed].scheduledDisbursementDate = model._currentDisbursement.scheduledDisbursementDate;

                            var reqData = { 'loanAccount': _.cloneDeep(model.loanAccount), 'loanProcessAction': 'PROCEED'};
                            PageHelper.showProgress('update-loan', 'Working...');
                            return IndividualLoan.update(reqData)
                                .$promise
                                .then(
                                    function(res){
                                        PageHelper.showProgress('update-loan', 'Done', 2000);
                                        $state.go('Page.Engine', {pageName: 'loans.individual.booking.PendingQueue'});
                                        return;
                                    }, function(httpRes){
                                        PageHelper.showProgress('update-loan', 'Some error occured while updating the details. Please try again', 2000);
                                        PageHelper.showErrors(httpRes);
                                    }
                                )
                        }, function(){
                            $log.info("User selected No");
                        })
                },
                reject: function (model, form, formName) {

                    $log.info("rejecting");

                    Utils.confirm("Are you sure you want to send back to Loan Input?")
                        .then(function(){
                            var reqData = { 'loanAccount': _.cloneDeep(model.loanAccount), 'loanProcessAction': 'PROCEED', 'stage':'LoanInitiation'};
                            PageHelper.showProgress('update-loan', 'Working...');
                            return IndividualLoan.update(reqData)
                                .$promise
                                .then(
                                    function(res){
                                        PageHelper.showProgress('update-loan', 'Done', 2000);
                                        $state.go('Page.Engine', {pageName: 'loans.individual.booking.PendingQueue'});
                                        return;
                                    }, function(httpRes){
                                        PageHelper.showProgress('update-loan', 'Some error occured while updating the details. Please try again', 2000);
                                        PageHelper.showErrors(httpRes);
                                    }
                                )
                        }, function(){
                            $log.info("User selected No");
                        })
                },
                reenter: function (model, formCtrl, form, $event) {
                    $state.go("Page.Engine", {
                        pageName: 'loans.individual.booking.PendingQueue',
                        pageId: null
                    });
                }
            }
        };
    }]);

irf.pageCollection.factory(irf.page("loans.individual.booking.LoanInput"),
["$log","SessionStore","$state", "$stateParams", "SchemaResource","PageHelper","Enrollment","formHelper","IndividualLoan","Utils","$filter","$q","irfProgressMessage", "Queries","LoanProducts",
    function($log, SessionStore,$state,$stateParams, SchemaResource,PageHelper,Enrollment,formHelper,IndividualLoan,Utils,$filter,$q,irfProgressMessage, Queries,LoanProducts){

        var branchId = SessionStore.getBranchId();
        var branchName = SessionStore.getBranch();
        var bankName = SessionStore.getBankName();
        var bankId;
        bankId = $filter('filter')(formHelper.enum("bank").data, {name:bankName}, true)[0].code;

        var getSanctionedAmount = function(model){
            var fee = 0;
            if(model.loanAccount.commercialCibilCharge)
                if(!_.isNaN(model.loanAccount.commercialCibilCharge))
                    fee+=model.loanAccount.commercialCibilCharge;
            $log.info(model.loanAccount.commercialCibilCharge);

        };

        var calculateTotalValue = function(value, form, model){
            if (_.isNumber(model.loanAccount.collateral[form.arrayIndex].quantity) && _.isNumber(value)){
                model.loanAccount.collateral[form.arrayIndex].totalValue = model.loanAccount.collateral[form.arrayIndex].quantity * model.loanAccount.collateral[form.arrayIndex].loanToValue;
            }
        }

        try{
            var defaultPartner = formHelper.enum("partner").data[0].value;
        }catch(e){}

        var populateDisbursementSchedule=function (value,form,model){
            PageHelper.showProgress("loan-create","Verify Disbursement Schedules",5000);
            model.loanAccount.disbursementSchedules=[];
            for(var i=0;i<value;i++){
                model.loanAccount.disbursementSchedules.push({
                    trancheNumber:""+(i+1),
                    disbursementAmount:0
                });
            }
            if (value ==1){
                model.loanAccount.disbursementSchedules[0].disbursementAmount = model.loanAccount.loanAmountRequested;
            }

        }


        var getProductDetails=function (value,model){
            if (value)
                LoanProducts.getProductData({"productCode":value})
                .$promise
                .then(
                    function(res){
                        try
                        {
                            delete model.additional.product;
                        }
                        catch(err){
                            console.error(err);
                        }
                        model.additional.product = res;
                        model.additional.product.interestBracket = res.minInterestRate + '% - ' + res.maxInterestRate + '%';
                        model.additional.product.amountBracket = model.additional.product.amountFrom + ' - ' + model.additional.product.amountTo;
                        $log.info(model.additional.product.interestBracket);
                        if (model.additional.product.frequency == 'M')
                            model.loanAccount.frequency = 'Monthly';
                    },
                    function(httpRes){
                        PageHelper.showProgress('loan-create', 'Failed to load the Product details. Try again.', 4000);
                        PageHelper.showErrors(httpRes);
                        PageHelper.hideLoader();
                    }
                )
        }

        return {
            "type": "schema-form",
            "title": "LOAN_INPUT",
            "subTitle": "",
            initialize: function (model, form, formCtrl) {
                // TODO default values needs more cleanup
                var init = function(model, form, formCtrl) {
                    model.loanAccount = model.loanAccount || {branchId :branchId};
                    model.additional = {branchName : branchName};
                    model.loanAccount.bankId = bankId;
                    model.loanAccount.loanCentre = model.loanAccount.loanCentre || {};
                    model.loanAccount.disbursementSchedules=model.loanAccount.disbursementSchedules || [];
                    model.loanAccount.collateral=model.loanAccount.collateral || [{quantity:1}];
                    //model.loanAccount.guarantors=model.loanAccount.guarantors || [{guaFirstName:""}];
                    model.loanAccount.loanCustomerRelations = model.loanAccount.loanCustomerRelations || [];
                    model.loanAccount.coBorrowers = [];
                    for (var i = 0; i < model.loanAccount.loanCustomerRelations.length; i++) {
                        if (model.loanAccount.loanCustomerRelations[i].relation === 'COAPPLICANT') {
                            model.loanAccount.coBorrowers.push({
                                coBorrowerUrnNo:model.loanAccount.loanCustomerRelations[i].urn
                            });
                        }
                    }

                    model.loanAccount.nominees=model.loanAccount.nominees || [{nomineeFirstName:"",nomineeDoorNo:""}];
                    model.loanAccount.nominees[0].nomineeFirstName = model.loanAccount.nominees[0].nomineeFirstName || '';
                    model.loanAccount.nominees[0].nomineeDoorNo = model.loanAccount.nominees[0].nomineeDoorNo || '';
                    model.loanAccount.nominees[0].nomineeLocality = model.loanAccount.nominees[0].nomineeLocality || '';
                    model.loanAccount.nominees[0].nomineeStreet = model.loanAccount.nominees[0].nomineeStreet || '';
                    model.loanAccount.nominees[0].nomineePincode = model.loanAccount.nominees[0].nomineePincode || '';
                    model.loanAccount.nominees[0].nomineeDistrict = model.loanAccount.nominees[0].nomineeDistrict || '';
                    model.loanAccount.nominees[0].nomineeState = model.loanAccount.nominees[0].nomineeState || '';
                    model.loanAccount.nominees[0].nomineeRelationship = model.loanAccount.nominees[0].nomineeRelationship || '';
                    model.loanAccount.loanApplicationDate = model.loanAccount.loanApplicationDate || Utils.getCurrentDate();
                    model.loanAccount.commercialCibilCharge = 750; //Hard coded. This value to be changed to pickup from global_settings table
                    model.loanAccount.documentTracking = model.loanAccount.documentTracking || "PENDING";
                    model.loanAccount.isRestructure = false;
                    getSanctionedAmount(model);
                    $log.info(model);

                    model.additional.minAmountForSecurityEMI = 0;
                    Queries.getGlobalSettings("loan.individual.booking.minAmountForSecurityEMI").then(function(value){
                        model.additional.minAmountForSecurityEMI = Number(value);
                        $log.info("minAmountForSecurityEMI:" + model.additional.minAmountForSecurityEMI);
                    },function(err){
                        $log.info("Max Security EMI is not available");
                    });
                    if(model.loanAccount.productCode)
                        getProductDetails(model.loanAccount.productCode,model);
                };
                // code for existing loan
                $log.info("Loan Number:::" + $stateParams.pageId);
                if ($stateParams.pageId) {
                    PageHelper.showLoader();
                    IndividualLoan.get({id: $stateParams.pageId}).$promise.then(function(resp){
                        if (resp.currentStage != 'LoanInitiation') {
                            PageHelper.showProgress('load-loan', 'Loan is in different Stage', 2000);
                            $state.go('Page.Engine', {pageName: 'loans.individual.booking.PendingQueue', pageId: null});
                            return;
                        }
                        model.loanAccount = resp;
                        init(model, form, formCtrl); // init call
                    }, function(errResp){
                        PageHelper.showErrors(errResp);
                    }).finally(function(){
                        PageHelper.hideLoader();
                    });
                } else {
                    init(model, form, formCtrl); // init call
                }

            },
            offline: false,
            getOfflineDisplayItem: function(item, index){
                return [
                    '{{"ENTITY_NAME"|translate}}: ' + item.customer.firstName + (item.loanAccount.urnNo ? ' <small>{{"URN_NO"|translate}}:' + item.loanAccount.urnNo + '</small>' : ''),
                    '{{"PRODUCT_CODE"|translate}}: ' + item.loanAccount.productCode,
                    '{{"CENTRE_ID"|translate}}: ' + item.loanAccount.loanCentre.centreId
                ]
            },
            form: [{
                "type": "box",
                "title": "LOAN_INPUT",
                "colClass": "col-sm-6",

                "items":[
                    {
                    "type":"fieldset",
                    "title":"BRANCH_DETAILS",
                    "items":[
                        /*{
                            key:"loanAccount.loanCentre.branchId",
                            title:"BRANCH",
                            "type":"select",
                            "enumCode":"branch_id"
                        },
                        {
                            key:"loanAccount.loanCentre.centreId",
                            title:"CENTRE_NAME",
                            "type":"select",
                            enumCode: "centre",
                            parentEnumCode:"branch_id"
                        },*/
                        {
                            "key": "loanAccount.partnerCode",
                            "title": "PARTNER",
                            "type": "select"
                        }]
                    },
                    {
                        "type": "fieldset",
                        "title": "PRODUCT_DETAILS",
                        "items": [
                            {
                                "key": "loanAccount.id",
                                "title": "LOAN_ID",
                                "condition":"model.loanAccount.id",
                                "readonly":true
                            },
                            {
                                "key": "loanAccount.productCode",
                                "title": "PRODUCT",
                                "type": "select",
                                onChange:function(value,form,model){
                                    getProductDetails(value,model);
                                },
                                "parentEnumCode": "partner"
                            },
                            {
                                "key": "loanAccount.tenure",
                                "title":"DURATION_IN_MONTHS"
                            },
                            {
                                "key": "loanAccount.frequency",
                                "type":"select",
                                "readonly":true
                            }
                        ]
                    },
                    {
                        "type": "fieldset",
                        "title": "ENTITY_DETAILS",
                        "items": [
                            {
                                "key": "loanAccount.urnNo",
                                "title": "URN_NO",
                                "type":"lov",
                                "lovonly": true,
                                "inputMap": {
                                    "customerType":{
                                        "key":"customer.customerType",
                                        "title":"CUSTOMER_TYPE",
                                        "type":"select",
                                        "titleMap":{
                                            "Individual":"Individual",
                                            "Enterprise":"Enterprise"
                                        }
                                    },
                                    "customerId":{
                                        "key":"customer.customerId",
                                        "title":"CUSTOMER_ID"
                                    },
                                    "firstName": {
                                        "key": "customer.firstName",
                                        "title": "CUSTOMER_NAME"
                                    },
                                    "branch": {
                                        "key": "customer.branch",
                                        "type": "select",
                                        "screenFilter": true
                                    },
                                    "centreId": {
                                        "key": "customer.centreId",
                                        "type": "select",
                                        "screenFilter": true,
                                        "parentEnumCode": "branch"
                                    }
                                },
                                "outputMap": {
                                    "id": "loanAccount.customerId",
                                    "urnNo": "loanAccount.urnNo",
                                    "firstName":"customer.firstName",
                                    "customerBranchId":"loanAccount.loanCentre.branchId",
                                    "centreId":"loanAccount.loanCentre.centreId"
                                },
                                "searchHelper": formHelper,
                                initialize: function(inputModel) {
                                    $log.warn('in loanAccount.urnNo initialize');
                                    $log.info(inputModel);
                                },
                                "search": function(inputModel, form, model) {
                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                    $log.info(inputModel);
                                    var promise = Enrollment.search({
                                        'customerId':inputModel.customerId,
                                        'branchName': inputModel.branch ||SessionStore.getBranch(),
                                        'firstName': inputModel.firstName,
                                        'centreId':inputModel.centreId,
                                        'customerType':inputModel.customerType,
                                        'stage': "Completed"
                                    }).$promise;
                                    return promise;
                                },
                                getListDisplayItem: function(data, index) {
                                    return [
                                        data.firstName,
                                        data.id,
                                        data.urnNo
                                    ];
                                },
                                onSelect: function(result, model, context) {
                                    $log.info(result);
                                    var promise = Queries.getCustomerBankAccounts(
                                        result.id
                                    ).then(function(response){
                                        if(response && response.body && response.body.length){
                                            for (var i = response.body.length - 1; i >= 0; i--) {
                                                if(response.body[i].is_disbersement_account == 1){
                                                    model.loanAccount.customerBankAccountNumber = response.body[i].account_number;
                                                    model.loanAccount.customerBankIfscCode = response.body[i].ifsc_code;
                                                    model.loanAccount.customerBank = response.body[i].customer_bank_name;
                                                    model.loanAccount.customerBranch = response.body[i].customer_bank_branch_name;
                                                    model.loanAccount.customerNameAsInBank =  response.body[i].customer_name_as_in_bank;
                                                    break;
                                                }
                                            }
                                        }
                                    });
                                }
                            },
                            {
                                "key":"loanAccount.customerId",
                                "title":"ENTITY_ID",
                                "readonly": true
                            },
                            {
                                "key": "customer.firstName",
                                "title": "ENTITY_NAME",
                                "readonly": true
                            },
                            {
                                "key": "loanAccount.applicant",
                                "title": "APPLICANT_URN_NO",
                                "type":"lov",
                                "lovonly": true,
                                "inputMap": {
                                    "customerId":{
                                        "key":"customer.customerId",
                                        "title":"CUSTOMER_ID"
                                    },
                                    "firstName": {
                                        "key": "customer.firstName",
                                        "title": "CUSTOMER_NAME"
                                    },
                                    "branch": {
                                        "key": "customer.branch",
                                        "type": "select",
                                        "screenFilter": true
                                    },
                                    "centreId": {
                                        "key": "customer.centreId",
                                        "type": "select",
                                        "screenFilter": true
                                    }
                                },
                                "outputMap": {
                                    "urnNo": "loanAccount.applicant",
                                    "firstName":"customer.applicantName"
                                },
                                "searchHelper": formHelper,
                                "search": function(inputModel, form) {
                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                    var promise = Enrollment.search({
                                        'customerId':inputModel.customerId,
                                        'branchName': inputModel.branch ||SessionStore.getBranch(),
                                        'firstName': inputModel.firstName,
                                        'centreId':inputModel.centreId,
                                        'customerType':"individual",
                                        'stage': "Completed"
                                    }).$promise;
                                    return promise;
                                },
                                getListDisplayItem: function(data, index) {
                                    return [
                                        [data.firstName, data.fatherFirstName].join(' | '),
                                        data.id,
                                        data.urnNo
                                    ];
                                }
                            },
                            {
                                "key":"customer.applicantName",
                                "title":"APPLICANT_NAME",
                                "readonly": true
                            },
                            {
                                "type": "fieldset",
                                "title": "COAPPLICANTS",
                                "items": [
                                    {
                                        "key": "loanAccount.coBorrowers",
                                        "title": "COAPPLICANTS",
                                        "titleExpr": "model.loanAccount.coBorrowers[arrayIndex].coBorrowerName",
                                        "type": "array",
                                        "startEmpty": true,
                                        "schema": {
                                            "maxItems": 4
                                        },
                                        "items": [
                                            {
                                                "key": "loanAccount.coBorrowers[].coBorrowerUrnNo",
                                                "title": "CO_APPLICANT_URN_NO",
                                                "type":"lov",
                                                "lovonly": true,
                                                "inputMap": {
                                                    "customerId":{
                                                        "key":"customer.customerId",
                                                        "title":"CUSTOMER_ID"
                                                    },
                                                    "firstName": {
                                                        "key": "customer.firstName",
                                                        "title": "CUSTOMER_NAME"
                                                    },
                                                    "branch": {
                                                        "key": "customer.branch",
                                                        "type": "select",
                                                        "screenFilter": true
                                                    },
                                                    "centreId": {
                                                        "key": "customer.centreId",
                                                        "type": "select",
                                                        "screenFilter": true
                                                    }
                                                },
                                                "outputMap": {
                                                    "urnNo": "loanAccount.coBorrowers[arrayIndex].coBorrowerUrnNo",
                                                    "firstName":"loanAccount.coBorrowers[arrayIndex].coBorrowerName"
                                                },
                                                "searchHelper": formHelper,
                                                "search": function(inputModel, form) {
                                                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                                    var promise = Enrollment.search({
                                                        'customerId':inputModel.customerId,
                                                        'branchName': inputModel.branch ||SessionStore.getBranch(),
                                                        'firstName': inputModel.firstName,
                                                        'centreId':inputModel.centreId,
                                                        'customerType':"individual",
                                                        'stage': "Completed"
                                                    }).$promise;
                                                    return promise;
                                                },
                                                getListDisplayItem: function(data, index) {
                                                    return [
                                                        [data.firstName, data.fatherFirstName].join(' | '),
                                                        data.id,
                                                        data.urnNo
                                                    ];
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "fieldset",
                        "title": "LOAN_DETAILS",
                        "items": [
                            {
                                "key": "loanAccount.loanAmountRequested",
                                "type":"amount",
                                "title":"LOAN_AMOUNT_REQUESTED",
                                "placeholderExpr":"model.additional.product.amountBracket"
                            },
                            {
                                key:"loanAccount.commercialCibilCharge",
                                type:"amount",
                                onChange:function(value,form,model){
                                    getSanctionedAmount(model);
                                }
                            },
                            {
                                key:"loanAccount.securityEmiRequired",
                                required: true
                            },
                            {
                                key:"loanAccount.processingFeePercentage",
                                type:"number",
                                "title":"PROCESSING_FEES_IN_PERCENTAGE"
                            },
                            {
                                key:"loanAccount.otherFee",
                                type:"amount"
                            },
                            {
                                "key":"loanAccount.interestRate",
                                "type":"number",
                                "placeholderExpr":"model.additional.product.interestBracket"
                            },
                            {
                                "key": "loanAccount.loanApplicationDate",
                                "title": "LOAN_APPLICATION_DATE",
                                "type":"date"
                            },
                            {
                                key: "loanAccount.loanPurpose1",
                                type: "lov",
                                autolov: true,
                                title:"LOAN_PURPOSE_1",
                                bindMap: {
                                },
                                outputMap: {
                                    "purpose1": "loanAccount.loanPurpose1"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    return Queries.getLoanPurpose1(model.loanAccount.productCode);
                                },
                                getListDisplayItem: function(item, index) {
                                    return [
                                        item.purpose1
                                    ];
                                }
                            },
                            {
                                key: "loanAccount.loanPurpose2",
                                type: "lov",
                                autolov: true,
                                title:"LOAN_PURPOSE_2",
                                bindMap: {
                                },
                                outputMap: {
                                    "purpose2": "loanAccount.loanPurpose2"
                                },
                                searchHelper: formHelper,
                                search: function(inputModel, form, model) {
                                    return Queries.getLoanPurpose2(model.loanAccount.productCode, model.loanAccount.loanPurpose1);
                                },
                                getListDisplayItem: function(item, index) {
                                    return [
                                        item.purpose2
                                    ];
                                }
                            },
                            {
                                title: "BUSINESS_INCOME",
                                type: "amount",
                                key: "loanAccount.accountUserDefinedFields.userDefinedFieldValues.udf3",
                                required: true
                            },
                            {
                                title: "LOAN_PURPOSE_VALUE",
                                type: "amount",
                                key: "loanAccount.accountUserDefinedFields.userDefinedFieldValues.udf4"
                            }
                            /*,
                            {
                                "key": "loanAccount.loanPurpose3",
                                "title": "LOAN_PURPOSE_3",
                                "type":"select",
                                "filter":{
                                    "parentCode as loan_purpose_2":"model.loanAccount.loanPurpose2"
                                }
                            }*/
                        ]
                    }
                ]
            },{
                "type":"box",
                "title":"COLLATERAL",
                "items":[
                    {
                        "key":"loanAccount.collateral",
                        "title":"COLLATERAL",
                        "type":"array",
                        "items":[
                            {
                                "key":"loanAccount.collateral[].collateralType",
                                "type":"select"
                            },
                            {
                                "key":"loanAccount.collateral[].collateralDescription"
                            },
                            {
                                "key":"loanAccount.collateral[].manufacturer"
                            },
                            {
                                "key":"loanAccount.collateral[].quantity",
                                "onChange": function(value ,form ,model, event){
                                    calculateTotalValue(value, form, model);
                                }
                            },
                            {
                                "key":"loanAccount.collateral[].modelNo"
                            },
                            {
                                "key":"loanAccount.collateral[].machineOld"
                            },
                            {
                                "key":"loanAccount.collateral[].loanToValue",
                                "type":"amount",
                                "title":"PRESENT_VALUE",
                                "onChange": function(value ,form ,model, event){
                                    calculateTotalValue(value, form, model);
                                }
                            },
                            {
                                "key":"loanAccount.collateral[].collateralValue",
                                "type":"amount",
                                "title":"PURCHASE_PRICE"
                            },
                            {
                                "key":"loanAccount.collateral[].totalValue",
                                "type":"amount",
                                "title":"TOTAL_VALUE",
                                "readonly":true
                            }/*,
                            {
                                "key":"loanAccount.collateral[].collateral1FilePath",
                                "type":"file",
                                "title":"DOCUMENT_1"
                            },
                            {
                                "key":"loanAccount.collateral[].collateral2FilePath",
                                "type":"file",
                                "title":"DOCUMENT_2"
                            },
                            {
                                "key":"loanAccount.collateral[].collateral3FilePath",
                                "type":"file",
                                "title":"DOCUMENT_3"
                            },
                            {
                                "key":"loanAccount.collateral[].photoFilePath",
                                "type":"file",
                                "fileType":"image/*",
                                "title":"PHOTO"
                            }*/
                        ]
                    }
                ]
            },
                {
                "type": "box",
                "title": "",
                "items":[
                    {
                        "type":"fieldset",
                        "title":"GUARANTOR",
                        "items":[
                            {
                                key:"loanAccount.guarantors",
                                startEmpty: true,
                                type:"array",
                                items:[
                                    {
                                        "key": "loanAccount.guarantors[].guaUrnNo",
                                        "title": "URN_NO",
                                        "type":"lov",
                                        "lovonly": true,
                                        "inputMap": {
                                            "customerId":{
                                                "key":"customer.customerId",
                                                "title":"CUSTOMER_ID"
                                            },
                                            "firstName": {
                                                "key": "customer.firstName",
                                                "title": "CUSTOMER_NAME"
                                            },
                                            "branch": {
                                                "key": "customer.branch",
                                                "type": "select",
                                                "screenFilter": true
                                            },
                                            "centreId": {
                                                "key": "customer.centreId",
                                                "type": "select",
                                                "screenFilter": true
                                            }
                                        },
                                        "outputMap": {
                                            "urnNo": "loanAccount.guarantors[arrayIndex].guaUrnNo",
                                            "firstName":"loanAccount.guarantors[arrayIndex].guaFirstName"
                                        },
                                        "searchHelper": formHelper,
                                        "search": function(inputModel, form) {
                                            $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                            var promise = Enrollment.search({
                                                'customerId':inputModel.customerId,
                                                'branchName': inputModel.branch ||SessionStore.getBranch(),
                                                'firstName': inputModel.firstName,
                                                'centreId':inputModel.centreId,
                                                'customerType': "individual",
                                                'stage': "Completed"
                                            }).$promise;
                                            return promise;
                                        },
                                        getListDisplayItem: function(data, index) {
                                            return [
                                                [data.firstName, data.fatherFirstName].join(' | '),
                                                data.id,
                                                data.urnNo
                                            ];
                                        }
                                    },
                                    {
                                        key:"loanAccount.guarantors[].guaFirstName",
                                        title:"NAME",
                                        "readonly": true
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type":"fieldset",
                        "title":"INSURANCE_POLICY",
                        "items":[
                            {
                                "key":"additional.portfolioUrnSelector",
                                "type":"select",
                                "titleMap":{
                                    "applicant":"Applicant",
                                    "coapplicant":"Co-Applicant",
                                    "guarantor":"Guarantor"
                                },
                                onChange:function(value,form,model){
                                    switch(value){
                                        case "applicant":
                                            if(_.isEmpty(model.loanAccount.applicant)){
                                                Utils.alert("Please Select an Applicant");
                                                model.additional.portfolioUrnSelector="";
                                                break;
                                            }
                                            model.loanAccount.portfolioInsuranceUrn = model.loanAccount.applicant;
                                            break;
                                        case "coapplicant":
                                            if(_.isEmpty(model.loanAccount.coBorrowerUrnNo)){
                                                Utils.alert("Please Select a Co-Applicant");
                                                model.additional.portfolioUrnSelector="";
                                                break;
                                            }
                                            model.loanAccount.portfolioInsuranceUrn = model.loanAccount.coBorrowerUrnNo;
                                            break;
                                        case "guarantor":
                                            if(_.isEmpty(model.loanAccount.guarantors[0].guaUrnNo)){
                                                Utils.alert("Please Select a Guarantor");
                                                model.additional.portfolioUrnSelector="";
                                                break;
                                            }
                                            model.loanAccount.portfolioInsuranceUrn = model.loanAccount.guarantors[0].guaUrnNo;
                                            break;
                                    }
                                }
                            },
                            {
                                key:"loanAccount.portfolioInsuranceUrn",
                                "title":"URN_NO"
                            }
                        ]
                    },
                    {
                        "type":"fieldset",
                        "title":"NOMINEE_DETAILS",
                        "items":[
                            {
                                "key":"loanAccount.nominees",
                                "type":"array",
                                notitle:"true",
                                "view":"fixed",
                                "add":null,
                                "remove":null,
                                "items":[
                                    {
                                        key:"loanAccount.nominees[].nomineeFirstName",
                                        "title":"NAME"
                                    },
                                    {
                                        key:"loanAccount.nominees[].nomineeGender",
                                        type:"select",
                                        "title":"GENDER"
                                    },
                                    {
                                        key:"loanAccount.nominees[].nomineeDOB",
                                        type:"date",
                                        "title":"DATE_OF_BIRTH"
                                    },
                                    {
                                        key:"loanAccount.nominees[].nomineeDoorNo",
                                        "title":"DOOR_NO"
                                    },
                                    {
                                        key:"loanAccount.nominees[].nomineeLocality",
                                        "title":"LOCALITY"
                                    },
                                    {
                                        key:"loanAccount.nominees[].nomineeStreet",
                                        "title":"STREET"
                                    },
                                    {
                                        key: "loanAccount.nominees[].nomineePincode",
                                        type: "lov",
                                        "title":"PIN_CODE",
                                        fieldType: "number",
                                        autolov: true,
                                        inputMap: {
                                            "pincode": {
                                                key:"loanAccount.nominees[].nomineePincode"
                                            },
                                            "district": {
                                                key: "loanAccount.nominees[].nomineeDistrict"
                                            },
                                            "state": {
                                                key: "loanAccount.nominees[].nomineeState"
                                            }
                                        },
                                        outputMap: {
                                            "division": "loanAccount.nominees[arrayIndex].nomineeLocality",
                                            "pincode": "loanAccount.nominees[arrayIndex].nomineePincode",
                                            "district": "loanAccount.nominees[arrayIndex].nomineeDistrict",
                                            "state": "loanAccount.nominees[arrayIndex].nomineeState"
                                        },
                                        searchHelper: formHelper,
                                        initialize: function(inputModel, form, model, context) {
                                            inputModel.pincode = model.loanAccount.nominees[context.arrayIndex].nomineePincode;
                                        },
                                        search: function(inputModel, form, model, context) {
                                            return Queries.searchPincodes(
                                                inputModel.pincode || model.loanAccount.nominees[context.arrayIndex].nomineePincode,
                                                inputModel.district,
                                                inputModel.state
                                            );
                                        },
                                        getListDisplayItem: function(item, index) {
                                            return [
                                                item.division + ', ' + item.region,
                                                item.pincode,
                                                item.district + ', ' + item.state
                                            ];
                                        }
                                    },
                                    {
                                        key:"loanAccount.nominees[].nomineeDistrict",
                                        type:"text",
                                        "title":"DISTRICT"
                                    },
                                    {
                                        key:"loanAccount.nominees[].nomineeState",
                                        "title":"STATE"
                                    },
                                    {
                                        key:"loanAccount.nominees[].nomineeRelationship",
                                        type:"select",
                                        "title":"RELATIONSHIP"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "fieldset",
                        "title": "DISBURSEMENT_DETAILS",
                        "items": [
                            {
                                key:"loanAccount.sanctionDate",
                                type:"date",
                                title:"SANCTION_DATE"
                            },
                            {
                                key:"loanAccount.numberOfDisbursements",
                                title:"NUM_OF_DISBURSEMENTS",
                                onChange:function(value,form,model){
                                    populateDisbursementSchedule(value,form,model);
                                }
                            },
                            {
                                key:"loanAccount.disbursementSchedules",
                                title:"DISBURSEMENT_SCHEDULES",
                                add:null,
                                remove:null,
                                items:[
                                    {
                                        key:"loanAccount.disbursementSchedules[].trancheNumber",
                                        title:"TRANCHE_NUMBER",
                                        readonly:true
                                    },
                                    {
                                        key:"loanAccount.disbursementSchedules[].disbursementAmount",
                                        title:"DISBURSEMENT_AMOUNT",
                                        type:"amount"
                                    },
                                    {
                                        key:"loanAccount.disbursementSchedules[].tranchCondition",
                                        title:"TRACHE_CONDITION",
                                        type:"textarea"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "type":"box",
                "title":"Deprecated Items",
                "condition":"false",
                "items":[
                    {
                        key:"loanAccount.disbursementFromBankAccountNumber",
                        title:"DISBURSEMENT_ACCOUNT"
                    },
                    {
                        key:"loanAccount.originalAccountNumber",
                        title:"ORIGINAL_ACCOUNT"
                    },
                    {
                        "key": "loanAccount.isRestructure",
                        "title":"IS_RESTRUCTURE"
                    },
                    {
                        "key":"loanAccount.husbandOrFatherFirstName",
                        "title":"HUSBAND_OR_FATHER_NAME"
                    },
                    {
                        "key":"loanAccount.husbandOrFatherMiddleName"
                    },
                    {
                        "key":"loanAccount.husbandOrFatherLastName"
                    },
                    {
                        "key":"loanAccount.relationFirstName",
                        "title":"RELATIVE_NAME"
                    },
                    {
                        "key":"loanAccount.relation",
                        "type":"select",
                        "title":"T_RELATIONSHIP"
                    },
                    {
                        key:"loanAccount.documentTracking",
                        "title":"DOCUMENT_TRACKING"
                    }
                ]
            },
            {
                "type": "actionbox",
                "items": [/*{
                    "type": "save",
                    "title": "SAVE_OFFLINE",
                },*/
                {
                    "type": "submit",
                    "title": "SUBMIT"
                }]
            }],
            schema: function() {
                return SchemaResource.getLoanAccountSchema().$promise;
            },
            actions: {
                preSave: function(model, form, formName) {
                    var deferred = $q.defer();
                    if (model.loanAccount.urnNo) {
                        deferred.resolve();
                    } else {
                        irfProgressMessage.pop('LoanInput-save', 'urnNo is required', 3000);
                        deferred.reject();
                    }
                    return deferred.promise;
                },
                submit: function(model, form, formName) {
                    $log.info(model);
                    PageHelper.clearErrors();

                    model.loanAccount.loanPurpose3 = model.loanAccount.loanPurpose2;
                    if (model.loanAccount.applicant === model.loanAccount.coBorrowerUrnNo) {
                        PageHelper.showProgress("loan-create","Applicant & Co-applicant cannot be same",5000);
                        return false;
                    }

                    if (model.loanAccount.guarantors && model.loanAccount.guarantors.length > 0){
                        for (i=0;i<model.loanAccount.guarantors.length;i++){
                            if(!model.loanAccount.guarantors[i].guaUrnNo){
                                PageHelper.showProgress("loan-create","Guarantor Urn is not selected",5000);
                                return false;
                            }
                            if (model.loanAccount.applicant === model.loanAccount.guarantors[i].guaUrnNo) {
                                PageHelper.showProgress("loan-create","Applicant & Guarantor cannot be same",5000);
                                return false;
                            }
                            if (model.loanAccount.coBorrowerUrnNo === model.loanAccount.guarantors[i].guaUrnNo) {
                                PageHelper.showProgress("loan-create","Co-Applicant & Guarantor cannot be same",5000);
                                return false;
                            }
                        }
                    }

                    if (model.additional.product && model.additional.product.productType != 'OD' && model.additional.minAmountForSecurityEMI > 0){
                        //if (model.additional.minAmountForSecurityEMI>model.loanAccount.loanAmount && model.loanAccount.securityEmiRequired == 'Yes'){
                        //    PageHelper.showProgress("loan-create","Securty EMI is required for loan amount greater than " + model.additional.minAmountForSecurityEMI,5000);
                        //    return false;
                        //}
                        if (model.loanAccount.securityEmiRequired && model.loanAccount.loanAmount>=model.additional.minAmountForSecurityEMI && model.loanAccount.securityEmiRequired == 'No'){
                            PageHelper.showProgress("loan-create","Securty EMI is mandatory",5000);
                            return false;
                        }
                    }
                    else
                        model.loanAccount.securityEmiRequired = model.loanAccount.securityEmiRequired || 'No';

                    var trancheTotalAmount=0;
                    model.loanAccount.loanAmount = model.loanAccount.loanAmountRequested;
                    if(model.loanAccount.disbursementSchedules && model.loanAccount.disbursementSchedules.length){
                        model.loanAccount.disbursementSchedules[0].customerAccountNumber = model.loanAccount.customerBankAccountNumber;
                        model.loanAccount.disbursementSchedules[0].ifscCode = model.loanAccount.customerBankIfscCode;
                        model.loanAccount.disbursementSchedules[0].customerBankName = model.loanAccount.customerBank;
                        model.loanAccount.disbursementSchedules[0].customerBankBranchName = model.loanAccount.customerBranch;
                        model.loanAccount.disbursementSchedules[0].party = 'CUSTOMER';
                        model.loanAccount.disbursementSchedules[0].customerNameInBank = model.loanAccount.customerNameAsInBank;
                        for (var i = model.loanAccount.disbursementSchedules.length - 1; i >= 0; i--) {
                            model.loanAccount.disbursementSchedules[i].modeOfDisbursement = "CASH";
                            trancheTotalAmount+=(model.loanAccount.disbursementSchedules[i].disbursementAmount || 0);
                        }
                    }
                    if (model.additional.product && model.additional.product.productType != 'OD' && trancheTotalAmount > model.loanAccount.loanAmount){
                        PageHelper.showProgress("loan-create","Total tranche amount is more than the Loan amount",5000);
                        return false;
                    }
                    if (model.additional.product && model.additional.product.productType != 'OD' && trancheTotalAmount < model.loanAccount.loanAmount){
                        PageHelper.showProgress("loan-create","Total tranche amount should match with the Loan amount",5000);
                        return false;
                    }
                    if (model.additional.product && model.additional.product.productType == 'OD' && model.loanAccount.numberOfDisbursements > 1){
                        PageHelper.showProgress("loan-create","For LOC type product, number of disbursement cannot be more than one during loan booking",5000);
                        return false;
                    }

                    //Product specific validations
                    if(model.additional.product){
                        if (model.additional.product.collateralRequired && model.loanAccount.collateral.length == 0){
                                PageHelper.showProgress("loan-create","Collateral details are mandatory",5000);
                                return false;
                        }
                        if (!_.isNaN(model.additional.product.amountFrom) && model.additional.product.amountFrom > 0){
                            if (model.loanAccount.loanAmountRequested < model.additional.product.amountFrom){
                                PageHelper.showProgress("loan-create","Loan Amount requested should be in the range [" + model.additional.product.amountFrom + " - " + model.additional.product.amountTo + "]",5000);
                                return false;
                            }
                            if (model.loanAccount.loanAmountRequested > model.additional.product.amountTo){
                                PageHelper.showProgress("loan-create","Loan Amount requested should be in the range [" + model.additional.product.amountFrom + " - " + model.additional.product.amountTo + "]",5000);
                                return false;
                            }
                        }
                        if (!_.isNaN(model.additional.product.tenureFrom) && model.additional.product.tenureFrom > 0){
                            if (model.loanAccount.tenure < model.additional.product.tenureFrom){
                                PageHelper.showProgress("loan-create","Loan Tenure requested should be in the range [" + model.additional.product.tenureFrom + " - " + model.additional.product.tenureTo + "]",5000);
                                return false;
                            }
                            if (model.loanAccount.tenure > model.additional.product.tenureTo){
                                PageHelper.showProgress("loan-create","Loan Tenure requested should be in the range [" + model.additional.product.tenureFrom + " - " + model.additional.product.tenureTo + "]",5000);
                                return false;
                            }
                        }
                        if (!_.isNaN(model.additional.product.minInterestRate) && model.additional.product.minInterestRate > 0){
                            if (model.loanAccount.interestRate < model.additional.product.minInterestRate){
                                PageHelper.showProgress("loan-create","Interest Rate should be in the range [" + model.additional.product.minInterestRate + "% - " + model.additional.product.maxInterestRate + "%]",5000);
                                return false;
                            }
                            if (model.loanAccount.interestRate > model.additional.product.maxInterestRate){
                                PageHelper.showProgress("loan-create","Loan Amount requested should be in the range [" + model.additional.product.minInterestRate + "% - " + model.additional.product.maxInterestRate + "%]",5000);
                                return false;
                            }
                        }
                    }

                    model.loanAccount.loanCustomerRelations = [];
                    model.loanAccount.loanCustomerRelations.push({
                        urn:model.loanAccount.applicant,
                        relation:'APPLICANT'
                    });
                    if(model.loanAccount.coBorrowers && model.loanAccount.coBorrowers.length){
                        for (var i = 0; i < model.loanAccount.coBorrowers.length; i++) {
                            model.loanAccount.loanCustomerRelations.push({
                                urn:model.loanAccount.coBorrowers[i].coBorrowerUrnNo,
                                relation:'COAPPLICANT'
                            });
                        }
                    }
                    if(model.loanAccount.guarantors && model.loanAccount.guarantors.length > 0){
                        for (var i = model.loanAccount.guarantors.length - 1; i >= 0; i--) {
                            if(model.loanAccount.guarantors.guaUrnNo){
                                model.loanAccount.loanCustomerRelations.push({
                                    urn:model.loanAccount.guarantors[i].guaUrnNo,
                                    relation:'GUARANTOR'
                                });
                            }
                        }
                    }

                    if(model.loanAccount.portfolioInsuranceUrn != ''){
                        model.loanAccount.portfolioInsurancePremiumCalculated = "Yes";
                    }

                    var reqData = _.cloneDeep(model);
                    reqData.loanAccount.frequency = reqData.loanAccount.frequency[0];
                    Utils.confirm("Are You Sure?").then(function(){
                        PageHelper.showLoader();
                        if (!$stateParams.pageId) {
                            reqData.loanProcessAction="SAVE";
                            IndividualLoan.create(reqData,function(resp,headers){
                                delete resp.$promise;
                                delete resp.$resolved;
                                $log.info(resp);
                                //model.loanAccount.id = resp.loanAccount.id;
                                $log.info("Loan ID Returned on Save:" + model.loanAccount.id);
                                resp.loanProcessAction="PROCEED";
                                //reqData.loanProcessAction="PROCEED";
                                PageHelper.showLoader();
                                IndividualLoan.create(resp,function(resp,headers){
                                    $log.info(resp);
                                    PageHelper.showProgress("loan-create","Loan Created",5000);
                                    $state.go('Page.Landing', null);
                                },function(errresp){
                                    $log.info(errresp);
                                    PageHelper.showErrors(errresp);
                                    PageHelper.showProgress("loan-create","Oops. An Error Occurred",5000);
                                    model = resp;

                                }).$promise.finally(function(){
                                    PageHelper.hideLoader();
                                });


                            },function(errResp){
                                $log.info(errResp);
                                PageHelper.showErrors(errResp);
                                PageHelper.showProgress("loan-create","Oops. An Error Occurred",5000);

                            }).$promise.finally(function(){
                                PageHelper.hideLoader();
                            });
                        }else{
                            reqData.loanProcessAction="PROCEED";
                            IndividualLoan.create(reqData,function(resp,headers){
                                model.loanAccount.id = resp.loanAccount.id;
                                $log.info("Loan ID Returned on Proceed:" + model.loanAccount.id);
                                PageHelper.showLoader();
                                $state.go('Page.Engine', {pageName: 'loans.individual.Queue', pageId: null});
                            },function(errResp){
                                $log.info(errResp);
                                PageHelper.showErrors(errResp);
                                PageHelper.showProgress("loan-create","Oops. An Error Occurred",5000);

                            }).$promise.finally(function(){
                                PageHelper.hideLoader();
                            });
                        }
                    });
                }
            }
        };
    }]);

irf.pageCollection.factory(irf.page("loans.individual.booking.DocumentUploadQueue"),
["$log", "formHelper","$state", "SessionStore", "$q", "IndividualLoan", "entityManager", "LoanBookingCommons",
function($log, formHelper,$state, SessionStore, $q, IndividualLoan, entityManager, LoanBookingCommons){
    return {
        "type": "search-list",
        "title": "DOCUMENT_EXECUTION",
        "subTitle": "",
        "uri":"Loan Booking/Stage 3",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            // model.branchName = SessionStore.getBranch();
        },

        definition: {
            title: "LOAN_TYPE",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "customer name":"Customer Name",
                "centre id":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": "VIEW_LOANS",
                "required":["branch"],
                "properties": {
                    "branchName": {
                        "title": "BRANCH_NAME",
                        "type": ["string", "null"],
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }

                    },
                    "centreCode": {
                        "title": "CENTER_NAME",
                        "type": ["number", "null"],
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "parentEnumCode":"branch"
                        }
                    },
                    "loan_product": {
                        "title": "Loan Product",
                        "type": "string",
                        "default": "1",
                        "x-schema-form": {
                            "type": "select",
                            /*"titleMap": {
                                "1": "Asset Purchase- Secured",
                                "2": "Working Capital - Secured",
                                "3": "Working Capital -Unsecured",
                                "4": "Machine Refinance- Secured",
                                "5": "Business Development- Secured",
                                "6": "Business Development- Unsecured",
                                "7": "LOC- RFD-Secured",
                                "8": "LOC- RFD-Unsecured",
                                "9": "LOC RFID- Secured",
                                "10": "LOC- RFID- Unsecured"
                            }*/
                            "enumCode": "loan_product"
                        }
                    }
                    // "customer_name": {
                    //     "title": "CUSTOMER_NAME",
                    //     "type": "string",
                    //     "x-schema-form": {
                    //         "type": "select"
                    //     }
                    // },
                    // "entity_name": {
                    //     "title": "ENTITY_NAME",
                    //     "type": "string",
                    //     "x-schema-form": {
                    //         "type": "select"
                    //     }
                    // },
                    // "sanction_date": {
                    //     "title": "SANCTION_DATE",
                    //     "type": "string",
                    //     "x-schema-form": {
                    //         "type": "date"
                    //     }
                    // }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                if (_.hasIn(searchOptions, 'centreCode')){
                    searchOptions.centreCodeForSearch = LoanBookingCommons.getCentreCodeFromId(searchOptions.centreCode, formHelper);
                }
                return IndividualLoan.search({
                    'stage': 'DocumentUpload',
                    'branchName': searchOptions.branchName,
                    'centreCode': searchOptions.centreCodeForSearch,
                    'customerId': searchOptions.customerId,
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage,
                }).$promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                itemCallback: function(item, index) {
                    $log.info(item);
                },
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName ,
                        "<em>Loan Amount: Rs."+item.loanAmount+", Sanction Date: "+item.sanctionDate + "</em>",
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "View / Upload Documents",
                            desc: "",
                            fn: function(item, index){
                                entityManager.setModel('loans.individual.booking.DocumentUpload', {_queue:item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.booking.DocumentUpload', pageId: item.loanId});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.MultiTrancheQueue"),
["$log", "formHelper", "IndividualLoan", "$state", "SessionStore", "$q","entityManager",
function($log, formHelper, IndividualLoan, $state, SessionStore,$q,entityManager){
    return {
        "type": "search-list",
        "title": "MULTI_TRANCHE_QUEUE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
            model.stage = 'MTDisbursementDataCapture';
        },
        definition: {
            title: "SEARCH",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "name":"Customer Name",
                "centre_name":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": 'SearchOptions',
                "required":["branch"],
                "properties": {
                    "customer_name": {
                        "title": "Customer Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "entity_name": {
                        "title": "Entity Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "sanction_date": {
                        "title": "Sanction Date",
                        "type": "string",
                        "x-schema-form": {
                            "type": "date"
                        }
                    },
                    "branch_name": {
                        "title": "Branch Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "centre_name": {
                        "title": "Centre Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                var promise = IndividualLoan.searchDisbursement({
                    'currentStage': 'MTDisbursementDataCapture',
                    'customerSignatureDate': null,
                    'scheduledDisbursementDate': null,
                    'page': 1,
                    'per_page': 100,
                    'sortBy':null
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                expandable: true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName + " ( Account #: "+item.accountNumber+")",
                        "<em>Disbursed Amount:  &#8377;"+(_.isEmpty(item.disbursedAmount)?0:item.disbursedAmount)+", Disbursement Amount :  &#8377;"+item.disbursementAmount+"</em>",
                        "{{'TRANCHE'|translate}} : &#8377;" + item.trancheNumber
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "{{'CAPTURE_DISBURSEMENT'|translate}}",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.disbursement.MultiTranche',{"_MTQueue":item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.MultiTranche', pageId: item.id});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.MultiTranche"),
["$log", "IndividualLoan", "SessionStore","$state", "$stateParams","SchemaResource","PageHelper","Utils", 
function($log, IndividualLoan, SessionStore,$state,$stateParams,SchemaResource,PageHelper,Utils){

    var branch = SessionStore.getBranch();

    var populateDisbursementDate = function(modelValue,form,model){
        if (modelValue){
            modelValue = new Date(modelValue);
            model.loanAccountDisbursementSchedule.scheduledDisbursementDate = moment(new Date(modelValue.setDate(modelValue.getDate()+1))).format("YYYY-MM-DD");
        }
    };

    return {
        "type": "schema-form",
        "title": "SUBSEQUENT_TRANCHE_DISBURSEMENT",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("Multi Tranche Page got initialized");
            if (!model._MTQueue)
            {
                $log.info("Screen directly launched hence redirecting to queue screen");
                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.MultiTrancheQueue', pageId: null});
                return;
            }
            model.loanAccountDisbursementSchedule = {};
            model.loanAccountDisbursementSchedule = _.cloneDeep(model._MTQueue);
        },
        offline: false,
        getOfflineDisplayItem: function(item, index){
            
        },
        form: [{
            "type": "box",
            "titleExpr":"('TRANCHE'|translate)+' ' + model._MTQueue.trancheNumber + ' | '+('DISBURSEMENT_DETAILS'|translate)+' | '+ model._MTQueue.accountNumber",
            "items": [
                {
                    "key": "loanAccountDisbursementSchedule.trancheNumber",
                    "title": "TRANCHE_NUMBER"
                },
                {
                    "key": "loanAccountDisbursementSchedule.tranchCondition",
                    "title": "TRACHE_CONDITION",
                    "type": "textarea",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.remarks1",
                    "title": "FRO_REMARKS",
                    "readonly":true,
                    "condition": "model.loanAccountDisbursementSchedule.remarks1!=''"
                },
                {
                    "key": "loanAccountDisbursementSchedule.remarks2",
                    "title": "CRO_REMARKS",
                    "readonly":true,
                    "condition": "model.loanAccountDisbursementSchedule.remarks2!=''"
                },
                {
                    "key": "loanAccountDisbursementSchedule.customerSignatureDate",
                    "title": "CUSTOMER_SIGNATURE_DATE",
                    "type": "date",
                    "onChange":function(modelValue,form,model){
                        populateDisbursementDate(modelValue,form,model);
                    }
                },
                {
                    "key": "loanAccountDisbursementSchedule.scheduledDisbursementDate",
                    "title": "DISBURSEMENT_DATE",
                    "type": "date"
                },

                {
                    "type": "actionbox",
                    "items": [{
                        "type": "submit",
                        "title": "SUBMIT"
                    }]
                }
            ]
        }],
        schema: function() {
            return SchemaResource.getDisbursementSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                    if(window.confirm("Are you sure?")){
                        PageHelper.showLoader();
                        model.loanAccountDisbursementSchedule.udfDate2 = Utils.getCurrentDateTime();
                        var reqData = _.cloneDeep(model);
                        delete reqData.$promise;
                        delete reqData.$resolved;
                        reqData.disbursementProcessAction = "PROCEED";
                        reqData.stage = "FROApproval";
                        IndividualLoan.updateDisbursement(reqData,function(resp,header){
                            PageHelper.showProgress("upd-disb","Done.","5000");
                            PageHelper.hideLoader();
                            $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.MultiTrancheQueue', pageId: null});
                        },function(resp){
                            PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                            PageHelper.showErrors(resp);

                        }).$promise.finally(function(){
                            PageHelper.hideLoader();
                        });
                    }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.PendingFROQueue"),
["$log", "formHelper", "IndividualLoan", "$state", "SessionStore", "$q","entityManager",
function($log, formHelper, IndividualLoan, $state, SessionStore,$q,entityManager){
    return {
        "type": "search-list",
        "title": "FRO_QUEUE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
            model.stage = 'FROApproval';
        },
        definition: {
            title: "SEARCH_CONDITION",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "name":"Customer Name",
                "centre_name":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": 'SearchOptions',
                "required":["branch"],
                "properties": {
                    "customer_name": {
                        "title": "Customer Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "entity_name": {
                        "title": "Entity Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "sanction_date": {
                        "title": "Sanction Date",
                        "type": "string",
                        "x-schema-form": {
                            "type": "date"
                        }
                    },
                    "branch_name": {
                        "title": "Branch Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "centre_name": {
                        "title": "Centre Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                var promise = IndividualLoan.searchDisbursement({
                    'currentStage': 'FROApproval',
                    'customerSignatureDate': null,
                    'scheduledDisbursementDate': null,
                    'page': 1,
                    'per_page': 100,
                    'sortBy':null
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                expandable: true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName + " ( Account #: "+item.accountNumber+")",
                        "<em>Disbursed Amount:  &#8377;"+(_.isEmpty(item.disbursedAmount)?0:item.disbursedAmount)+", Disbursement Amount :  &#8377;"+item.disbursementAmount+"</em>",
                        "{{'TRANCHE'|translate}} : &#8377;" + item.trancheNumber
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "{{'UPDATE'|translate}}",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.disbursement.PendingFRO',{"_FROQueue":item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.PendingFRO', pageId: item.id});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.PendingCROQueue"),
["$log", "formHelper", "IndividualLoan", "$state", "SessionStore", "$q", "entityManager",
function($log, formHelper, IndividualLoan, $state, SessionStore,$q,entityManager){
    return {
        "type": "search-list",
        "title": "CRO_QUEUE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
            model.stage = 'CROApproval';
        },
        definition: {
            title: "SEARCH_CONDITION",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "name":"Customer Name",
                "centre_name":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": 'SearchOptions',
                "required":["branch"],
                "properties": {
                    "customer_name": {
                        "title": "Customer Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "entity_name": {
                        "title": "Entity Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "sanction_date": {
                        "title": "Sanction Date",
                        "type": "string",
                        "x-schema-form": {
                            "type": "date"
                        }
                    },
                    "branch_name": {
                        "title": "Branch Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "centre_name": {
                        "title": "Centre Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                var promise = IndividualLoan.searchDisbursement({
                    'currentStage': 'CROApproval',
                    'customerSignatureDate': null,
                    'scheduledDisbursementDate': null,
                    'page': 1,
                    'per_page': 100,
                    'sortBy':null
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                expandable: true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName + " ( Account #: "+item.accountNumber+")",
                        "<em>Disbursed Amount:  &#8377;"+(_.isEmpty(item.disbursedAmount)?0:item.disbursedAmount)+", Disbursement Amount :  &#8377;"+item.disbursementAmount+"</em>",
                        "{{'TRANCHE'|translate}} : &#8377;" + item.trancheNumber
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "{{'UPDATE'|translate}}",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.disbursement.PendingCRO',{"_CROQueue":item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.PendingCRO', pageId: item.id});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.PendingCRO"),
["$log", "IndividualLoan", "SessionStore","$state", "$stateParams","SchemaResource","PageHelper", 
function($log, IndividualLoan, SessionStore,$state,$stateParams,SchemaResource,PageHelper){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "CRO_APPROVAL",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("CRO Approval Page got initialized");

            if (!model._CROQueue)
            {
                $log.info("Screen directly launched hence redirecting to queue screen");
                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.PendingCROQueue', pageId: null});
                return;
            }
            model.loanAccountDisbursementSchedule = {};
            model.loanAccountDisbursementSchedule = _.cloneDeep(model._CROQueue);
        },
        offline: false,
        getOfflineDisplayItem: function(item, index){
            
        },
        form: [{
            "type": "box",
            "titleExpr":"('TRANCHE'|translate)+' ' + model._MTQueue.trancheNumber + ' | '+('DISBURSEMENT_DETAILS'|translate)+' | '+ model.customerName",
            "items": [
                {
                    "key": "loanAccountDisbursementSchedule.trancheNumber",
                    "title": "TRANCHE_NUMBER"
                },
                {
                    "key": "loanAccountDisbursementSchedule.remarks1",
                    "title": "FRO_REMARKS",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.udfDate2",
                    "title": "REQUESTED_DATE",
                    "type": "date",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.tranchCondition",
                    "title": "TRACHE_CONDITION",
                    "type": "textarea",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.cro_status",
                    "title": "Status",
                    "type": "radios",
                    "titleMap": {
                                "1": "Approve",
                                "2": "Reject"
                            }
                },
                {
                    "key": "loanAccountDisbursementSchedule.remarks2",
                    "title": "REMARKS"
                },
                {
                    "key": "loanAccountDisbursementSchedule.latitude",
                    "title": "Location",
                    "type": "geotag",
                    "latitude": "loanAccountDisbursementSchedule.latitude",
                    "longitude": "loanAccountDisbursementSchedule.longitude"
                },
                {
                    key:"loanAccountDisbursementSchedule.photoId",
                    "title":"Photo",
                    "category":"customer",
                    "subCategory":"customer",
                    offline: false,
                    type:"file",
                    fileType:"image/*"
                },
                {
                    "type": "actionbox",
                    "items": [{
                        "type": "submit",
                        "title": "Submit"
                    }]
                }
            ]
        }],
        schema: function() {
            return SchemaResource.getDisbursementSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                if(window.confirm("Are you sure?")){
                    PageHelper.showLoader();
                    var reqData = _.cloneDeep(model);
                    delete reqData.$promise;
                    delete reqData.$resolved;
                    delete reqData._FROQueue;
                    reqData.disbursementProcessAction = "PROCEED";
                    if (model.loanAccountDisbursementSchedule.cro_status =="2"){
                        reqData.stage = "FROApproval";
                    }
                    IndividualLoan.updateDisbursement(reqData,function(resp,header){
                        PageHelper.showProgress("upd-disb","Done.","5000");
                        PageHelper.hideLoader();
                        $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.PendingCROQueue', pageId: null});
                    },function(resp){
                        PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                        PageHelper.showErrors(resp);

                    }).$promise.finally(function(){
                        PageHelper.hideLoader();
                    });
                }
            }
        }
    };
}]);
irf.pageCollection.factory(irf.page("loans.individual.disbursement.PendingFRO"),
["$log", "IndividualLoan", "SessionStore","$state", "$stateParams","SchemaResource","PageHelper", 
function($log, IndividualLoan, SessionStore,$state,$stateParams,SchemaResource,PageHelper){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "FRO_APPROVAL",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("FRO Approval Page got initialized");

            if (!model._FROQueue)
            {
                $log.info("Screen directly launched hence redirecting to queue screen");
                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.PendingFROQueue', pageId: null});
                return;
            }
            model.loanAccountDisbursementSchedule = {};
            model.loanAccountDisbursementSchedule = _.cloneDeep(model._FROQueue);
        },
        offline: false,
        getOfflineDisplayItem: function(item, index){
            
        },
        form: [{
            "type": "box",
            "titleExpr":"('TRANCHE'|translate)+' ' + model._MTQueue.trancheNumber + ' | '+('DISBURSEMENT_DETAILS'|translate)+' | '+ model.customerName",
            "items": [
                {
                    "key": "loanAccountDisbursementSchedule.trancheNumber",
                    "title": "TRANCHE_NUMBER"
                },
                {
                    "key": "loanAccountDisbursementSchedule.udfDate2",
                    "title": "REQUESTED_DATE",
                    "type": "date",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.tranchCondition",
                    "title": "TRACHE_CONDITION",
                    "type": "textarea",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.fro_status",
                    "title": "STATUS",
                    "type": "radios",
                    "titleMap": {
                                "1": "Approve",
                                "2": "Reject"
                            }
                },
                {
                    "key": "loanAccountDisbursementSchedule.remarks1",
                    "title": "REMARKS"
                },
                {
                    "key": "loanAccountDisbursementSchedule.latitude",
                    "title": "LOCATION",
                    "type": "geotag",
                    "latitude": "loanAccountDisbursementSchedule.latitude",
                    "longitude": "loanAccountDisbursementSchedule.longitude"
                },
                {
                    key:"loanAccountDisbursementSchedule.photoId",
                    "title":"PHOTO",
                    "category":"customer",
                    "subCategory":"customer",
                    offline: false,
                    type:"file",
                    fileType:"image/*"
                },
                {
                    "type": "actionbox",
                    "items": [{
                        "type": "submit",
                        "title": "SUBMIT"
                    }]
                }
            ]
        }],
        schema: function() {
            return SchemaResource.getDisbursementSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                if(window.confirm("Are you sure?")){
                    PageHelper.showLoader();
                    var reqData = _.cloneDeep(model);
                    delete reqData.$promise;
                    delete reqData.$resolved;
                    delete reqData._FROQueue;
                    reqData.disbursementProcessAction = "PROCEED";
                    if (model.loanAccountDisbursementSchedule.fro_status =="2"){
                        reqData.stage = "MTDisbursementDataCapture";
                    }
                    IndividualLoan.updateDisbursement(reqData,function(resp,header){
                        PageHelper.showProgress("upd-disb","Done.","5000");
                        PageHelper.hideLoader();
                        $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.PendingFROQueue', pageId: null});
                    },function(resp){
                        PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                        PageHelper.showErrors(resp);

                    }).$promise.finally(function(){
                        PageHelper.hideLoader();
                    });
                }
            }
        }
    };
}]);
irf.pageCollection.factory(irf.page("loans.individual.disbursement.EMIScheduleGenQueue"),
["$log", "formHelper", "IndividualLoan", "$state", "SessionStore", "$q","entityManager",
function($log, formHelper, IndividualLoan, $state, SessionStore,$q,entityManager){
    return {
        "type": "search-list",
        "title": "EMI_SCH_GEN_QUEUE",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
            model.stage = 'DocumentUpload';
        },
        definition: {
            title: "SEARCH_CONDITION",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "name":"Customer Name",
                "centre_name":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": 'SearchOptions',
                "required":["branch"],
                "properties": {
                    "customer_name": {
                        "title": "Customer Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "entity_name": {
                        "title": "Entity Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "sanction_date": {
                        "title": "Sanction Date",
                        "type": "string",
                        "x-schema-form": {
                            "type": "date"
                        }
                    },
                    "branch_name": {
                        "title": "Branch Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "centre_name": {
                        "title": "Centre Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                var promise = IndividualLoan.searchDisbursement({
                    'currentStage': 'DocumentUpload',
                    'customerSignatureDate': null,
                    'scheduledDisbursementDate': null,
                    'page': 1,
                    'per_page': 100,
                    'sortBy':null
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                expandable: true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName + " ( Account #: "+item.accountNumber+")",
                        "<em>Disbursed Amount:  &#8377;"+(_.isEmpty(item.disbursedAmount)?0:item.disbursedAmount)+", Disbursement Amount :  &#8377;"+item.disbursementAmount+"</em>",
                        "{{'TRANCHE'|translate}} : &#8377;" + item.trancheNumber
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "{{'UPLOAD_DOCUMENT'|translate}}",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.disbursement.GenerateEMISchedule',{"_EMIScheduleGenQueue":item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.GenerateEMISchedule', pageId: item.id});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.GenerateEMISchedule"), 
    ["$log", "SchemaResource", "SessionStore", "$state", '$stateParams', 'PageHelper', 'IndividualLoan', 'Queries', 'Utils', "formHelper", "CustomerBankBranch","LoanProcess",
    function($log, SchemaResource, SessionStore, $state, $stateParams, PageHelper, IndividualLoan, Queries, Utils, formHelper, CustomerBankBranch,LoanProcess) {


        var getDocument = function(docsArr, docCode) {
            var i = 0;
            for (i = 0; i < docsArr.length; i++) {
                if (docsArr[i].docCode == docCode) {
                    return docsArr[i];
                }
            }
            return null;
        }

        return {
            "type": "schema-form",
            "title": "UPLOAD_DOCUMENT",
            "subTitle": " ",
            initialize: function(model, form, formCtrl) {
                $log.info("Multi Tranche Upload Document Page got initialized");

                if (!model._EMIScheduleGenQueue) {
                    $log.info("Screen directly launched hence redirecting to queue screen");
                    $state.go('Page.Engine', {
                        pageName: 'loans.individual.disbursement.EMIScheduleGenQueue',
                        pageId: null
                    });
                    return;
                }
                model.loanAccountDisbursementSchedule = {};
                model.loanAccountDisbursementSchedule = _.cloneDeep(model._EMIScheduleGenQueue);
                model.loanAccountDisbursementSchedule.party = model.loanAccountDisbursementSchedule.party || 'CUSTOMER';

                PageHelper.showProgress('loan-load', 'Loading details...');
                PageHelper.showLoader();
                IndividualLoan.get({
                        id: model.loanAccountDisbursementSchedule.loanId
                    })
                    .$promise
                    .then(
                        function(res) {
                            PageHelper.showProgress('loan-load', 'Loading done.', 2000);
                            model.loanAccount = res;
                            $log.info("Loan account fetched");
                            $log.info(res);

                            Queries.getLoanProductDocuments(model.loanAccount.productCode, "MultiTranche", "DocumentUpload")
                                .then(
                                    function(docs) {
                                        $log.info("document fetched");
                                        $log.info(docs);
                                        var docsForProduct = [];
                                        for (var i = 0; i < docs.length; i++) {
                                            var doc = docs[i];
                                            docsForProduct.push({
                                                docTitle: doc.document_name,
                                                docCode: doc.document_code,
                                                formsKey: doc.forms_key,
                                                downloadRequired: doc.download_required
                                            })
                                        }

                                        model.individualLoanDocuments = model.individualLoanDocuments || [];
                                        $log.info("printing");
                                        $log.info(model.individualLoanDocuments);

                                        var loanDocuments = model.individualLoanDocuments;
                                        var availableDocCodes = [];
                                        $log.info("Number of documents: " + loanDocuments.length);
                                        $log.info("docsForProduct length: " + docsForProduct.length);
                                        $log.info("availableDocCodes length: " + availableDocCodes.length);

                                        for (var i = 0; i < loanDocuments.length; i++) {
                                            availableDocCodes.push(loanDocuments[i].document_code);
                                            $log.info(loanDocuments[i]);
                                            var documentObj = getDocument(docsForProduct, loanDocuments[i].document_code);
                                            if (_.isObject(documentObj)) {
                                                $log.info("going to set value");
                                                loanDocuments[i].$title = documentObj.docTitle;
                                                loanDocuments[i].$key = documentObj.formsKey;
                                            } else {
                                                $log.info("in else");
                                                $log.info(loanDocuments);
                                                loanDocuments[i].$title = "DOCUMENT TITLE NOT MAINTAINED";
                                            }

                                        }

                                        for (var i = 0; i < docsForProduct.length; i++) {
                                            if (_.indexOf(availableDocCodes, docsForProduct[i].docCode) == -1) {
                                                loanDocuments.push({
                                                    document: docsForProduct[i].docCode,
                                                    $downloadRequired: docsForProduct[i].downloadRequired,
                                                    $title: docsForProduct[i].docTitle,
                                                    $formsKey: docsForProduct[i].formsKey,
                                                    disbursementId: model.loanAccountDisbursementSchedule.id,
                                                    loanId: model.loanAccountDisbursementSchedule.loanId,
                                                    documentStatus: "PENDING"
                                                })
                                            }
                                        }
                                        $log.info("Number of documents finally: " + loanDocuments.length);
                                        LoanProcess.generateScheduleForSpecifiedDate({
                                        "accountNumber": model.loanAccountDisbursementSchedule.accountNumber,
                                        "amount":model.loanAccountDisbursementSchedule.disbursementAmount,
                                        "scheduledDisbursementDate":model.loanAccountDisbursementSchedule.scheduledDisbursementDate,
                                        "firstRepaymentDate":model.loanAccount.firstRepaymentDate
                                        })
                                            .$promise
                                            .then(function(resp) {}, function(httpRes) {
                                                PageHelper.showProgress('loan-load', 'Failed to load the EMI Schedule. Try again.', 4000);
                                                PageHelper.showErrors(httpRes);
                                            });
                                    },
                                    function(httpRes) {
                                        PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                                        PageHelper.showErrors(httpRes);
                                        PageHelper.hideLoader();
                                    }
                                )
                                .finally(function(httpRes) {

                                })
                            PageHelper.hideLoader();
                        },
                        function(httpRes) {
                            PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                            PageHelper.showErrors(httpRes);
                            PageHelper.hideLoader();
                        }
                    )
            },

            form: [

                {
                    "type": "box",
                    "title": "DISBURSEMENT_DETAILS",
                    "colClass": "col-sm-12",
                    "items": [{
                        "type": "fieldset",
                        "title": "DISBURSEMENT_ACCOUNT_DETAILS",
                        "items": [{
                            "key": "loanAccountDisbursementSchedule.party",
                            "type": "radios",
                            "titleMap": [{
                                "name": "Customer",
                                "value": "CUSTOMER"
                            }, {
                                "name": "Vendor",
                                "value": "VENDOR"
                            }],
                            onChange: function(value, form, model) {
                                model.loanAccountDisbursementSchedule.customerAccountNumber = '';
                                model.loanAccountDisbursementSchedule.ifscCode = '';
                                model.loanAccountDisbursementSchedule.customerBankName = '';
                                model.loanAccountDisbursementSchedule.customerBankBranchName = '';
                                model.loanAccountDisbursementSchedule.customerNameInBank = '';
                            }
                        }, {
                            key: "loanAccountDisbursementSchedule.customerNameInBank",
                            title: "CUSTOMER_NAME_IN_BANK"
                        }, {
                            key: "loanAccountDisbursementSchedule.customerAccountNumber",
                            type: "lov",
                            autolov: true,
                            title: "CUSTOMER_BANK_ACC_NO",
                            "condition": "model.loanAccountDisbursementSchedule.party=='CUSTOMER'",
                            bindMap: {
                                "customerId": "loanAccount.customerId"
                            },
                            outputMap: {
                                "account_number": "loanAccountDisbursementSchedule.customerAccountNumber",
                                "ifsc_code": "loanAccountDisbursementSchedule.ifscCode",
                                "customer_bank_name": "loanAccountDisbursementSchedule.customerBankName",
                                "customer_bank_branch_name": "loanAccountDisbursementSchedule.customerBankBranchName",
                                "customer_name_as_in_bank": "loanAccountDisbursementSchedule.customerNameInBank"
                            },
                            searchHelper: formHelper,
                            search: function(inputModel, form, model) {
                                var urn = [];
                                for(var i =0; i <model.loanAccount.loanCustomerRelations.length; i++)
                                {
                                    urn.push(model.loanAccount.loanCustomerRelations[i].urn);   
                                }
                                urn.push(model.loanAccount.urnNo);
                                return Queries.getCustomersBankAccounts({
                                   customer_urns : urn,
                                   customer_ids : model.loanAccount.customerId
                                });
                            },

                            getListDisplayItem: function(item, index) {
                                return [
                                    'Account Number : ' +item.account_number,
                                    'Branch : ' + item.customer_bank_branch_name,
                                    'Bank : ' + item.customer_bank_name,
                                    'IFSC Code : ' + item.ifsc_code

                                ];
                            }
                        }, {
                            key: "loanAccountDisbursementSchedule.customerAccountNumber",
                            title: "CUSTOMER_BANK_ACC_NO",
                            "condition": "model.loanAccountDisbursementSchedule.party=='VENDOR'"
                        }, {
                            key: "loanAccountDisbursementSchedule.ifscCode",
                            title: "CUSTOMER_BANK_IFSC",
                            "condition": "model.loanAccountDisbursementSchedule.party=='CUSTOMER'"
                        }, {
                            key: "loanAccountDisbursementSchedule.ifscCode",
                            type: "lov",
                            lovonly: true,
                            "condition": "model.loanAccountDisbursementSchedule.party=='VENDOR'",
                            inputMap: {
                                "ifscCode": {
                                    "key": "loanAccountDisbursementSchedule.ifscCode"
                                },
                                "bankName": {
                                    "key": "loanAccountDisbursementSchedule.customerBankName"
                                },
                                "branchName": {
                                    "key": "loanAccountDisbursementSchedule.customerBankBranchName"
                                }
                            },
                            outputMap: {
                                "bankName": "loanAccountDisbursementSchedule.customerBankName",
                                "branchName": "loanAccountDisbursementSchedule.customerBankBranchName",
                                "ifscCode": "loanAccountDisbursementSchedule.ifscCode"
                            },
                            searchHelper: formHelper,
                            search: function(inputModel, form) {
                                var promise = CustomerBankBranch.search({
                                    'bankName': inputModel.bankName,
                                    'ifscCode': inputModel.ifscCode,
                                    'branchName': inputModel.branchName
                                }).$promise;
                                return promise;
                            },
                            getListDisplayItem: function(data, index) {
                                return [
                                    data.ifscCode,
                                    data.branchName,
                                    data.bankName
                                ];
                            }
                        }, {
                            key: "loanAccountDisbursementSchedule.customerBankName",
                            title: "CUSTOMER_BANK"
                        }, {
                            key: "loanAccountDisbursementSchedule.customerBankBranchName",
                            title: "BRANCH_NAME"
                        }]
                    }]
                }, {
                    "type": "box",
                    "colClass": "col-sm-12",
                    "titleExpr": "('TRANCHE'|translate)+' ' + model._MTQueue.trancheNumber + ' | '+('DISBURSEMENT_DETAILS'|translate)+' | '+ model.customerName",
                    "htmlClass": "text-danger",
                    "items": [{
                        "key": "loanAccountDisbursementSchedule.scheduledDisbursementDate",
                        "title": "DISBURSEMENT_DATE",
                        "type": "date",
                        "readonly": true
                    }, {
                        "key": "loanAccountDisbursementSchedule.customerSignatureDate",
                        "title": "CUSTOMER_SIGNATURE_DATE",
                        "type": "date",
                        "readonly": true
                    }, {
                        "key": "loanAccountDisbursementSchedule.remarks1",
                        "title": "FRO_REMARKS",
                        "readonly": true
                    }, {
                        "key": "loanAccountDisbursementSchedule.remarks2",
                        "title": "CRO_REMARKS",
                        "readonly": true
                    }, {
                        "type": "array",
                        "notitle": true,
                        "view": "fixed",
                        "key": "individualLoanDocuments",
                        "startEmpty": true,
                        "add": null,
                        "remove": null,
                        "items": [{
                            "type": "section",
                            "htmlClass": "row",
                            "items": [{
                                "type": "section",
                                "htmlClass": "col-sm-3",
                                "items": [{
                                    "key": "individualLoanDocuments[].$title",
                                    "notitle": true,
                                    "titleExpr": "model.individualLoanDocuments[arrayIndex].$title",
                                    "type": "anchor",
                                    "fieldHtmlClass": "text-bold",
                                    "condition": "model.individualLoanDocuments[arrayIndex].$downloadRequired",
                                    "onClick": function(model, form, schemaForm, event) {
                                        var doc = model.individualLoanDocuments[event.arrayIndex];
                                        console.log(doc);
                                        Utils.downloadFile(irf.FORM_DOWNLOAD_URL + "?form_name=" + doc.$formsKey + "&record_id=" + model.loanAccountDisbursementSchedule.loanId);
                                    }
                                },{
                                    "key": "individualLoanDocuments[].$title",
                                    "notitle": true,
                                    "title": " ",
                                    "condition": "!model.individualLoanDocuments[arrayIndex].$downloadRequired",
                                    "readonly": true
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-2",
                                "key": "individualLoanDocuments[].documentStatus",
                                "items": [{
                                    "notitle": true,
                                    "key": "individualLoanDocuments[].documentStatus",
                                    "readonly": true
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-4",
                                "key": "individualLoanDocuments[].remarks",
                                "condition": "model.individualLoanDocuments[arrayIndex].documentStatus === 'APPROVED'",
                                "items": [{
                                    "notitle": true,
                                    "key": "individualLoanDocuments[].remarks",
                                    "readonly": true
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-4",
                                "key": "individualLoanDocuments[].documentStatus",
                                "condition": "model.individualLoanDocuments[arrayIndex].documentStatus === 'REJECTED' && !model.individualLoanDocuments[arrayIndex].remarks",
                                "items": [{
                                    "notitle": true,
                                    "key": "individualLoanDocuments[].rejectReason",
                                    "readonly": true
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-2",
                                "key": "individualLoanDocuments[].documentStatus",
                                "condition": "model.individualLoanDocuments[arrayIndex].documentStatus === 'REJECTED' && model.individualLoanDocuments[arrayIndex].remarks",
                                "items": [{
                                    "notitle": true,
                                    "key": "individualLoanDocuments[].rejectReason",
                                    "readonly": true
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-2",
                                "key": "individualLoanDocuments[].documentStatus",
                                "condition": "model.individualLoanDocuments[arrayIndex].documentStatus === 'REJECTED' && model.individualLoanDocuments[arrayIndex].remarks",
                                "items": [{
                                    "notitle": true,
                                    "key": "individualLoanDocuments[].remarks",
                                    "readonly": true
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-4",
                                "key": "individualLoanDocuments[].documentStatus",
                                "condition": "model.individualLoanDocuments[arrayIndex].documentStatus !== 'REJECTED' && model.individualLoanDocuments[arrayIndex].documentStatus !== 'APPROVED'"
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-3",
                                "items": [{
                                    title: "Upload",
                                    key: "individualLoanDocuments[].documentId",
                                    "required": true,
                                    type: "file",
                                    fileType: "*/*",
                                    category: "Loan",
                                    subCategory: "DOC1",
                                    "notitle": true
                                }]
                            }]
                        }]
                    }]
                }, {
                    "type": "actionbox",
                    "items": [{
                        "type": "submit",
                        "title": "Submit"
                    }]
                }
            ],
            schema: function() {
                return SchemaResource.getDisbursementSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {
                    if (window.confirm("Are you sure?")) {
                        PageHelper.showLoader();
                        var reqData = _.cloneDeep(model);
                        delete reqData.$promise;
                        delete reqData.$resolved;
                        delete reqData.loanAccount;
                        delete reqData._EMIScheduleGenQueue;
                        reqData.disbursementProcessAction = "PROCEED";
                        IndividualLoan.updateDisbursement(reqData, function(resp, header) {
                            PageHelper.showProgress("upd-disb", "Done.", "5000");
                            PageHelper.hideLoader();
                            $state.go('Page.Engine', {
                                pageName: 'loans.individual.disbursement.MultiTrancheQueue',
                                pageId: null
                            });
                        }, function(resp) {
                            PageHelper.showProgress("upd-disb", "Oops. An error occurred", "5000");
                            PageHelper.showErrors(resp);

                        }).$promise.finally(function() {
                            PageHelper.hideLoader();
                        });
                    }
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("loans.individual.disbursement.RejectedDisbursementQueue"),
    ["$log", "formHelper", "$state", "SessionStore", "$q", "IndividualLoan","PageHelper","entityManager",
        function($log, formHelper,  $state, SessionStore, $q, IndividualLoan,PageHelper,entityManager){
            return {
                "type": "search-list",
                "title": "REJECTED_DISBURSEMENT_QUEUE",
                "subTitle": "",
                initialize: function (model, form, formCtrl) {

                    model.branchName = SessionStore.getBranch();
                    model.stage = 'RejectedDisbursement';
                    console.log(model);
                },
                offline: false,
                definition: {
                    title: "REJECTED_DISBURSEMENT_QUEUE",
                    autoSearch: true,
                    sorting:true,
                    sortByColumns:{
                        "customerSignatureDate":"Customer Signature Date",
                        "scheduledDisbursementDate":"Scheduled Disbursement Date"

                    },
                    searchForm: [
                        "*"
                    ],
                    searchSchema: {
                        "type": 'object',
                        "title": "VIEW_LOANS",
                        "required":[],
                        "properties": {

                            // "customerSignatureDate": {
                            //     "title": "CUSTOMER_SIGNATURE_DATE",
                            //     "type": "string",
                            //     "x-schema-form": {
                            //         "type": "date"

                            //     }
                            // },

                            "scheduledDisbursementDate": {
                                "title": "SCHEDULED_DISBURSEMENT_DATE",
                                "type": "string",
                                "x-schema-form": {
                                    "type": "date"
                                }
                            }

                        }
                    },
                    getSearchFormHelper: function() {
                        return formHelper;
                    },
                    getResultsPromise: function(searchOptions, pageOpts){
                        return IndividualLoan.searchDisbursement({
                            'currentStage': 'RejectedDisbursement',
                            'customerSignatureDate': searchOptions.customerSignatureDate,
                            'scheduledDisbursementDate': searchOptions.scheduledDisbursementDate

                        }).$promise;

                    },
                    paginationOptions: {
                        "viewMode": "page",
                        "getItemsPerPage": function(response, headers){
                            return 20;
                        },
                        "getTotalItemsCount": function(response, headers){
                            return headers['x-total-count']
                        }
                    },
                    listOptions: {
                        itemCallback: function(item, index) {
                            $log.info(item);
                        },
                        getItems: function(response, headers){
                            if (response!=null && response.length && response.length!=0){
                                return response;
                            }
                            return [];
                        },
                        getListItem: function(item){
                            return [
                                item.customerName + " ( Account #: "+item.accountNumber+")",
                                "<em>Disbursed Amount:  &#8377;"+(_.isEmpty(item.disbursedAmount)?0:item.disbursedAmount)+", Disbursement Amount :  &#8377;"+item.disbursementAmount+"</em>",
                                "Customer Signature Date  : " + (_.isEmpty(item.customerSignatureDate)?" NA ":item.customerSignatureDate)+", Scheduled Disbursement Date :"+(_.isEmpty(item.scheduledDisbursementDate)?" NA ":item.scheduledDisbursementDate)
                            ]
                        },
                        getActions: function(){
                            return [
                                {
                                    name: "UPDATE_ACCOUNT",
                                    desc: "",
                                    fn: function(item, index){

                                        entityManager.setModel('loans.individual.disbursement.UpdateAccountDetails', {_rejectedDisbursementQueue:item});
                                        $state.go("Page.Engine",{
                                            pageName:"loans.individual.disbursement.UpdateAccountDetails",
                                            pageId:[item.loanId,item.id].join(".")
                                        });

                                    },
                                    isApplicable: function(item, index){
                                        return true;
                                    }
                                }
                            ];
                        }
                    }
                }
            };
        }]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.UpdateAccountDetails"),
["$log", "IndividualLoan", "SessionStore","$state", "$stateParams","SchemaResource","PageHelper","formHelper","CustomerBankBranch", 
function($log, IndividualLoan, SessionStore,$state,$stateParams,SchemaResource,PageHelper,formHelper,CustomerBankBranch){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "UPDATE_ACCOUNT",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("Update Account Details Page got initialized");

            if (!model._rejectedDisbursementQueue)
            {
                $log.info("Screen directly launched hence redirecting to queue screen");
                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.RejectedDisbursementQueue', pageId: null});
                return;
            }
            model.loanAccountDisbursementSchedule = {};
            model.loanAccountDisbursementSchedule = _.cloneDeep(model._rejectedDisbursementQueue);
        },
        offline: false,
        getOfflineDisplayItem: function(item, index){
            
        },
        form: [{
            "type": "box",
            "titleExpr":"('TRANCHE'|translate)+' ' + model._MTQueue.trancheNumber + ' | '+('DISBURSEMENT_DETAILS'|translate)+' | '+ model.customerName",
            "items": [
                {
                    "key": "loanAccountDisbursementSchedule.trancheNumber",
                    "title": "TRANCHE_NUMBER"
                },
                {
                    "key": "loanAccountDisbursementSchedule.udfDate2",
                    "title": "REQUESTED_DATE",
                    "type": "date",
                    "readonly":true,
                    "condition":"model.loanAccountDisbursementSchedule.udfDate2!=null"
                },
                {
                    "key": "loanAccountDisbursementSchedule.customerNameInBank",
                    "title": "CUSTOMER_NAME_IN_BANK"
                },
                {
                    "key": "loanAccountDisbursementSchedule.customerAccountNumber",
                    "title": "CUSTOMER_BANK_ACC_NO"
                },
                {
                    key: "loanAccountDisbursementSchedule.ifscCode",
                    type: "lov",
                    lovonly: true,
                    inputMap: {
                        "ifscCode": {
                            "key": "loanAccountDisbursementSchedule.ifscCode"
                        },
                        "bankName": {
                            "key": "loanAccountDisbursementSchedule.customerBankName"
                        },
                        "branchName": {
                            "key": "loanAccountDisbursementSchedule.customerBankBranchName"
                        }
                    },
                    outputMap: {
                        "bankName": "loanAccountDisbursementSchedule.customerBankName",
                        "branchName": "loanAccountDisbursementSchedule.customerBankBranchName",
                        "ifscCode": "loanAccountDisbursementSchedule.ifscCode"
                    },
                    searchHelper: formHelper,
                    search: function(inputModel, form) {
                        var promise = CustomerBankBranch.search({
                            'bankName': inputModel.bankName,
                            'ifscCode': inputModel.ifscCode,
                            'branchName': inputModel.branchName
                        }).$promise;
                        return promise;
                    },
                    getListDisplayItem: function(data, index) {
                        return [
                            data.ifscCode,
                            data.branchName,
                            data.bankName
                        ];
                    }
                },
                {
                    "key": "loanAccountDisbursementSchedule.customerBankName",
                    "title": "BANK_NAME",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.customerBankBranchName",
                    "title": "BRANCH_NAME",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.udf5",
                    "title": "REJECTED_REASON",
                    "readonly":true
                },
                {
                    "key": "loanAccountDisbursementSchedule.udf4",
                    "title": "REJECT_REMARKS",
                    "readonly":true
                },
                {
                    "type": "actionbox",
                    "items": [{
                        "type": "button",
                        "title": "BACK",
                        "onClick": "actions.goBack(model, formCtrl, form, $event)"
                    },
                    {
                        "type": "submit",
                        "title": "SUBMIT"
                    }]
                }
            ]
        }],
        schema: function() {
            return SchemaResource.getDisbursementSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                if(window.confirm("Are you sure?")){
                    PageHelper.showLoader();
                    var reqData = _.cloneDeep(model);
                    delete reqData.$promise;
                    delete reqData.$resolved;
                    delete reqData._rejectedDisbursementQueue;
                    reqData.disbursementProcessAction = "PROCEED";
                    reqData.stage = "ReadyForDisbursement";
                    IndividualLoan.updateDisbursement(reqData,function(resp,header){
                        PageHelper.showProgress("upd-disb","Done.","5000");
                        PageHelper.hideLoader();
                        $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.RejectedDisbursementQueue', pageId: null});
                    },function(resp){
                        PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                        PageHelper.showErrors(resp);

                    }).$promise.finally(function(){
                        PageHelper.hideLoader();
                    });
                }
            },
            goBack: function (model, formCtrl, form, $event) {
                $state.go("Page.Engine", {
                    pageName: 'loans.individual.disbursement.RejectedDisbursementQueue',
                    pageId: null
                });
            }
        }
    };
}]);
irf.pageCollection.factory(irf.page("loans.individual.disbursement.MultiDocVerificationQueue"),
["$log", "formHelper", "IndividualLoan", "$state", "SessionStore", "$q","entityManager",
function($log, formHelper, IndividualLoan, $state, SessionStore,$q,entityManager){
    return {
        "type": "search-list",
        "title": "LOAN_PENDING_VERIFICATION_QUEUE",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
            model.stage = 'DocumentVerification';
        },
        definition: {
            title: "SEARCH_CONDITION",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "name":"Customer Name",
                "centre_name":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": 'SearchOptions',
                "required":["branch"],
                "properties": {
                    "customer_name": {
                        "title": "Customer Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "entity_name": {
                        "title": "Entity Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "sanction_date": {
                        "title": "Sanction Date",
                        "type": "string",
                        "x-schema-form": {
                            "type": "date"
                        }
                    },
                    "branch_name": {
                        "title": "Branch Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "centre_name": {
                        "title": "Centre Name",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select"
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                var promise = IndividualLoan.searchDisbursement({
                    'currentStage': 'DocumentVerification',
                    'customerSignatureDate': null,
                    'scheduledDisbursementDate': null,
                    'page': 1,
                    'per_page': 100,
                    'sortBy':null
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                expandable: true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName + " ( Account #: "+item.accountNumber+")",
                        "<em>Disbursed Amount:  &#8377;"+(_.isEmpty(item.disbursedAmount)?0:item.disbursedAmount)+", Disbursement Amount :  &#8377;"+item.disbursementAmount+"</em>",
                        "{{'TRANCHE'|translate}} : &#8377;" + item.trancheNumber
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "{{'VERIFY_DOCUMENT'|translate}}",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.disbursement.MultiDocVerification',{"_DocVerifyQueue":item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.MultiDocVerification', pageId: item.id});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.MultiDocVerification"), ["$log", "SchemaResource", "SessionStore", "$state", "$stateParams", "$filter", "PageHelper", "formHelper", "IndividualLoan", "LoanBookingCommons", "Utils", "Files", "Queries", "$q",
    function($log, SchemaResource, SessionStore, $state, $stateParams, $filter, PageHelper, formHelper, IndividualLoan, LoanBookingCommons, Utils, Files, Queries, $q) {

        var docRejectReasons = [];
        Queries.getLoanProductDocumentsRejectReasons().then(function(resp){
            docRejectReasons = resp;
        });

        var getDocument = function(docsArr, docCode) {
            var i = 0;
            for (i = 0; i < docsArr.length; i++) {
                if (docsArr[i].docCode == docCode) {
                    return docsArr[i];
                }
            }
            return null;
        }

        return {
            "type": "schema-form",
            "title": "DOCUMENT_VERIFICATION",
            "subTitle": " ",
            initialize: function(model, form, formCtrl) {
                $log.info("Multi Tranche Document Verification Page got initialized");

                PageHelper.showProgress('loan-load', 'Loading loan details...');
                if (!model._DocVerifyQueue) {
                    $log.info("Screen directly launched hence redirecting to queue screen");
                    $state.go('Page.Engine', {
                        pageName: 'loans.individual.disbursement.MultiDocVerificationQueue',
                        pageId: null
                    });
                    return;
                }
                model.loanAccountDisbursementSchedule = {};
                model.loanAccountDisbursementSchedule = _.cloneDeep(model._DocVerifyQueue);
                PageHelper.showLoader();
                IndividualLoan.get({
                    id: model.loanAccountDisbursementSchedule.loanId
                }).$promise.then(function(res) {
                    PageHelper.showProgress('loan-load', 'Loading done.', 2000);
                    model.loanAccount = res;
                    $log.info("Loan account fetched");
                    Queries.getLoanProductDocuments(model.loanAccount.productCode, "MultiTranche", "DocumentUpload").then(function(docs) {
                        var docsForProduct = [];
                        for (var i = 0; i < docs.length; i++) {
                            var doc = docs[i];
                            docsForProduct.push({
                                docTitle: doc.document_name,
                                docCode: doc.document_code,
                                formsKey: doc.forms_key,
                                downloadRequired: doc.download_required
                            })
                        }

                        model.individualLoanDocuments = model.individualLoanDocuments || [];
                        var j = 0;

                        var loanDocuments = model.individualLoanDocuments;
                        var availableDocCodes = [];
                        if (model.loanAccount.loanDocuments.length) {
                            for (var i = model.loanAccount.loanDocuments.length - 1; i >= 0; i--) {
                                if (model.loanAccount.loanDocuments[i].disbursementId != null && model.loanAccount.loanDocuments[i].documentStatus == "PENDING") {
                                    model.individualLoanDocuments[j] = model.loanAccount.loanDocuments[i];
                                }
                            }
                        }

                        for (var i = 0; i < model.individualLoanDocuments.length; i++) {
                            var documentObj = getDocument(docsForProduct, model.individualLoanDocuments[i].document);
                            if (_.isObject(documentObj)) {
                                model.individualLoanDocuments[i].$title = documentObj.docTitle;
                                model.individualLoanDocuments[i].$key = documentObj.formsKey;
                            } else {
                                loanDocuments[i].$title = "DOCUMENT TITLE NOT MAINTAINED";
                            }
                        }
                        $log.info(model.individualLoanDocuments);
                    },
                    function(httpRes) {
                        PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                        PageHelper.showErrors(httpRes);
                        PageHelper.hideLoader();
                    }).finally(function(httpRes) {

                    });
                    PageHelper.hideLoader();
                },
                function(httpRes) {
                    PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                    PageHelper.showErrors(httpRes);
                    PageHelper.hideLoader();
                });
            },
            form: [
                {
                    "type": "box",
                    "title": "DISBURSEMENT_DETAILS",
                    "colClass": "col-sm-12",
                    "items": [{
                        "type": "fieldset",
                        "title": "DISBURSEMENT_ACCOUNT_DETAILS",
                        "items": [{
                            "key": "loanAccountDisbursementSchedule.party",
                            "type": "text",
                            "readonly":true,
                            "title":"PARTY"
                        }, 
                        {
                            key: "loanAccountDisbursementSchedule.customerNameInBank",
                            title: "CUSTOMER_NAME_IN_BANK",
                            "readonly":true
                        },
                        {
                            key: "loanAccountDisbursementSchedule.customerAccountNumber",
                            title: "CUSTOMER_BANK_ACC_NO",
                            "readonly":true
                        }, 
                        {
                            key: "loanAccountDisbursementSchedule.ifscCode",
                            title: "CUSTOMER_BANK_IFSC",
                            "readonly":true
                        }, 
                        {
                            key: "loanAccountDisbursementSchedule.customerBankName",
                            title: "CUSTOMER_BANK",
                            "readonly":true
                        }, 
                        {
                            key: "loanAccountDisbursementSchedule.customerBankBranchName",
                            title: "BRANCH_NAME",
                            "readonly":true
                        }]
                    }]
                },
                {
                    "type": "box",
                    "colClass": "col-sm-12",
                    "titleExpr": "('TRANCHE'|translate)+' ' + model._MTQueue.trancheNumber + ' | '+('DISBURSEMENT_DETAILS'|translate)+' | '+ model.customerName",
                    "htmlClass": "text-danger",
                    "items": [{
                        "key": "loanAccountDisbursementSchedule.remarks1",
                        "title": "FRO_REMARKS",
                        "readonly": true
                    }, {
                        "key": "loanAccountDisbursementSchedule.remarks2",
                        "title": "CRO_REMARKS",
                        "readonly": true
                    }, {
                        "type": "array",
                        "notitle": true,
                        "view": "fixed",
                        "key": "individualLoanDocuments",
                        "startEmpty": true,
                        "add": null,
                        "remove": null,
                        "items": [{
                            "type": "section",
                            "htmlClass": "row",
                            "items": [{
                                "type": "section",
                                "htmlClass": "col-sm-3",
                                "items": [{
                                    "key": "individualLoanDocuments[].$title",
                                    "notitle": true,
                                    "title": " ",
                                    "readonly": true
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-2",
                                "items": [{
                                    "title": "DOWNLOAD_FORM",
                                    "notitle": true,
                                    "fieldHtmlClass": "btn-block",
                                    "style": "btn-default",
                                    "icon": "fa fa-download",
                                    "type": "button",
                                    "readonly": false,
                                    "key": "individualLoanDocuments[].documentId",
                                    "onClick": function(model, form, schemaForm, event) {
                                        var fileId = model.individualLoanDocuments[schemaForm.arrayIndex].documentId;
                                        Utils.downloadFile(Files.getFileDownloadURL(fileId));
                                    }
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-2",
                                "items": [{
                                    "key": "individualLoanDocuments[].documentStatus",
                                    "title": "Status",
                                    "notitle": true,
                                    "type": "select",
                                    "titleMap": [{
                                        value: "REJECTED",
                                        name: "Rejected"
                                    }, {
                                        value: "APPROVED",
                                        name: "Approved"
                                    }]
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-3",
                                "condition": "model.individualLoanDocuments[arrayIndex].documentStatus === 'REJECTED'",
                                "items": [{
                                    title: "Reason",
                                    notitle: true,
                                    placeholder: "Reason",
                                    key: "individualLoanDocuments[].rejectReason",
                                    type: "lov",
                                    lovonly: true,
                                    searchHelper: formHelper,
                                    search: function(inputModel, form, model, context) {
                                        var f = $filter('filter')(docRejectReasons, {"document_code": model.individualLoanDocuments[context.arrayIndex].document});
                                        return $q.resolve({
                                            "header": {
                                                "x-total-count": f && f.length
                                            },
                                            "body": f
                                        });
                                    },
                                    getListDisplayItem: function(item, index) {
                                        return [item.reject_reason];
                                    },
                                    onSelect: function(result, model, context) {
                                        model.individualLoanDocuments[context.arrayIndex].rejectReason = result.reject_reason;
                                    }
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-2",
                                "condition": "model.individualLoanDocuments[arrayIndex].documentStatus === 'REJECTED'",
                                "items": [{
                                    title: "Remarks",
                                    notitle: true,
                                    placeholder: "Remarks",
                                    key: "individualLoanDocuments[].remarks"
                                }]
                            }, {
                                "type": "section",
                                "htmlClass": "col-sm-5",
                                "condition": "model.individualLoanDocuments[arrayIndex].documentStatus !== 'REJECTED'",
                                "items": [{
                                    title: "Remarks",
                                    notitle: true,
                                    placeholder: "Remarks",
                                    key: "individualLoanDocuments[].remarks"
                                }]
                            }]
                        }]
                    }]
                }, {
                    "type": "actionbox",
                    "items": [{
                        "type": "submit",
                        "title": "Submit"
                    }]
                }
            ],
            schema: function() {
                return SchemaResource.getDisbursementSchema().$promise;
            },
            actions: {
                /*submit: function(model, form, formName){
                    var reqData = {
                        'loanAccount': _.cloneDeep(model.loanAccount),
                        'loanProcessAction': 'PROCEED'
                    };
                    var docStatuses = [];
                    var allowedStatues = ['APPROVED', 'REJECTED'];
                    var redirectToUploadFlag = false;
                    for (var i=0; i<reqData.individualLoanDocuments.length; i++){
                        var doc = reqData.individualLoanDocuments[i];
                        if (_.indexOf(allowedStatues, doc.documentStatus) == -1){
                            PageHelper.showProgress('update-loan', 'Invalid document status selected. Only Approved or Rejected are allowed.');
                            return;
                        }

                        if (doc.documentStatus == 'REJECTED'){
                            redirectToUploadFlag = true;
                        }
                    }

                    if (redirectToUploadFlag == true){
                        reqData['stage'] = 'DocumentUpload';
                    }

                    PageHelper.showProgress('update-loan', 'Working...');
                    PageHelper.showLoader();
                    console.log(JSON.stringify(reqData));
                    return IndividualLoan.update(reqData)
                        .$promise
                        .then(
                            function(res){
                                PageHelper.showProgress('update-loan', 'Done.', 2000);
                                $state.go('Page.Engine', {pageName: 'loans.individual.booking.PendingVerificationQueue'});
                                return;
                            }, function(httpRes){
                                PageHelper.showProgress('update-loan', 'Unable to proceed.', 2000);
                                PageHelper.showErrors(httpRes);
                            }
                        )
                        .finally(function(){
                            PageHelper.hideLoader();
                        })
                }*/
                submit: function(model, form, formName) {
                    if (window.confirm("Are you sure?")) {
                        PageHelper.showLoader();
                        var reqData = _.cloneDeep(model);
                        delete reqData.$promise;
                        delete reqData.$resolved;
                        delete reqData.loanAccount;
                        delete reqData._DocVerifyQueue;
                        reqData.disbursementProcessAction = "PROCEED";
                        var allowedStatues = ['APPROVED', 'REJECTED'];
                        var redirectToUploadFlag = false;
                        if (reqData.individualLoanDocuments && reqData.individualLoanDocuments.length > 0) {
                            for (var i = 0; i < reqData.individualLoanDocuments.length; i++) {
                                var doc = reqData.individualLoanDocuments[i];
                                if (_.indexOf(allowedStatues, doc.documentStatus) == -1) {
                                    PageHelper.showProgress('update-loan', 'Invalid document status selected. Only Approved or Rejected are allowed.');
                                    return;
                                }

                                if (doc.documentStatus == 'REJECTED') {
                                    redirectToUploadFlag = true;
                                }
                            }
                        }

                        if (redirectToUploadFlag == true) {
                            reqData['stage'] = 'DocumentUpload';
                        } else
                            reqData['stage'] = 'ReadyForDisbursement';

                        IndividualLoan.updateDisbursement(reqData, function(resp, header) {
                            PageHelper.showProgress("upd-disb", "Done.", "5000");
                            PageHelper.hideLoader();
                            $state.go('Page.Engine', {
                                pageName: 'loans.individual.disbursement.MultiTrancheQueue',
                                pageId: null
                            });
                        }, function(resp) {
                            PageHelper.showProgress("upd-disb", "Oops. An error occurred", "5000");
                            PageHelper.showErrors(resp);

                        }).$promise.finally(function() {
                            PageHelper.hideLoader();
                        });
                    }
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("loans.individual.disbursement.ReadyForDisbursementQueue"),
    ["$log", "formHelper", "$state", "SessionStore", "$q", "IndividualLoan","PageHelper","entityManager",
        function($log, formHelper,  $state, SessionStore, $q, IndividualLoan,PageHelper,entityManager){
            return {
                "type": "search-list",
                "title": "READY_FOR_DISBURSEMENT_QUEUE",
                "subTitle": "",
                initialize: function (model, form, formCtrl) {

                    model.branchName = SessionStore.getBranch();
                    model.stage = 'ReadyForDisbursement';
                    console.log(model);
                },
                offline: false,
                definition: {
                    title: "READYFORDISBURSEMENT",
                    autoSearch: true,
                    sorting:true,
                    sortByColumns:{
                        "customerSignatureDate":"Customer Signature Date",
                        "scheduledDisbursementDate":"Scheduled Disbursement Date"

                    },
                    searchForm: [
                        "*"
                    ],
                    searchSchema: {
                        "type": 'object',
                        "title": "VIEW_LOANS",
                        "required":[],
                        "properties": {

                            // "customerSignatureDate": {
                            //     "title": "CUSTOMER_SIGNATURE_DATE",
                            //     "type": "string",
                            //     "x-schema-form": {
                            //         "type": "date"

                            //     }
                            // },

                            "scheduledDisbursementDate": {
                                "title": "SCHEDULED_DISBURSEMENT_DATE",
                                "type": "string",
                                "x-schema-form": {
                                    "type": "date"
                                }
                            }

                        }
                    },
                    getSearchFormHelper: function() {
                        return formHelper;
                    },
                    getResultsPromise: function(searchOptions, pageOpts){
                        return IndividualLoan.searchDisbursement({
                            'currentStage': 'ReadyForDisbursement',
                            'customerSignatureDate': searchOptions.customerSignatureDate,
                            'scheduledDisbursementDate': searchOptions.scheduledDisbursementDate,
                            'page': pageOpts.pageNo,
                            'per_page': pageOpts.itemsPerPage,
                            'sortBy':searchOptions.sortBy

                        }).$promise;

                    },
                    paginationOptions: {
                        "viewMode": "page",
                        "getItemsPerPage": function(response, headers){
                            return 20;
                        },
                        "getTotalItemsCount": function(response, headers){
                            return headers['x-total-count']
                        }
                    },
                    listOptions: {
                        itemCallback: function(item, index) {
                            $log.info(item);
                        },
                        getItems: function(response, headers){
                            if (response!=null && response.length && response.length!=0){
                                return response;
                            }
                            return [];
                        },
                        getListItem: function(item){
                            return [
                                item.customerName + " ( Account #: "+item.accountNumber+")",
                                "<em>Disbursed Amount:  &#8377;"+(_.isEmpty(item.disbursedAmount)?0:item.disbursedAmount)+", Disbursement Amount :  &#8377;"+item.disbursementAmount+"</em>",
                                "Customer Signature Date  : " + (_.isEmpty(item.customerSignatureDate)?" NA ":item.customerSignatureDate)+", Scheduled Disbursement Date :"+(_.isEmpty(item.scheduledDisbursementDate)?" NA ":item.scheduledDisbursementDate)
                            ]
                        },
                        getActions: function(){
                            return [
                                {
                                    name: "Proceed to Disbursement",
                                    desc: "",
                                    fn: function(item, index){
                                        entityManager.setModel('loans.individual.disbursement.Disbursement', {_disbursement:item});
                                        $state.go("Page.Engine",{
                                            pageName:"loans.individual.disbursement.Disbursement",
                                            pageId:[item.loanId,item.id].join(".")
                                        });

                                      },
                                    isApplicable: function(item, index){
                                        return true;
                                    }
                                }
                            ];
                        }
                    }
                }
            };
        }]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.DisbursementConfirmationQueue"),
    ["$log", "formHelper", "$state", "SessionStore", "$q", "IndividualLoan","entityManager",
        function($log, formHelper, $state, SessionStore, $q, IndividualLoan,entityManager){
            return {
                "type": "search-list",
                "title": "DISBURSEMENT_CONFIRMATION_QUEUE",
                "subTitle": "",
                "uri":"Loan Disbursement/Ready",
                initialize: function (model, form, formCtrl) {

                    model.branchName = SessionStore.getBranch();
                    model.stage = 'DisbursementConfirmation';
                    console.log(model);
                },
                offline: false,
                definition: {
                    title: "ReadyForDisbursement",
                    autoSearch: true,
                    sorting:true,
                    sortByColumns:{
                        "customerSignatureDate":"Customer Signature Date",
                        "scheduledDisbursementDate":"Scheduled Disbursement Date"

                    },
                    searchForm: [
                        "*"
                    ],
                    searchSchema: {
                        "type": 'object',
                        "title": "VIEW_LOANS",
                        "required":[],
                        "properties": {

                            // "customerSignatureDate": {
                            //     "title": "CUSTOMER_SIGNATURE_DATE",
                            //     "type": "string",
                            //     "x-schema-form": {
                            //         "type": "date"

                            //     }
                            // },

                            "scheduledDisbursementDate": {
                                "title": "SCHEDULED_DISBURSEMENT_DATE",
                                "type": "string",
                                "x-schema-form": {
                                    "type": "date"
                                }
                            }

                        }
                    },
                    getSearchFormHelper: function() {
                        return formHelper;
                    },
                    getResultsPromise: function(searchOptions, pageOpts){
                        return IndividualLoan.searchDisbursement({
                            'currentStage': 'DisbursementConfirmation',
                            'customerSignatureDate': searchOptions.customerSignatureDate,
                            'scheduledDisbursementDate': searchOptions.scheduledDisbursementDate,
                            'page': pageOpts.pageNo,
                            'per_page': pageOpts.itemsPerPage,
                            'sortBy':searchOptions.sortBy

                        }).$promise;

                    },
                    paginationOptions: {
                        "viewMode": "page",
                        "getItemsPerPage": function(response, headers){
                            return 20;
                        },
                        "getTotalItemsCount": function(response, headers){
                            return headers['x-total-count']
                        }
                    },
                    listOptions: {
                        itemCallback: function(item, index) {
                            $log.info(item);

                        },
                        getItems: function(response, headers){
                            if (response!=null && response.length && response.length!=0){
                                return response;
                            }
                            return [];
                        },
                        getListItem: function(item){
                            return [
                                item.customerName + " ( Account #: "+item.accountNumber+")",
                                "<em>Disbursed Amount:  &#8377;"+(_.isEmpty(item.disbursedAmount)?0:item.disbursedAmount)+", Disbursement Amount :  &#8377;"+item.disbursementAmount+"</em>",
                                "Customer Signature Date  : " + (_.isEmpty(item.customerSignatureDate)?" NA ":item.customerSignatureDate)+", Scheduled Disbursement Date :"+(_.isEmpty(item.scheduledDisbursementDate)?" NA ":item.scheduledDisbursementDate)
                            ]
                        },
                        getActions: function(){
                            return [
                                {
                                    name: "Confirm Disbursement",
                                    desc: "",
                                    fn: function(item, index){
                                        entityManager.setModel('loans.individual.disbursement.DisbursementConfirmation', {_disbursementConfirmation:item});
                                        $state.go("Page.Engine",{
                                            pageName:"loans.individual.disbursement.DisbursementConfirmation",
                                            pageId:[item.loanId,item.id].join(".")
                                        });


                                    },
                                    isApplicable: function(item, index){
                                        return true;
                                    }
                                }
                            ];
                        }
                    }
                }
            };
        }]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.Disbursement"),
    ["$log", "Enrollment", "SessionStore","$state", "$stateParams", "PageHelper", "IndividualLoan", "SchemaResource", "Utils","LoanAccount","formHelper","Queries","LoanAccount",
        function($log, Enrollment, SessionStore,$state,$stateParams, PageHelper, IndividualLoan, SchemaResource, Utils,LoanAccount,formHelper,Queries,LoanAccount){

        var branch = SessionStore.getBranch();
        var backToQueue = function(){
            $state.go("Page.Engine",{
                pageName:"loans.individual.disbursement.ReadyForDisbursementQueue",
                pageId:null
            });
        };
        return {
            "type": "schema-form",
            "title": "DISBURSE_LOAN",
            "subTitle": "",
            initialize: function (model, form, formCtrl) {
                $log.info("Disbursement Page got initialized");

                model.additional = {"branchName":branch};
                try {
                    var loanId = ($stateParams['pageId'].split('.'))[0];
                    var disbursementId = ($stateParams['pageId'].split('.'))[1];
                    $log.info("loanId ::" + loanId);
                    PageHelper.showLoader();
                    PageHelper.showProgress('loan-fetch', 'Fetching Loan Details');
                    IndividualLoan.getDisbursementList({"loanIdlist":loanId}, function (resp, head) {
                        model.additional.accountNumber = resp[0].accountId;
                        model.additional.customerId = resp[0].customerId;
                        model.additional.numberOfDisbursements = resp[0].numDisbursements;
                        model.additional.productCode = resp[0].productCode;
                        model.additional.urnNo = resp[0].urnNo;
                        model.additional.fees=[];
                        model.additional.tempfees = resp[0].fees;
                        model.additional.netDisbursementAmount = Number(resp[0].netDisbursementAmount);
                        var j=1;
                        if(model.additional.tempfees){
                            for (var i=0;i<model.additional.tempfees.length; i++) {
                                if(model.additional.tempfees[i].amount1 != "0")
                                    model.additional.fees.push(model.additional.tempfees[i]);
                            }
                        }
                        model.loanAccountDisbursementSchedule = model.loanAccountDisbursementSchedule || {};
                        if (!model._disbursement) {
                            $log.info("Page visited directly");
                            $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.ReadyForDisbursementQueue', pageId: null});
                        } else {
                            model.loanAccountDisbursementSchedule=model._disbursement;
                            $log.info("Printing the loanAccountDisbursementSchedule");
                            $log.info(model.loanAccountDisbursementSchedule);
                        }

                        model.loanAccountDisbursementSchedule.modeOfDisbursement = "CASH";
                        model.loanAccountDisbursementSchedule.disbursementAmount = Number(resp[0].amount);
                        model.loanAccountDisbursementSchedule.udf2= model.loanAccountDisbursementSchedule.udf2 || '';
                        model.loanAccountDisbursementSchedule.udf3= model.loanAccountDisbursementSchedule.udf3 || '';

                    },
                    function (resp) {
                        PageHelper.showProgress('loan-fetch', 'Oops. An Error Occurred', 5000);
                        PageHelper.showErrors(resp);


                    }).$promise.finally(function () {
                        PageHelper.hideLoader();
                    });
                }
                catch(err){
                    console.error(err);
                    PageHelper.showProgress('loan-fetch', 'Oops. An Error Occurred', 5000);
                }


            },
            offline: false,
            getOfflineDisplayItem: function(item, index){

            },
            form: [{
                "type": "box",
                "title": "DISBURSEMENT_DETAILS", // sample label code
                //"readonly": false, // default-false, optional, this & everything under items becomes readonly
                "items": [
                    {
                        "key": "additional.accountNumber",
                        "title":"ACCOUNT_NUMBER",
                        "readonly":true
                    },
                    /*{
                        "key": "loanAccountDisbursementSchedule.disbursementAmount",
                        "title":"DISBURSEMENT_AMOUNT",
                        "type":"amount",
                        "readonly":true
                    },*/
                    {
                        "key": "additional.netDisbursementAmount",
                        "title":"NET_DISBURSEMENT_AMOUNT",
                        "type":"amount",
                        "readonly":true
                    },
                    {
                        "key": "loanAccountDisbursementSchedule.modeOfDisbursement",
                        "title": "MODE_OF_DISBURSEMENT",
                        "type": "select",
                        "titleMap": [{
                            value: "CASH",
                            name: "CASH"
                        },{
                            value: "NEFT",
                            name: "NEFT"
                        },{
                            value: "RTGS",
                            name: "RTGS"
                        },{
                            value: "CHEQUE",
                            name: "CHEQUE"
                        }]
                    },
                    {
                        "key": "loanAccountDisbursementSchedule.referenceDate",
                        "title": "DATE",
                        "type":"date",
                        "condition":"model.loanAccountDisbursementSchedule.modeOfDisbursement!='CASH'"
                    },
                    {
                        "key": "loanAccountDisbursementSchedule.referenceNumber",
                        "title": "REFERENCE_NO",
                        "condition":"model.loanAccountDisbursementSchedule.modeOfDisbursement!='CASH'"
                    },
                    {
                        key: "loanAccountDisbursementSchedule.disbursementFromBankAccountNumber",
                        type: "lov",
                        autolov: true,
                        title:"DISBURSEMENT_FROM_ACCOUNT",
                        bindMap: {

                        },
                        outputMap: {
                            "account_number": "loanAccountDisbursementSchedule.disbursementFromBankAccountNumber"
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form, model) {
                            return Queries.getBankAccounts();
                        },
                        getListDisplayItem: function(item, index) {
                            return [
                                item.account_number,
                                item.ifsc_code + ', ' + item.bank_name,
                                item.branch_name
                            ];
                        }
                    },
                    {
                        "key": "loanAccountDisbursementSchedule.customerAccountNumber",
                        "title": "CUSTOMER_BANK_ACC_NO",
                        "readonly":true
                    },
                    {
                        "key": "loanAccountDisbursementSchedule.ifscCode",
                        "title": "CUSTOMER_BANK_IFSC",
                        "readonly":true
                    },
                    {
                        "key": "loanAccountDisbursementSchedule.customerBankBranchName",
                        "title":"BRANCH_NAME",
                        readonly:true
                    },
                    {
                        "type":"actions",
                        "items":[
                            {
                                "type": "button",
                                "title": "BACK",
                                "onClick": "actions.goBack(model, formCtrl, form, $event)"
                            },
                            {
                                "type":"button",
                                "title":"DISBURSE",
                                "icon":"fa fa-money",
                                "onClick":"actions.disburseLoan(model,formCtrl,form)"
                            }/*,
                            {
                                "type":"button",
                                "title":"REJECT",
                                "onClick":"actions.rejectLoan(model,formCtrl,form)"
                            }*/
                        ]
                    }
                ]
            }],
            schema: function() {
                //return SchemaResource.getLoanAccountSchema().$promise;
                return SchemaResource.getDisbursementSchema().$promise;
            },
            actions: {
                goBack: function (model, formCtrl, form, $event) {
                    backToQueue();
                },
                disburseLoan:function(model, formCtrl, form){
                    formCtrl.scope.$broadcast("schemaFormValidate");
                    if(!formCtrl.$valid){
                        PageHelper.showProgress('disbursement', "Errors found in the form. Please fix to continue",3000);
                        return;
                    }
                    if(model.loanAccountDisbursementSchedule.udf2 || model.loanAccountDisbursementSchedule.udf3){
                        PageHelper.showProgress('disbursement', "Reject reason and reject remarks are not applicable during disbursement",3000);
                        return;
                    }

                    if(window.confirm("Perform Disbursement?")){

                        PageHelper.showLoader();
                        var accountNumber = model.additional.accountNumber;
                        var accountId = model.loanAccountDisbursementSchedule.loanId;
                        model.loanAccountDisbursementSchedule.udf1 = "Sent to Bank";
                        PageHelper.showProgress('disbursement', 'Disbursing ' + accountId + '. Please wait.');

                        LoanAccount.activateLoan({"accountId": accountNumber},
                            function(data){
                                $log.info("Inside success of activateLoan");
                                var currDate = moment(new Date()).format("YYYY-MM-DD");
                                model.loanAccountDisbursementSchedule.accountNumber = accountNumber;

                                var reqUpdateDisbData = _.cloneDeep(model);
                                delete reqUpdateDisbData.$promise;
                                delete reqUpdateDisbData.$resolved;
                                delete reqUpdateDisbData._disbursement;
                                delete reqUpdateDisbData.additional;
                                delete reqUpdateDisbData.arrayIndex;
                                reqUpdateDisbData.disbursementProcessAction = "SAVE";
                                IndividualLoan.updateDisbursement(reqUpdateDisbData,function(resp,header){
                                    var toSendData = [];
                                    toSendData.push(model.loanAccountDisbursementSchedule);
                                    var reqData = {};
                                    reqData.stage = "DisbursementConfirmation";
                                    reqData.loanAccountDisbursementSchedules = toSendData;
                                    $log.info(reqData);

                                    IndividualLoan.batchDisburse(reqData,
                                        function(data){
                                            PageHelper.showProgress('disbursement', 'Disbursement done', 2000);
                                            model.additional.disbursementDone=true;
                                            PageHelper.hideLoader();
                                            $state.go('Page.Engine', {pageName: 'loans.individual.disbursement.ReadyForDisbursementQueue', pageId: null});

                                        },
                                        function(res){
                                            PageHelper.showErrors(res);
                                            PageHelper.showProgress('disbursement', 'Disbursement failed', 2000);
                                        }).$promise.finally(function() {
                                            PageHelper.hideLoader();
                                        }
                                    );
                                },function(resp){
                                    PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                                    PageHelper.showErrors(resp);

                                }).$promise.finally(function(){
                                    PageHelper.hideLoader();
                                });
                            },
                            function(res){
                                PageHelper.hideLoader();
                                PageHelper.showErrors(res);
                                PageHelper.showProgress('disbursement', 'Error while activating loan.', 2000);
                            });

                    }

                },
                /*rejectLoan:function(model, formCtrl, form){
                    formCtrl.scope.$broadcast("schemaFormValidate");
                    if(!formCtrl.$valid){
                        PageHelper.showProgress('disbursement', "Errors found in the form. Please fix to continue",3000);
                        return;
                    }
                    if(!model.loanAccountDisbursementSchedule.udf2){
                        PageHelper.showProgress('disbursement', "Reject reason is required for rejection",3000);
                        return;
                    }

                    if(window.confirm("Are you sure to reject the loan disbursement?")){

                        PageHelper.showLoader();
                        var accountNumber = model.additional.accountNumber;
                        var accountId = model.loanAccountDisbursementSchedule.loanId;
                        model.loanAccountDisbursementSchedule.udf1 = "Rejected";
                        PageHelper.showProgress('disbursement', 'Disbursing ' + accountId + '. Please wait.');
                        var reqloanAccountDisbursementSchedule = _.cloneDeep(model.loanAccountDisbursementSchedule);

                        var reqData = {};
                        reqData.disbursementProcessAction = "PROCEED";
                        reqData.stage = "RejectedDisbursement";
                        reqData.loanAccountDisbursementSchedule = reqloanAccountDisbursementSchedule;
                        IndividualLoan.updateDisbursement(reqData,function(resp,header){
                            PageHelper.showProgress("upd-disb","Done.","5000");
                            backToQueue();
                        },function(resp){
                            PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                            PageHelper.showErrors(resp);

                        }).$promise.finally(function(){
                            PageHelper.hideLoader();
                        });

                    }

                },*/
                submit: function(model, form, formName){
                    if(window.confirm("Are you sure?")){
                        PageHelper.showLoader();
                        var reqData = _.cloneDeep(model);
                        reqData.disbursementProcessAction = "SAVE";
                        model.loanAccountDisbursementSchedule.udf1 = "";
                        reqData.stage = "DisbursementConfirmation";
                        IndividualLoan.updateDisbursement(reqData,function(resp,header){

                            reqData = _.cloneDeep(resp);
                            delete reqData.$promise;
                            delete reqData.$resolved;
                            reqData.disbursementProcessAction = "PROCEED";
                            reqData.stage = "DisbursementConfirmation";
                            IndividualLoan.updateDisbursement(reqData,function(resp,header){
                                PageHelper.showProgress("upd-disb","Done.","5000");
                                backToQueue();
                            },function(resp){
                                PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                                PageHelper.showErrors(resp);

                            }).$promise.finally(function(){
                                PageHelper.hideLoader();
                            });

                        },function(resp){
                            PageHelper.showErrors(resp);
                            PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                            PageHelper.hideLoader();
                        });
                    }
                }
            }
        };
    }]);

irf.pageCollection.factory(irf.page("loans.individual.disbursement.DisbursementConfirmation"),
    ["$log", "Enrollment", "SessionStore","$state", "$stateParams", "PageHelper", "IndividualLoan", "SchemaResource","Utils",
        function($log, Enrollment, SessionStore,$state,$stateParams, PageHelper, IndividualLoan, SchemaResource,Utils){

        var branch = SessionStore.getBranch();
        var backToQueue = function(){
            $state.go("Page.Engine",{
                pageName:"loans.individual.disbursement.DisbursementConfirmationQueue",
                pageId:null
            });
        };

        return {
            "type": "schema-form",
            "title": "DISBURSEMENT_CONFIRMATION",
            "subTitle": "",
            initialize: function (model, form, formCtrl) {
                try {
                    var loanId = ($stateParams['pageId'].split('.'))[0];
                    var disbursementId = ($stateParams['pageId'].split('.'))[1];
                    PageHelper.showLoader();
                    PageHelper.showProgress('loan-fetch', 'Fetching Loan Details');

                    if (!model._disbursementConfirmation) {
                        $log.info("Page visited directly");
                        backToQueue();
                    }
                    IndividualLoan.get({id: loanId}, function (resp, head) {

                        var disbExistFlag = false;
                        for (var i=0;i<resp.disbursementSchedules.length;i++) {
                            var disbSchedule = resp.disbursementSchedules[i];
                            console.log(disbSchedule);
                            if (disbSchedule.id == disbursementId) {
                                model.loanAccountDisbursementSchedule = disbSchedule;
                                Utils.removeNulls(model,true);
                                disbExistFlag = true;
                                break;
                            }
                        }
                        if(!disbExistFlag){
                            PageHelper.showProgress('loan-fetch', 'Failed to load Disbursement', 5000);
                        }
                        else{
                            PageHelper.showProgress('loan-fetch', 'Done.', 5000);
                        }
                        console.log(model);

                    },
                    function (resp) {
                        PageHelper.showProgress('loan-fetch', 'Oops. An Error Occurred', 5000);
                        PageHelper.showErrors(resp);

                    }).$promise.finally(function () {
                        PageHelper.hideLoader();
                    });
                }
                catch(err){
                    console.error(err);
                    PageHelper.showProgress('loan-fetch', 'Oops. An Error Occurred', 5000);
                }
            },
            offline: false,
            getOfflineDisplayItem: function(item, index){

            },
            form: [{
                "type": "box",
                "title": "DISBURSEMENT_DETAILS",
                "colClass": "col-sm-8",
                "items": [

                    {
                        "key":"loanAccountDisbursementSchedule.udf1",
                        "type": "radios",
                        "titleMap":[{
                                "name":"Confirmed",
                                "value":"Confirmed"
                                },
                                {
                                "name":"Rejected",
                                "value":"Rejected"
                                }
                        ]
                    },
                    {
                        "key":"loanAccountDisbursementSchedule.actualDisbursementDate",
                        "type":"date",
                        "title":"ACTUAL_DISBURSEMENT_DATE",
                        "readonly":true
                    },
                    {
                        "key":"loanAccountDisbursementSchedule.udf5",
                        "title":"FINANCE_TEAM_REJECTION_REASON",
                        "type": "select",
                        "condition":"model.loanAccountDisbursementSchedule.udf1=='Rejected'"
                    },
                    {
                        "key":"loanAccountDisbursementSchedule.udf4",
                        "title":"FINANCE_TEAM_REJECTION_REMARKS",
                        "condition":"model.loanAccountDisbursementSchedule.udf1=='Rejected'"
                    },
                    {
                        "type": "actionbox",
                        "items": [{
                            "type": "submit",
                            "title": "Update"
                        }]
                    }
                ]
            }],
            schema: function() {
                return SchemaResource.getDisbursementSchema().$promise;
            },
            actions: {

                submit: function(model, form, formName){
                    if(window.confirm("Are you sure?")){
                        PageHelper.showLoader();
                        var reqData = _.cloneDeep(model);
                        delete reqData.$promise;
                        delete reqData.$resolved;
                        if(reqData.loanAccountDisbursementSchedule.udf1 == "Rejected"){
                            reqData.disbursementConfirmations =[];
                            var targetStage;
                            if (model.loanAccountDisbursementSchedule.udf5 == 'Internal issue - Wrong bank selection')
                                targetStage = 'ReadyForDisbursement';
                            else
                                targetStage = 'RejectedDisbursement';
                            reqData.disbursementConfirmations.push({
                                                accountNumber: model._disbursementConfirmation.accountNumber,
                                                stage: targetStage,
                                                status: "REJECT",
                                                tranchNumber:model._disbursementConfirmation.trancheNumber,
                                                transactionId: model._disbursementConfirmation.transactionId,
                                                udf1:model.loanAccountDisbursementSchedule.udf1,
                                                udf4:model.loanAccountDisbursementSchedule.udf4,
                                                udf5:model.loanAccountDisbursementSchedule.udf5
                                            });
                            delete reqData._disbursementConfirmation;
                            delete reqData.loanAccountDisbursementSchedule;
                            IndividualLoan.batchDisbursementConfirmation(reqData,function(resp,header){
                                PageHelper.showProgress("upd-disb","Done.","5000");
                                backToQueue();
                            },function(resp){
                                PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                                PageHelper.showErrors(resp);

                            }).$promise.finally(function(){
                                PageHelper.hideLoader();
                            });
                        }
                        else{
                            reqData.loanAccountDisbursementSchedule.udf4 = "";
                            reqData.loanAccountDisbursementSchedule.udf5 = "";
                            reqData.loanAccountDisbursementSchedule.udfDate1 = "";
                            reqData.disbursementProcessAction = "PROCEED";

                            IndividualLoan.updateDisbursement(reqData,function(resp,header){
                                PageHelper.showProgress("upd-disb","Done.","5000");
                                backToQueue();
                            },function(resp){
                                PageHelper.showProgress("upd-disb","Oops. An error occurred","5000");
                                PageHelper.showErrors(resp);

                            }).$promise.finally(function(){
                                PageHelper.hideLoader();
                            });
                        }
                        
                    }
                }
            }
        };
    }]);

irf.pageCollection.factory(irf.page("loans.individual.collections.BouncePromiseQueue"),
["$log", "entityManager", "formHelper", "LoanProcess", "$state", "SessionStore", "$q","Utils",
function($log, entityManager, formHelper, LoanProcess, $state, SessionStore,$q,Utils){
    return {
        "type": "search-list",
        "title": "BOUNCED_PAYMENTS",
        //"subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranchId();
        },
        definition: {
            title: "SEARCH_BOUNCED_PAYMENTS",
            searchForm: [
                "*"
            ],
            autoSearch:false,
            searchSchema: {
                "type": 'object',
                "required":["branch"],
                "properties": {
                    "loan_no": {
                        "title": "LOAN_ACCOUNT_NUMBER",
                        "type": "string",
                        "pattern": "^[0-9a-zA-Z]+$"
                    },
                    "first_name": {
                        "title": "CUSTOMER_NAME",
                        "type": "string"
                    },
                    /*"kyc_no": {
                        "title": "KYC_NO",
                        "type": "string"
                    },
                    "branch": {
                        "title": "BRANCH_NAME",
                        "type": "string",
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },*/
                    "centre": {
                        "title": "CENTRE",
                        "type": "integer",
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "filter": {
                                "parentCode as branch": "model.branch"
                            }
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = LoanProcess.bounceCollectionDemand({
                    'accountNumbers': searchOptions.loan_no,  /*Service missing_27082016*/
                    'branchId': searchOptions.branch,
                    'centreId': searchOptions.centre,
                    'customerName': searchOptions.first_name,
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "getItemsPerPage": function(response, headers){
                    return 10;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers && headers['x-total-count'] || 10;
                }
            },
            listOptions: {
                expandable: true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName,

                        "{{'LOAN_ACCOUNT_NUMBER'|translate}} : " +  item.accountId,  /*Service missing_27082016*/
                        // "{{'BANK'|translate}} : " + item.bankName,
                        // "{{'BRANCH_ID'|translate}} : " + item.branchName,
                        "{{'AMOUNT_DUE'|translate}} : " + Utils.ceil(item.amount1),
                        "{{'PRINCIPAL'|translate}} : " + item.part1,
                        "{{'INTEREST'|translate}} : " + item.part2,
                        "{{'PENAL_INTEREST'|translate}} : " + item.part3,
                        "{{'CHARGES'|translate}} : " + item.part4,
                        "{{'FEES'|translate}} : " + item.amount2,
                        "{{'NUMBER_OF_DUES'|translate}} : " + item.numberOfDues
                        //"{{'CENTRE_CODE'|translate}} : " + item.centre,
                        //"{{'CUSTOMER_AVAILABLE'|translate }} : " + item.customerAvailable,
                        //"{{'CUSTOMER_CATEGORY_LOAN_OFFICER'|translate}} : " + item.customerCategoryLoanOfficer,
                        //"{{'OVERDUE_REASONS'|translate}} : " + item.overdueReasons,
                        //"{{'PROMISETOPAY_DATE'|translate}} : " + item.promiseToPayDate

                    ]
                },
                getActions: function(){
                    return [
                        /*{
                            name: "COLLECT_PAYMENT",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.collections.CollectPayment', {_bounce:item});
                               $state.go('Page.Engine', {pageName: 'loans.individual.collections.CollectPayment', pageId: item.loanacno});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return false;
                            }
                        },*/
                        {
                            name: "COLLECT_PAYMENT",
                            desc: "",
                            fn: function(item, index){
                                entityManager.setModel('loans.LoanRepay', {_bounce:item,_screen:"BounceQueue"});
                                $state.go('Page.Engine',
                                    {
                                        pageName: 'loans.LoanRepay',
                                        pageId: item.accountId,
                                        pageData: {
                                            'onlyDemandAllowed': true
                                        }
                                    }
                                );
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        },{
                            name: "COLLECTION_STATUS",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.collections.P2PUpdate', {_bounce:item,_screen:"BouncePromiseQueue"});
                                $state.go('Page.Engine', {pageName: 'loans.individual.collections.P2PUpdate', pageId: item.accountId});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.collections.BounceRecoveryQueue"),
["$log", "entityManager","formHelper", "LoanProcess", "$state", "SessionStore", "$q","Utils",
function($log, entityManager, formHelper, LoanProcess, $state, SessionStore,$q,Utils){
    return {
        "type": "search-list",
        "title": "BOUNCED_PAYMENTS",
        //"subTitle": "T_ENROLLMENTS_PENDING",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranchId();
        },
        /*offline: true,
        getOfflineDisplayItem: function(item, index){
            return [
                "Branch: " + item["branch"],
                "Centre: " + item["centre"]
            ]
        },
        getOfflinePromise: function(searchOptions){      \* Should return the Promise *\
            var promise = Enrollment.search({
                'branchName': searchOptions.branch,
                'centreCode': searchOptions.centre,
                'firstName': searchOptions.first_name,
                'lastName': searchOptions.last_name,
                'page': 1,
                'per_page': 100,
                'stage': "Stage02"
            }).$promise;

            return promise;
        },*/
        definition: {
            title: "SEARCH_BOUNCED_PAYMENTS",
            searchForm: [
                "*"
            ],
            autoSearch:false,
            searchSchema: {
                "type": 'object',
                "required":["branch"],
                "properties": {
                    "loan_no": {
                        "title": "LOAN_ACCOUNT_NUMBER",
                        "type": "string",
                        "pattern": "^[0-9a-zA-Z]+$"
                    },
                    "first_name": {
                        "title": "CUSTOMER_NAME",
                        "type": "string"
                    },
                    /*"kyc_no": {
                        "title": "KYC_NO",
                        "type": "string"
                    },
                    "branch": {
                        "title": "BRANCH_NAME",
                        "type": "string",
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },*/
                    "centre": {
                        "title": "CENTRE",
                        "type": "integer",
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "filter": {
                                "parentCode as branch": "model.branch"
                            }
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = LoanProcess.p2pKGFSList({
                    'accountNumber': searchOptions.loan_no,  /*Service missing_27082016*/
                    'branchId': searchOptions.branchId,
                    'centreCode': searchOptions.centre,
                    'customerName': searchOptions.first_name,
                    'customerCategoryHubManager':'C,D',
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "getItemsPerPage": function(response, headers){
                    return 10;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers && headers['x-total-count'] || 10;
                }
            },
            listOptions: {
                expandable: true,
                /*itemCallback: function(item, index) {
                    $log.info(item);
                    $log.info("Redirecting");
                    $state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
                },*/
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                       item.customerName,
                        // "{{'APPLICANT'|translate}}: " + item.applicant,
                        // "{{'CO_APPLICANT'|translate}}: " + item.coApplicant,
                        "{{'LOAN_ACCOUNT_NUMBER'|translate}}: " + (item.accountNumber||'-'), /*Service is missing*/
                        "{{'AMOUNT_DUE'|translate}}: " + (Utils.ceil(item.amount1) ||'-'), /*amount1 is TotalDemandDue*/
                        "{{'PRINCIPAL'|translate}} : " + item.part1,
                        "{{'INTEREST'|translate}} : " + item.part2,
                        "{{'PENAL_INTEREST'|translate}} : " + item.part3,
                        "{{'CHARGES'|translate}} : " + item.part4,
                        "{{'FEES'|translate}} : " + item.amount2,
                        "{{'NUMBER_OF_DUES'|translate}} : " + item.numberOfDues
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "COLLECT_PAYMENT",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.collections.CollectPayment', {_bounce:item,_screen:"BounceRecoveryQueue"});
                                $state.go('Page.Engine', {pageName: 'loans.LoanRepay', pageId: item.accountNumber});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        },
                        {
                            name: "COLLECTION_STATUS",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.collections.P2PUpdate', {_bounce:item,_screen:"BounceRecoveryQueue"});
                                $state.go('Page.Engine', {pageName: 'loans.individual.collections.P2PUpdate', pageId: item.accountNumber});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.collections.BounceQueue"),
["$log", "formHelper", "LoanProcess", "$state", "SessionStore", "$q", "entityManager", "Utils",
function($log, formHelper, LoanProcess, $state, SessionStore,$q, entityManager, Utils){
    return {
        "type": "search-list",
        "title": "BOUNCED_PAYMENTS",
        //"subTitle": "T_ENROLLMENTS_PENDING",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branchId = SessionStore.getBranchId();
        },
        /*offline: true,
        getOfflineDisplayItem: function(item, index){
            return [
                "Branch: " + item["branch"],
                "Centre: " + item["centre"]
            ]
        },
        getOfflinePromise: function(searchOptions){      \* Should return the Promise *\
            var promise = Enrollment.search({
                'branchName': searchOptions.branch,
                'centreCode': searchOptions.centre,
                'firstName': searchOptions.first_name,
                'lastName': searchOptions.last_name,
                'page': 1,
                'per_page': 100,
                'stage': "Stage02"
            }).$promise;

            return promise;
        },*/
        definition: {
            title: "SEARCH_BOUNCED_PAYMENTS",
            autoSearch: true,
            sorting:true,
            sortByColumns:{
                "name":"Customer Name",
                "centre_name":"Centre",
                "sanction_date":"Sanction Date"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
               // "required":["branch"],
                "properties": {
                    "loan_no": {
                        "title": "LOAN_ACCOUNT_NUMBER",
                        "type": "string",
                        "pattern": "^[0-9a-zA-Z]+$"
                    },
                    "first_name": {
                        "title": "CUSTOMER_NAME",
                        "type": "string"
                    },
                    /*"kyc_no": {
                        "title": "KYC_NO",
                        "type": "string"
                    },*/
                    // "branchId": {
                    //     "title": "BRANCH_NAME",
                    //     "type": ["null","number"],
                    //     "enumCode": "branch_id",
                    //     "x-schema-form": {
                    //         "type": "select"
                    //     }
                    // },
                    "centre": {
                        "title": "CENTRE",
                        "type": ["null", "number"],
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            // "parentEnumCode": "branch",
                            "parentValueExpr": "model.branchId"
                        }
                    },
                    "promisreToPayDate":{
                        "title": "PROMISE_TO_PAY_DATE",
                        "type": "string",
                        "x-schema-form": {
                            "type": "date"
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = LoanProcess.bounceCollectionDemand({
                    'accountNumbers': searchOptions.loan_no,  /*Service missing_27082016*/
                    'branchId': searchOptions.branchId || SessionStore.getBranchId(),
                    'centreId': searchOptions.centre,
                    'customerName': searchOptions.first_name,
                    'promisreToPayDate': searchOptions.promisreToPayDate,
                    'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "getItemsPerPage": function(response, headers){
                    return 10;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers && headers['x-total-count'] || 10;
                }
            },
            listOptions: {
                expandable: true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName,
                        // "{{'APPLICANT'|translate}}: " + item.applicant,
                        // "{{'CO_APPLICANT'|translate}}: " + item.coApplicant,
                        "{{'LOAN_ACCOUNT_NUMBER'|translate}}: " + item.accountId, /*Service is missing*/
                        "{{'TOTAL_AMOUNT_DUE'|translate}}: " + Utils.ceil(item.amount1), /*amount1 is TotalDemandDue*/
                        "{{'PRINCIPAL_DUE'|translate}}: " + item.part1,          /*Service is missing*/
                        "{{'INTEREST_DUE'|translate}}: " + item.part2,              /*Service is missing*/
                        "{{'PENAL_INTEREST'|translate}}: " + item.part3,   /*Service is missing*/
                        "{{'CHARGES'|translate}}: " + (item.part4||'-'),                /*Service is missing*/
                        "{{'FEES'|translate}}: " + item.amount2,                 /*amountt2 is TotalFeeDue*/
                       /* "{{'NUMBER_OF_DUES'|translate}}: " + item.numberOfDues   */  /*Service is missing*/
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "COLLECT_PAYMENT",
                            desc: "",
                            fn: function(item, index){
                                entityManager.setModel('loans.LoanRepay', {_bounce:item,_screen:"BounceQueue"});
                                $state.go('Page.Engine',
                                    {
                                        pageName: 'loans.LoanRepay',
                                        pageId: item.accountId,
                                        pageData: {
                                            'onlyDemandAllowed': true
                                        }
                                    }
                                );
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        },
                        {
                            name: "COLLECTION_STATUS",
                            desc: "",
                            fn: function(item, index){
                                entityManager.setModel('loans.individual.collections.P2PUpdate', {_bounce:item,_screen:"BounceQueue"});
                                $state.go('Page.Engine', {pageName: 'loans.individual.collections.P2PUpdate', pageId: item.accountId});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.collections.CreditValidation"), ["$log", "$q", 'Pages_ManagementHelper', 'LoanProcess', 'LoanAccount', 'PageHelper', 'formHelper', 'irfProgressMessage',
    'SessionStore', "$state", "$stateParams", "Masters", "authService", "Utils", "Queries",
    function ($log, $q, ManagementHelper, LoanProcess, LoanAccount, PageHelper, formHelper, irfProgressMessage,
              SessionStore, $state, $stateParams, Masters, authService, Utils, Queries) {

        return {
            "type": "schema-form",
            "title": "PAYMENT_DETAILS_FOR_LOAN",
            initialize: function (model, form, formCtrl) {
                $log.info("Credit Validation Page got initialized");

                //PageHelper.showLoader();
                irfProgressMessage.pop('loading-Credit validation-details', 'Loading Credit validation Details');
                //PageHelper
                var loanAccountNo = $stateParams.pageId;
                var promise = LoanAccount.get({
                    accountId: loanAccountNo
                }).$promise;
                promise.then(
                    function (data) { /* SUCCESS */
                        model.loanAccount = data;
                        Queries.getLoanCustomerRelations({accountNumber: loanAccountNo})
                            .then(
                                function(response){
                                    model.loanCustomerRelations = response;
                                }, function(httpRes){

                                }
                            )

                        model.creditValidation = model.creditValidation || {};
                        model.creditValidation.enterprise_name = data.customer1FirstName;
                        model.creditValidation.productCode = data.productCode;
                        model.creditValidation.urnNo = data.customerId1;
                        model.creditValidation.instrument = 'CASH_IN';
                        model.creditValidation.authorizationUsing = 'Testing-Swapnil';
                        model.creditValidation.remarks = 'collections';
                        model.creditValidation.accountNumber = data.accountId;
                        model.creditValidation.amountDue = model._credit.demandAmountInPaisa/100;
                        model.creditValidation.principal = data.totalPrincipalDue;
                        model.creditValidation.interest = data.totalNormalInterestDue;
                        model.creditValidation.applicant_name = data.applicant;
                        model.creditValidation.applicant_name = data.coapplicant;
                        model.creditValidation.penal_interest = data.totalPenalInterestDue;
                        model.creditValidation.fee = data.totalFeeDue;
                        model.creditValidation.loanRepaymentDetailsId = model._credit.id;
                        model.creditValidation.reference = model._credit.reference;
                        model.creditValidation.instrument = data.instrument;
                        model.creditValidation.isCoApplicantarray = false;
                        model.creditValidation.amountCollected = model._credit.repaymentAmountInPaisa / 100;
                        //model.creditValidation.statusValue = 1 for fully paid, 2 for partially paid
                        if (Utils.ceil(model.creditValidation.amountDue) == model.creditValidation.amountCollected) {
                            model.creditValidation.status = "Fully Paid";
                            model.creditValidation.statusValue = 1;

                        } else {
                            model.creditValidation.status = "Partially Paid";
                            model.creditValidation.statusValue = 2;
                        }


                        Queries.getCustomerBasicDetails({
                            urns: [data.customerId1]
                        }).then(
                            function (resQuery) {
                                model.creditValidation.applicant_name = resQuery.urns[data.customerId1].first_name;
                            },
                            function (errQuery) {
                            }
                        );

                        irfProgressMessage.pop('loading-loan-details', 'Loaded.', 2000);
                    }, function (resData) {
                        irfProgressMessage.pop('loading-loan-details', 'Error loading Loan details.', 4000);
                        PageHelper.showErrors(resData);
                        backToLoansList();
                    })
                    .finally(function () {
                        PageHelper.hideLoader();
                    })
            },

            form: [{
                "type": "box",
                "title": "Payment",
                "items": [{
                    key: "creditValidation.instrument",
                    title: "REPAYMENT_MODE",
                    readonly: true,
                    //type:"amount"
                }, {
                    key: "creditValidation.reference",
                    title: "REFERENCE_NUMBER",
                    readonly: true,
                    //type:"amount"
                }, {
                    key: "creditValidation.principal",
                    title: "PRINCIPAL",
                    readonly: true,
                    type: "amount"
                }, {
                    key: "creditValidation.interest",
                    title: "INTEREST",
                    readonly: true,
                    type: "amount"
                }, {
                    key: "creditValidation.penal_interest",
                    title: "PENAL_INTEREST",
                    readonly: true,
                    type: "amount"
                }, {
                    key: "creditValidation.fee",
                    title: "FEES_AND_OTHER_CHARGES",
                    readonly: true,
                    type: "amount"
                }, {
                    key: "creditValidation.amountDue",
                    title: "TOTAL_AMOUNT_DUE",
                    readonly: true,
                    type: "amount"
                }, {
                    key: "creditValidation.amountCollected",
                    title: "AMOUNT_COLLECTED",
                    readonly: true,
                    type: "amount"
                }, {
                    key: "creditValidation.status",
                    title: "STATUS",
                    readonly: true
                },
                    // {
                    //     key:"creditValidation.status",
                    //     title:"",
                    //     notitle:true,
                    //     type:"radios",
                    //     titleMap:{
                    //         "1":"Fully Paid",
                    //         "2":"Partially Paid",
                    //         "3":"Not Paid"
                    //         //"4":"Incorrect Information"
                    //                               }
                    // },

                    {
                        key: "creditValidation.notPaid",
                        title: "NOT_PAID",
                        type: "checkbox",
                        "schema": {
                            "default": false
                        },
                    }, {
                        key: "creditValidation.reject_reason",
                        title: "REJECT_REASON",
                        type: "select",
                        titleMap: [{
                            "name": "Amount not credited in account",
                            "value": "1"
                        }],
                        condition: "model.creditValidation.notPaid"
                    }, {
                        key: "creditValidation.reject_remarks",
                        title: "REJECT_REMARKS",
                        readonly: false,
                        type: "textarea",
                        condition: "model.creditValidation.notPaid"
                    }
                ]
            }, {
                "type": "box",
                "title": "LOAN_INFORMATION",
                "items": [{
                    key: "creditValidation.enterprise_name",
                    title: "ENTERPRISE_NAME",
                    readonly: true
                },
                    {
                        key: "creditValidation.accountNumber",
                        title: "LOAN_ACCOUNT_NUMBER",
                        readonly: true,
                        //type:"amount"
                    },
                    {
                        "type": "array",
                        "key": "loanCustomerRelations",
                        "add": null,
                        "remove": null,
                        "view": "fixed",
                        "titleExpr": "model.loanCustomerRelations[arrayIndex].relation | translate",
                        "items": [
                            {
                                "key": "loanCustomerRelations[].first_name",
                                "type": "string",
                                "title": "NAME"
                            },
                            {
                                "key": "loanCustomerRelations[].urn",
                                "type": "string",
                                "title": "URN_NO"
                            }
                        ]
                    },
                    ]
            }, {
                "type": "actionbox",
                "items": [{
                    "type": "submit",
                    "title": "SUBMIT"
                }]
            }],
            schema: function () {
                return ManagementHelper.getVillageSchemaPromise();
            },
            actions: {
                submit: function (model, form, formName) {
                    $log.info("Inside submit()");
                    console.warn(model);
                    Utils.confirm("Are You Sure?")
                        .then(function () {
                            PageHelper.showLoader();
                            if (model.creditValidation.notPaid) {
                                $log.info("Inside NoPayment()");
                                var reqParams = {
                                    "loanRepaymentDetailsId": model.creditValidation.loanRepaymentDetailsId,
                                    "remarks": model.creditValidation.reject_remarks,
                                    "rejectReason": model.creditValidation.reject_reason
                                };
                                LoanProcess.reject(reqParams, null, function (response) {
                                    PageHelper.hideLoader();
                                    $state.go('Page.Engine', {
                                        pageName: 'loans.individual.collections.CreditValidationQueue',
                                        pageId: null
                                    });

                                }, function (errorResponse) {
                                    PageHelper.hideLoader();
                                    PageHelper.showErrors(errorResponse);
                                });
                            } else if (model.creditValidation.statusValue == 1) {
                                $log.info("Inside FullPayment()");
                                LoanProcess.approve({
                                    "loanRepaymentDetailsId": model.creditValidation.loanRepaymentDetailsId
                                }, null, function (response) {
                                    PageHelper.hideLoader();
                                    PageHelper.navigateGoBack();
                                }, function (errorResponse) {
                                    PageHelper.hideLoader();
                                    PageHelper.showErrors(errorResponse);
                                });

                            } else if (model.creditValidation.statusValue == 2) {
                                $log.info("Inside PartialPayment()");
                                var reqParams = {
                                    "id": model.creditValidation.loanRepaymentDetailsId
                                };
                                LoanProcess.partialPayment(reqParams, null, function (response) {
                                    PageHelper.hideLoader();
                                    $state.go('Page.Engine', {
                                        pageName: 'loans.individual.collections.CreditValidationQueue',
                                        pageId: null
                                    });

                                }, function (errorResponse) {
                                    PageHelper.hideLoader();
                                    PageHelper.showErrors(errorResponse);
                                });

                            }
                        })

                }
            }
        };
    }
]);

irf.pageCollection.factory(irf.page("loans.individual.collections.CollectPayment"),
["$log","$q", 'LoanProcess','PageHelper','formHelper','irfProgressMessage',
'SessionStore',"$state","$stateParams","Masters","authService","Utils",
function($log, $q, LoanProcess, PageHelper,formHelper,irfProgressMessage,
	SessionStore,$state,$stateParams,Masters,authService, Utils){

	return {
		"type": "schema-form",
		"title": "REPAYMENT_FOR_LOAN",
		initialize: function (model, form, formCtrl) {
            model.collectPayment = model.collectPayment||{};
            model.repayment = model.repayment || {};
            model.repayment.accountId = $stateParams.pageId;
            if (!model._bounce) {                
                $state.go('Page.Engine', {pageName: 'loans.individual.collections.BounceQueue', pageId: null});
            } else {
                model.collectPayment=model._bounce;
                model.collectPayment.amountdue=model._bounce.amount1;
            }
            model.repayment.instrument = "CASH";
            model.repayment.transactionName = "Scheduled Demand"; //transactionName : Advance Repayment, Scheduled Demand, Fee Payment, Pre-closure, Prepayment
            //repaymentType applicable for KGFS - ADVANCED, SCHEDULED, OVERDUE
            model.repayment.authorizationRemark = "";
            model.repayment.authorizationUsing = "";
            model.repayment.productCode = "T901";
            model.repayment.urnNo = model._bounce.description;
            model.repayment.repaymentDate = Utils.getCurrentDate();
        },
		form: [
			{
				"type":"box",
				"title":"REPAYMENT",
				"items":[
                    {
                        key:"collectPayment.customerName",
                        title:"ENTERPRISE_NAME",
                        readonly:true
                    },
                    {
                        key:"collectPayment.applicant", /*applicant-field is missing in scheduledemandlist*/
                        title:"APPLICANT",
                        readonly:true
                    },
                    {
                        key:"collectPayment.coApplicant", /*coApplicant-field is missing in scheduledemandlist*/
                        title:"CO_APPLICANT",
                        readonly:true
                    },
                    {
                        key: "collectPayment.accountId", /*accountId is Loan Account Number*/
                        title: "LOAN_ACCOUNT_NUMBER",
                        readonly: true
                    },
                    {
                        key:"collectPayment.amountdue",
                        title:"AMOUNT_DUE",
                        //type:"amount",
                        readonly:true
                    },
                    {
                        key:"repayment.instrument",
                        title:"REPAYMENT_MODE",
                        type:"select",
                        titleMap: [{
                            "name":"Cash",
                            "value":"CASH"
                        },
                        {
                            "name":"Cheque",
                            "value":"CHQ"
                        },
                        {
                            "name":"NEFT",
                            "value":"NEFT"
                        },
                        {
                            "name":"RTGS",
                            "value":"RTGS"
                        }]
                    },
                    {
                        key:"repayment.amount",
                        title:"AMOUNT_PAID",
                        readonly:false,
                        required:true,
                        type:"amount"
                    },
					{
						key:"repayment.checqueNumber",
                        title:"CHEQUE_NUMBER",
						type:"text",
                        required:true,
                        condition:"model.repayment.instrument=='CHQ'"
					},
                    {
                        key:"repayment.chequeDate",
                        title:"CHEQUE_DATE",
                        type:"date",
                        required:true,
                        condition:"model.repayment.instrument=='CHQ'"
                    },
                    {
                        key:"repayment.chequeBank",
                        title:"ISSUING_BANK",
                        type:"text",
                        condition:"model.repayment.instrument=='CHQ'"
                    },
                    {
                        key:"repayment.chequeBranch",
                        title:"ISSUING_BRANCH",
                        type:"text",
                        condition:"model.repayment.instrument=='CHQ'"
                    },
                    {
                        key: "repayment.chequePhoto",
                        title: "CHEQUE_PHOTO",
                        condition:"model.repayment.instrument=='CHQ'",
                        type: "file",
                        fileType: "image/*",
                        category: "noidea",
                        subCategory: "absolutlynoidea"
                    },
                    {
                        key:"repayment.NEFTReferenceNumber",
                        title:"REFERENCE_NUMBER",
                        type:"text",
                        required: true,
                        condition:"model.repayment.instrument=='NEFT'"
                    },
                    {
                        key:"repayment.NEFTDate",
                        title:"DATE",
                        type:"text",
                        condition:"model.repayment.instrument=='NEFT'"
                    },
                    {
                        key:"repayment.NEFTBankDetails",
                        title:"BANK_DETAILS",
                        type:"text",
                        condition:"model.repayment.instrument=='NEFT'"
                    },
                    {
                        key:"repayment.NEFTBranchDetails",
                        title:"BRANCH_DETAILS",
                        type:"text",
                        condition:"model.repayment.instrument=='NEFT'"
                    },
                    {
                        key:"repayment.RTGSReferenceNumber",
                        title:"REFERENCE_NUMBER",
                        type:"text",
                        condition:"model.repayment.instrument=='RTGS'"
                    },
                    {
                        key:"repayment.RTGSDate",
                        title:"DATE",
                        type:"text",
                        condition:"model.repayment.instrument=='RTGS'"
                    },
                    {
                        key:"repayment.RTGSBankDetails",
                        title:"BANK_DETAILS",
                        type:"text",
                        condition:"model.repayment.instrument=='RTGS'"
                    },
                    {
                        key:"repayment.RTGSBranchDetails",
                        title:"BRANCH_DETAILS",
                        type:"text",
                        condition:"model.repayment.instrument=='RTGS'"
                    },
                    {
                        key:"repayment.cashCollectionRemark",
                        title:"REMARKS",
                        type:"textarea"
                    }
				]
			}
			,
			{
				"type": "actionbox",
				"items": [{
					"type": "submit",
					"title": "SUBMIT"
			}]
		}],
		schema: {
            type: "object",
            properties: {
                "repayment": {
                    type: "object",
                    properties: {
                        "instrument": {
                            type: "string"
                        }
                    }
                }
            }
        },
		actions: {
			submit: function(model, form, formName){
				$log.info("Inside submit()");
                PageHelper.showLoader();

                LoanProcess.repay(model.repayment, function(response){
                    PageHelper.hideLoader();
                    $state.go('Page.Engine', {pageName: 'loans.individual.collections.BounceQueue', pageId: null});

                }, function(errorResponse){
                    PageHelper.hideLoader();
                    PageHelper.showErrors(errorResponse);
                });
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("loans.individual.collections.P2PUpdate"),
["$log","$q", 'Pages_ManagementHelper','LoanProcess','PageHelper','formHelper','irfProgressMessage',
'SessionStore',"$state","$stateParams","Masters","authService","Utils", "LoanAccount",
function($log, $q, ManagementHelper, LoanProcess, PageHelper,formHelper,irfProgressMessage,
	SessionStore,$state,$stateParams,Masters,authService, Utils, LoanAccount){

	return {
		"type": "schema-form",
		"title": "COLLECTION_STATUS_FOR_LOAN",
		initialize: function (model, form, formCtrl) {
            PageHelper.showLoader();
            irfProgressMessage.pop('loading-P2PUpdate', 'Loading P2PUpdate');
            console.log(SessionStore.getRole());
            //PageHelper
            var loanAccountNo = $stateParams.pageId;
            var promise = LoanAccount.get({accountId: loanAccountNo}).$promise;
            model.additional = {};
            promise.then(function (data) { /* SUCCESS */
                model.P2PUpdate = data;
                console.log(data);
                model.promise = model.promise || {};
                model.promise.customerName=data.customer1FirstName;
                model.promise.applicant = data.customer2FirstName;
                model.promise.productCode=data.productCode;
                //model.promise.customerCategoryLoanOfficer=data.customerCategoryLoanOfficer;
                //model.promise.urnNo=data.customerId1;
                //model.promise.instrument='CASH_IN'; 
                model.promise.authorizationUsing="";
                model.promise.remarks='';
                model.promise.accountNumber = data.accountId;
                model.promise.amount = data.totalDemandDue;
                var currDate = moment(new Date()).format("YYYY-MM-DD");
                model.promise.repaymentDate = currDate;
                model.promise.transactionDate = currDate;
                
                LoanProcess.p2pKGFSList({"accountNumber":model.promise.accountNumber}, 
                    function(response){
                        if (response.body.length){
                        model.previousPromise = response.body[0]; 
                    }
                });
                irfProgressMessage.pop('loading P2PUpdate', 'Loaded.', 2000);
            }, function (resData) {
                irfProgressMessage.pop('loading P2PUpdate', 'Error loading P2PUpdate.', 4000);
                PageHelper.showErrors(resData);
                backToLoansList();
            })
            .finally(function () {
                PageHelper.hideLoader();
            })

            if(model._screen && model._screen == "BouncePromiseQueue"){
                model.additional.fromBouncePromiseQueue = true;
                model.additional.fromBounceQueue = false;
            }else if(model._screen && model._screen == "BounceQueue"){
                model.additional.fromBouncePromiseQueue = false;
                model.additional.fromBounceQueue = true;
            }
            else{
                model.additional.fromBouncePromiseQueue = false;
                model.additional.fromBounceQueue = false;
            }


           
           /* if (!model._bounce) {
                $state.go('Page.Engine', {pageName: 'loans.individual.collections.BounceQueue', pageId: null});
            } else {
                 model.promise = model._bounce;
                 model.promise.assignTo='Null-testing';
                 model.promise.bankName=model._bounce.;
                model.promise.amountdue = model._bounce.amount1;
                model.promise.custname = model._bounce.customerName;
                model.promise.accountNumber = model._bounce.accountId;
                model.promise.transactionDate = Utils.getCurrentDate();
                model.promise.scheduledDate = Utils.getCurrentDate();
                
            }
            */
        },
		form: [
			{
                "type":"box",
                "title":"LAST_P2P_DETAILS",
                "readonly":true,
                "condition": "model.previousPromise",
                "items":[
                    {
                        key: "previousPromise.customerAvailable",
                        title: "CUSTOMER_AVAILABLE",
                        type: "checkbox",
                        schema: {
                            default:false
                        }
                    },
                    {
                        key:"previousPromise.promiseToPayDate",
                        title:"PROMISE_TO_PAY_DATE",
                        readonly:false,
                        type:"date",
                    },
                    {
                        key: "previousPromise.customerCategoryLoanOfficer",
                        title: "CUSTOMER_CATEGORY_LOAN_OFFICER",
                        //type: "select",
                        /*titleMap: {
                            "A": "A",
                            "B": "B",
                            "C": "C",
                            "D": "D"
                        }*/
                    },
                    {
                        key: "previousPromise.customerCategoryHubManager",
                        title: "CUSTOMER_CATEGORY_HUB_MANAGER",
                       // type: "select",
                       /* titleMap: {
                            "A": "A",
                            "B": "B",
                            "C": "C",
                            "D": "D"
                        }*/
                    },
                    {
                        key:"previousPromise.overdueReasons",
                        title:"REASON",
                        //type:"select",
                        /*titleMap: [{
                            "name":"Wilful default",
                            "value":"Wilfuldefault"
                        },
                        {
                            "name":"Hardship",
                            "value":"Hardship"
                        },
                        {
                            "name":"Able to Pay",
                            "value":"AbletoPay"
                        },
                        {
                            "name":"Others",
                            "value":"Others"
                        }]*/
                    },
                    /*{
                        key:"previousPromise.overdueReasons",
                        title:"OTHER_REASON",
                        type:"textarea",
                        condition:"model.previousPromise.reason=='Others'"
                    },*/
                    {
                        key:"previousPromise.remarks",
                        title:"REMARKS",
                        type:"textarea"
                    }
                ]
            },
            {
				"type":"box",
				"title":"COLLECTION_STATUS",
				"items":[
                    {
                        key:"promise.customerName",
                        title:"ENTERPRISE_NAME",
                        readonly:true
                    },
                    {
                        key:"promise.applicant",
                        title:"APPLICANT",
                        readonly:true,
                        "condition":"model.promise.applicant"
                    }/*,
                    {
                        key:"promise.coApplicant",
                        title:"CO_APPLICANT",
                        readonly:true
                    }*/,
                    {
                        key: "promise.accountNumber",
                        title: "LOAN_ACCOUNT_NUMBER",
                        readonly: true
                    },
                    {
                        key:"promise.amount",
                        title:"AMOUNT_DUE",
                        //type:"amount",
                        readonly:true
                    },
                    {
                        key: "promise.customerAvailable",
                        title: "CUSTOMER_AVAILABLE",
                        type: "checkbox",
                        schema: {
                            default: false
                        }
                    },
                    {
                     "type": "fieldset",
                     "title": "COLLECTION_STATUS_DETAILS",
                     "items": [
                        {
                            key:"promise.promiseToPayDate",
                            title:"NEXT_ACTION_DATE",
                            readonly:false,
                            type:"date",
                            
                        },
                        {
                            key: "promise.customerCategoryLoanOfficer", // When User change this condition should also change
                            title: "CUSTOMER_CATEGORY",
                            type: "select",
                            "condition":"model.additional.fromBounceQueue==true",
                            enumCode : "p2p_customer_category"
                            
                        },
                        {
                            key: "promise.customerCategoryHubManager", // When User change this condition should also change
                            title: "CUSTOMER_CATEGORY",
                            type: "select",
                            "condition":"model.additional.fromBouncePromiseQueue==true",
                            enumCode : "p2p_customer_category"
                            
                        },
                        {
                            key:"additional.reason",
                            title:"REASON",
                            type:"select",
                            titleMap: [{
                                "name":"Wilful default",
                                "value":"Wilful default"
                            },
                            {
                                "name":"Hardship",
                                "value":"Hard ship"
                            },
                            {
                                "name":"Able to Pay",
                                "value":"Able to Pay"
                            },
                            {
                                "name":"Others",
                                "value":"Others"
                            }],
                            
                        },
    					{
    						key:"additional.overdueReasons",
                            title:"OVERDUE_REASON",
    						type:"textarea",
                           "condition":"model.additional.reason=='Others'"
                           
    					},
                        {
                            key:"promise.remarks",
                            title:"REMARKS",
                            type:"textarea",

                        }]
                    }    
				]
			}
			,
			{
				"type": "actionbox",
				"items": [{
					"type": "submit",
					"title": "SUBMIT"
			}]
		}],
		schema: function() {
			return ManagementHelper.getVillageSchemaPromise();
		},
		actions: {
            generateFregCode:function(model,form){
                console.log(model);
            },
			submit: function(model, form, formName){
				$log.info("Inside submit()");
				console.warn(model);
				PageHelper.showLoader();
                if (model.additional.reason && model.additional.reason == "Others")
                    model.promise.overdueReasons = model.additional.overdueReasons;
                else
                    model.promise.overdueReasons = model.additional.reason;
                $log.info("going to submit");
                $log.info(model._screen);

                if (model.previousPromise){
                    if(model._screen && model._screen == "BouncePromiseQueue"){
                        model.promise.customerCategoryLoanOfficer = model.previousPromise.customerCategoryLoanOfficer;
                    }else if (model._screen && model._screen == "BounceRecoveryQueue"){
                        model.promise.customerCategoryLoanOfficer = model.previousPromise.customerCategoryLoanOfficer;
                        model.promise.customerCategoryHubManager = model.previousPromise.customerCategoryHubManager;
                    }else{
                        model.promise.customerCategoryHubManager = model.previousPromise.customerCategoryHubManager;
                    }
                }
                $log.info(model.promise.customerCategoryLoanOfficer);
                $log.info(model.promise.customerCategoryHubManager);

                LoanProcess.p2pUpdate(model.promise, function(response){
                    PageHelper.hideLoader();
                    if(model._screen && model._screen == "BouncePromiseQueue")
                        $state.go('Page.Engine', {pageName: 'loans.individual.collections.BouncePromiseQueue', pageId: null});
                    else if(model._screen && model._screen == "BounceRecoveryQueue")
                        $state.go('Page.Engine', {pageName: 'loans.individual.collections.BounceRecoveryQueue', pageId: null});
                    else if(model._screen && model._screen == "BounceQueue")
                        $state.go('Page.Engine', {pageName: 'loans.individual.collections.BounceQueue', pageId: null});

                }, function(errorResponse){
                    PageHelper.hideLoader();
                    PageHelper.showErrors(errorResponse);
                });
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("loans.individual.collections.CreditValidationQueue"),
["$log", "formHelper", "LoanProcess", "$state", "SessionStore", "$q", "entityManager",
function($log, formHelper, LoanProcess, $state, SessionStore, $q, entityManager){
    return {
        "type": "search-list",
        "title": "CREDIT_VALIDATION_QUEUE",
        //"subTitle": "T_ENROLLMENTS_PENDING",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
        },
        definition: {
            title: "SEARCH_PAYMENTS",
            searchForm: [
                {
                    "key": "accountNumber"
                },
                {
                    "key": "branch_id",
                    "type": "select"
                },
                {
                    "key": "centre",
                    "type": "select",
                    "parentEnumCode": "branch_id"
                }
            ],
            autoSearch:false,
            searchSchema: {
                "type": 'object',
                "title": 'SEARCH_OPTIONS',
                "required":[],
                "properties": {
                    "accountNumber": {
                        "title": "LOAN_ACCOUNT_NUMBER",
                        "type": "string",
                        "pattern": "^[0-9a-zA-Z]+$"
                    },
                    "branch_id": {
                        "title": "BRANCH_NAME",
                        "type": ["null", "number"],
                        "enumCode": "branch_id"
                    },
                    "centre": {
                        "title": "CENTRE",
                        "type": ['null', 'number'],
                        "enumCode": "centre"
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = LoanProcess.repaymentList({
                    'centre': searchOptions.centre,
                    'accountNumber': searchOptions.accountNumber,
                    'status': "Pending",
                    'branchId': searchOptions.branch_id
                }).$promise;

                return promise;
            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return headers && headers['x-total-count'];
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                expandable:true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName,
                        'Loan Number: ' + item.accountNumber,
                        'Amount Due: ' + item.demandAmountInPaisa/100,
                        'Payment Type:' + item.paymentType
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "Credit Validation",
                            desc: "",
                            fn: function(item, index){
                                entityManager.setModel('loans.individual.collections.CreditValidation', {_credit:item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.collections.CreditValidation', pageId: item.accountNumber});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.collections.TransactionAuthorizationQueue"),
["$log", "formHelper","entityManager", "LoanProcess", "$state", "SessionStore", "$q",
function($log, formHelper, entityManager, LoanProcess, $state, SessionStore,$q){
    return {
        "type": "search-list",
        "title": "TRANSACTION_AUTHORIZATION_QUEUE",
        //"subTitle": "T_ENROLLMENTS_PENDING",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branch = SessionStore.getBranch();
        },
        /*offline: true,
        getOfflineDisplayItem: function(item, index){
            return [
                "Branch: " + item["branch"],
                "Centre: " + item["centre"]
            ]
        },
        getOfflinePromise: function(searchOptions){      \* Should return the Promise *\
            var promise = Enrollment.search({
                'branchName': searchOptions.branch,
                'centreCode': searchOptions.centre,
                'firstName': searchOptions.first_name,
                'lastName': searchOptions.last_name,
                'page': 1,
                'per_page': 100,
                'stage': "Stage02"
            }).$promise;

            return promise;
        },*/
        definition: {
            title: "SEARCH_PAYMENTS",
            searchForm: [
                "*"
            ],
            autoSearch:true,
            searchSchema: {
                "type": 'object',
                "title": 'SEARCH_OPTIONS',
                "required":["branch"],
                "properties": {
                    "loan_no": {
                        "title": "LOAN_ACCOUNT_NUMBER",
                        "type": "string",
                        "pattern": "^[0-9a-zA-Z]+$"
                    },
                    "first_name": {
                        "title": "CUSTOMER_NAME",
                        "type": "string"
                    },
                    /*"kyc_no": {
                        "title": "KYC_NO",
                        "type": "string"
                    },*/
                    "branch": {
                        "title": "BRANCH_NAME",
                        "type": "string",
                        "enumCode": "branch",
                        "x-schema-form": {
                            "type": "select"
                        }
                    },
                    "centre": {
                        "title": "CENTRE",
                        "type": ["null","integer"],
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "filter": {
                                "parentCode as branch": "model.branch"
                            }
                        }
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
                var promise = LoanProcess.repaymentList({
                    'branchName': searchOptions.branch,
                    'centre': searchOptions.centre,
                    'firstName': searchOptions.first_name,
                    /*'page': pageOpts.pageNo,
                    'per_page': pageOpts.itemsPerPage,*/
                    'status': "PartialPayment"
                }).$promise;

                return promise;

            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return headers && headers['x-total-count'];
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                /*itemCallback: function(item, index) {
                    $log.info(item);
                    $log.info("Redirecting");
                    $state.go('Page.Engine', {pageName: 'AssetsLiabilitiesAndHealth', pageId: item.id});
                },*/
                expandable:true,
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        item.customerName,
                        'Loan Number: ' + item.accountNumber,
                        'Amount Due: ' + item.demandAmountInPaisa/100,
                        'Payment Type:' + item.paymentType
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "Verify",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                entityManager.setModel('loans.individual.collections.TransactionAuthorization', {_transAuth:item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.collections.TransactionAuthorization', pageId: item.accountNumber});
                            },
                            isApplicable: function(item, index){
                                //if (index%2==0){
                                //  return false;
                                //}
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.collections.TransactionAuthorization"),
    ["$log", "$q", 'Pages_ManagementHelper', 'LoanProcess', 'LoanAccount', 'entityManager', 'PageHelper', 'formHelper', 'irfProgressMessage',
        'SessionStore', "$state", "$stateParams", "Masters", "authService", "Utils",
        function ($log, $q, ManagementHelper, LoanProcess, LoanAccount, entityManager, PageHelper, formHelper, irfProgressMessage,
                  SessionStore, $state, $stateParams, Masters, authService, Utils) {

            return {
                "type": "schema-form",
                "title": "PAYMENT_DETAILS_FOR_LOAN",
                initialize: function (model, form, formCtrl) {
                    $log.info("Transaction Authorization Page got initialized");
                    model.transAuth = model.transAuth || {};
                    model._input = {isPenalInterestWaivedOff: false, isFeeWaivedOff: false};
                    PageHelper.showLoader();

                    //PageHelper.showLoader();
                    irfProgressMessage.pop('loading-Transaction Authorization-details', 'Loading Transaction Authorization Details');
                    //PageHelper
                    var loanAccountNo = $stateParams.pageId;
                    var promise = LoanAccount.get({accountId: loanAccountNo}).$promise;
                    promise.then(function (data) { /* SUCCESS */
                        model.loanAccount = data;
                        console.log('sarthak')
                        console.log(data);
                        model.transAuth = model.transAuth || {};
                        model.transAuth.customer_name = data.customer1FirstName;
                        model.transAuth.productCode = data.productCode;
                        model.transAuth.urnNo = data.customerId1;
                        model.transAuth.instrument = 'CASH_IN';
                        model.transAuth.authorizationUsing = 'Testing-Swapnil';
                        model.transAuth.remarks = 'collections';
                        model.transAuth.accountNumber = data.accountId;
                        model.transAuth.amountDue = data.totalDemandDue;
                        model.transAuth.principal = data.totalPrincipalDue;
                        model.transAuth.interest = data.totalNormalInterestDue;
                        model.transAuth.applicant_name = data.applicant;
                        model.transAuth.applicant_name = data.coapplicant;
                        model.transAuth.penal_interest = data.totalPenalInterestDue;
                        model.transAuth.accountOpenDate = data.lastDemandRunDate;
                        model.transAuth.loanRepaymentDetailsId = model._transAuth.id;
                        model.transAuth.fee = data.totalFeeDue;
                        model.transAuth.amountCollected = model._transAuth.repaymentAmountInPaisa / 100;
                        irfProgressMessage.pop('loading-loan-details', 'Loaded.', 2000);
                        PageHelper.hideLoader();
                    }, function (resData) {
                        irfProgressMessage.pop('loading-loan-details', 'Error loading Loan details.', 4000);
                        PageHelper.showErrors(resData);
                        backToLoansList();
                    })
                },

                form: [
                    {
                        "type": "box",
                        "title": "PAYMENT",
                        "items": [
                            {
                                type: "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-xs-8 col-md-8",
                                    "items": [{
                                        key: "transAuth.customer_name",
                                        title: "ENTERPRISE_NAME",
                                        readonly: true
                                    },
                                        {
                                            key: "transAuth.applicant_name",
                                            title: "APPLICANT",
                                            readonly: true,
                                        },
                                        {
                                            key: "transAuth.co_applicant_name",
                                            title: "CO_APPLICANT",
                                            readonly: true,
                                        }]
                                },
                                    {
                                        "type": "section",
                                        "htmlClass": "col-xs-4 col-md-4"
                                    }]
                            },
                            {
                                type: "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-xs-8 col-md-8",
                                    "items": [{
                                        key: "transAuth.principal",
                                        title: "PRINCIPAL",
                                        readonly: true,
                                        type: "amount"
                                    }]
                                },
                                    {
                                        "type": "section",
                                        "htmlClass": "col-xs-4 col-md-4"
                                    }]
                            },
                            {
                                type: "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-xs-8 col-md-8",
                                    "items": [{
                                        key: "transAuth.interest",
                                        title: "INTEREST",
                                        readonly: true,
                                        type: "amount"
                                    }]
                                },
                                    /*{
                                     "type": "section",
                                     "htmlClass": "col-xs-4 col-md-4",
                                     "items": [{
                                     key: "int_waived_off",
                                     title: "WAIVED",
                                     type: "checkbox",
                                     "fullwidth":true,
                                     schema: {
                                     default: false
                                     }
                                     }]
                                     }*/]
                            },
                            {
                                type: "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-xs-8 col-md-8",
                                    "items": [{
                                        key: "transAuth.penal_interest",
                                        title: "PENAL_INTEREST",
                                        readonly: true,
                                        type: "amount"
                                    }]
                                },
                                    {
                                        "type": "section",
                                        "htmlClass": "col-xs-4 col-md-4",
                                        "items": [{
                                            key: "_input.isPenalInterestWaivedOff",
                                            title: "WAIVED",
                                            type: "checkbox",
                                            "fullwidth": true,
                                            schema: {
                                                default: false
                                            }
                                        }]
                                    }]
                            },
                            {
                                type: "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-xs-8 col-md-8",
                                    "items": [{
                                        key: "transAuth.fee",
                                        title: "FEES_AND_OTHER_CHARGES",
                                        readonly: true,
                                        type: "amount"
                                    }]
                                },
                                    {
                                        "type": "section",
                                        "htmlClass": "col-xs-4 col-md-4",
                                        "items": [{
                                            key: "_input.isFeeWaivedOff",
                                            title: "WAIVED",
                                            type: "checkbox",
                                            "fullwidth": true,
                                            schema: {
                                                default: false
                                            }
                                        }]
                                    }]
                            },
                            {
                                type: "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-xs-8 col-md-8",
                                    "items": [{
                                        key: "transAuth.amountDue",
                                        title: "AMOUNT_DUE",
                                        readonly: true,
                                        type: "amount"
                                    }]
                                },
                                    {
                                        "type": "section",
                                        "htmlClass": "col-xs-4 col-md-4"
                                    }]
                            },
                            {
                                type: "section",
                                "htmlClass": "row",
                                "items": [{
                                    "type": "section",
                                    "htmlClass": "col-xs-8 col-md-8",
                                    "items": [{
                                        key: "transAuth.amountCollected",
                                        title: "AMOUNT_COLLECTED",
                                        readonly: true,
                                        type: "amount"
                                    }]
                                },
                                    {
                                        "type": "section",
                                        "htmlClass": "col-xs-4 col-md-4"
                                    }]
                            }
                        ]
                    },
                    {
                        "type": "actionbox",
                        "items": [{
                            "type": "submit",
                            "title": "SUBMIT"
                        }]
                    }],
                schema: function () {
                    return ManagementHelper.getVillageSchemaPromise();
                },
                actions: {
                    generateFregCode: function (model, form) {
                        console.log(model);
                        if (model.village.pincode > 100000) {
                            model.village.fregcode = Number(model.village.pincode + "001");
                        }
                        else {
                            model.village.fregcode = "";
                        }

                    },
                    submit: function (model, form, formName) {
                        $log.info("Inside submit()");
                        Utils.confirm("Are You Sure?")
                            .then(function () {
                                if (model._input.isFeeWaivedOff === true || model._input.isPenalInterestWaivedOff === true) {
                                    LoanProcess.waiver({repaymentId: model.transAuth.loanRepaymentDetailsId, waivefee: model._input.isFeeWaivedOff, waivePenalty: model._input.isPenalInterestWaivedOff, fromDate: Utils.convertJSONTimestampToDate(model.transAuth.accountOpenDate)}, null)
                                        .$promise
                                        .then(
                                            function (res) {
                                                PageHelper.navigateGoBack();
                                            }, function (httpRes) {
                                                PageHelper.showErrors(httpRes);
                                            }
                                        )
                                    return;
                                } else {
                                    LoanProcess.approve({loanRepaymentDetailsId: model.transAuth.loanRepaymentDetailsId}, null)
                                        .$promise
                                        .then(
                                            function (res) {
                                                PageHelper.navigateGoBack();
                                            }, function (httpRes) {
                                                PageHelper.showErrors(httpRes);
                                            }
                                        )
                                }
                            })


                    }
                }
            };
        }]);

irf.pageCollection.factory(irf.page("loans.individual.collections.DepositStage"),
["$log", "SessionStore","$state", "$stateParams", "irfElementsConfig","Queries","formHelper","CustomerBankBranch","LoanProcess","PageHelper",
function($log,SessionStore,$state,$stateParams,irfElementsConfig,Queries,formHelper,CustomerBankBranch,LoanProcess,PageHelper){

    var branch = SessionStore.getBranch();

    var computeTotal = function(model){
        model.totalAmount=0;
        for (var i = model.pendingCashDeposits.length - 1; i >= 0; i--) {
            model.totalAmount+=model.pendingCashDeposits[i].amount_collected;
        }
        model.amountDeposited = model.totalAmount;
    }

    return {
        "type": "schema-form",
        "title": "DEPOSIT_STAGE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("Individual Loan Booking Page got initialized");
            model.loggedInUser = SessionStore.getLoginname();

            Queries.getDepositList(SessionStore.getLoginname())
            .then(function (res){
                $log.info(res);
                model.pendingCashDeposits = [];
                model.loanAccounts = [];
                for (var i=0; i< res.body.length;i++){
                    var cashDeposit = res.body[i];
                    if(cashDeposit.repayment_amount_in_paisa>0)
                        cashDeposit.repayment_amount_in_paisa = cashDeposit.repayment_amount_in_paisa / 100;
                    model.pendingCashDeposits.push(
                        {
                            loan_ac_no: cashDeposit.account_number,
                            repaymentId: cashDeposit.id,
                            customer_name: cashDeposit.customer_name,
                            amount_collected: cashDeposit.repayment_amount_in_paisa
                        }
                    );
                    model.loanAccounts.push(cashDeposit.id);
                }
                computeTotal(model);
            },
            function(httpRes){
                PageHelper.showProgress('deposit-stage', 'Failed to load the deposit details. Try again.', 4000);
                PageHelper.showErrors(httpRes);
                PageHelper.hideLoader();
            });

        },
        offline: false,
        getOfflineDisplayItem: function(item, index){

        },
        form: [{
            "type": "box",
            "titleExpr": "'Cash to be deposited by '+ model.loggedInUser", // sample label code
            "colClass": "col-sm-12", // col-sm-6 is default, optional
            //"readonly": false, // default-false, optional, this & everything under items becomes readonly
            "items": [
            {
                "type":"array",
                "key":"pendingCashDeposits",
                "add":null,
                "remove":null,
                "view": "fixed",
                "readonly":true,
                "notitle":true,
                "items":[{
                    "type":"section",
                    "htmlClass": "row",
                    "items": [{
                        "type": "section",
                        "htmlClass": "col-xs-8 col-md-8",
                        "items": [{
                            "key":"pendingCashDeposits[].customer_name",
                            "titleExpr":"model.pendingCashDeposits[arrayIndex].loan_ac_no",
                            "title":" "
                        }]
                    },
                    {
                        "type": "section",
                        "htmlClass": "col-xs-4 col-md-4",
                        "items": [{
                            "key": "pendingCashDeposits[].amount_collected",
                            "type":"amount",
                            "title": " "
                        }]
                    }]
                }]
            },
            {
                "type":"section",
                "html":"<hr>"
            },
            {
                "type":"section",
                "htmlClass": "row",
                "items": [{
                    "type": "section",
                    "htmlClass": "col-sm-12",
                    "items": [{
                        "type": "amount",
                        "key": "totalAmount",
                        "title":"TOTAL_TO_BE_DEPOSITED",
                        "readonly":true
                    }]
                }]
            },
            {
                "key":"amountDeposited",
                "type":"amount",
                "title":"AMOUNT_DEPOSITED"
            },
            {
                key: "bankDepositSummary.bankAccountNumber",
                type: "lov",
                autolov: true,
                title:"DEPOSITED_TO_ACCOUNT",
                bindMap: {
                },
                outputMap: {
                    "account_number": "bankDepositSummary.bankAccountNumber"
                },
                searchHelper: formHelper,
                search: function(inputModel, form, model) {
                    return Queries.getBankAccounts();
                },
                getListDisplayItem: function(item, index) {
                    return [
                        item.account_number,
                        item.ifsc_code + ', ' + item.bank_name,
                        item.branch_name
                    ];
                }
            },
            {
                key: "bankDepositSummary.ifscCode",
                type: "lov",
                "title":"CASH_DEPOSIT_BRANCH_IFSC_CODE",
                lovonly: true,
                inputMap: {
                    "ifscCode": {
                        "key": "bankDepositSummary.ifscCode"
                    },
                    "bankName": {
                        "key": "bankDepositSummary.depositBank"
                    },
                    "branchName": {
                        "key": "bankDepositSummary.depositBranch"
                    }
                },
                onSelect:function(results,model,context) {
                    model.bankDepositSummary.ifscCode = results.ifscCode;
                    model.bankDepositSummary.bankBranchDetails = results.bankName + ' ' + results.branchName;
                },
                searchHelper: formHelper,
                search: function(inputModel, form) {
                    $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                    var promise = CustomerBankBranch.search({
                        'bankName': inputModel.depositBank,
                        'ifscCode': inputModel.ifscCode,
                        'branchName': inputModel.depositBranch
                    }).$promise;
                    return promise;
                },
                getListDisplayItem: function(data, index) {
                    return [
                        data.ifscCode,
                        data.branchName,
                        data.bankName
                    ];
                },
            },
            {
                "key":"bankDepositSummary.bankBranchDetails",
                "title":"DEPOSITED_BANK_BRANCH"
            }
            ]
        },{
            "type": "actionbox",
            "items": [{
                "type": "submit",
                "title": "SUBMIT"
            }]
        }],
        schema: {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "type": "object",
            "properties": {
                /*"repayment": {
                    "type": "object",
                    "properties": {
                        "repaymentId": {
                            "type": "string",
                            "title":"ACCOUNT_ID"
                        },
                        "amount": {
                            "type": "number",
                            "title":"AMOUNT_PAID"

                        },
                        "authorizationRemark": {
                            "type": "string",
                            "title":"AUTHORIZATION_REMARK"
                        },
                        "authorizationUsing": {
                            "type": "string",
                            "title":"AUTHORIZATION_USING"
                        },
                        "cashCollectionRemark": {
                            "type": "string",
                            "title":"CASH_COLLECTION_REMARK"
                        },
                        "groupCode": {
                            "type": "string",
                            "title":"GROUP_CODE"
                        },
                        "instrument": {
                            "type": "string",
                            "title": "INSTRUMENT_TYPE",
                            "required": true
                        },
                        "productCode": {
                            "type": "string",
                            "title":"PRODUCT_CODE"
                        },
                        "remarks": {
                            "type": "string",
                            "title":"REMARKS"
                        },
                        "repaymentDate": {
                            "type": "string",
                            "title":"REPAYMENT_DATE",
                            readonly:true,
                            "x-schema-form": {
                                "type": "date"
                            }
                        },
                        "transactionId": {
                            "type": "string",
                            "title":"TRANSACTION_ID"
                        },
                        "transactionName": {
                            "type": "string",
                            "title":"TRANSACTION_NAME",
                            "enumCode":"repayment_transaction_name",

                        },
                        "urnNo": {
                            "type": "string",
                            "title":"URN_NO"
                        }
                    },
                    required: [
                        'instrument'
                    ]
                },*/
                "repayments": [{
                    "type": "string"
                }],
                "bankDepositSummary": {
                    "type": "object",
                    "properties": {
                        "bankAccountNumber": {
                            "type": "string"

                        },
                        "bankBranchDetails": {
                            "type": "string"
                        },
                        "ifscCode": {
                            "type": "string",
                            "title":"IFSC_CODE"
                        },
                        "depositBank": {
                            "type": "string",
                            "title":"DEPOSITED_BANK"
                        },
                        "depositBranch": {
                            "type": "string",
                            "title":"DEPOSITED_BRANCH"
                        },
                    }
                }
            },
            "required": [
                "repaymentId",
                "amount",
                "authorizationRemark",
                "authorizationUsing",
                "cashCollectionRemark",
                "groupCode",
                "productCode",
                "remarks",
                "repaymentDate",
                "transactionId",
                "transactionName",
                "urnNo"
            ]
        },
        actions: {
            submit: function(model, form, formName){
                var reqData = {
                    'bankDepositSummary': _.cloneDeep(model.bankDepositSummary),
                    'repayments':_.cloneDeep(model.loanAccounts)
                };

                PageHelper.showProgress('update-loan', 'Working...');
                PageHelper.showLoader();
                $log.info(reqData);
                console.log(JSON.stringify(reqData));
                LoanProcess.processCashDeposit(reqData, function(response){
                    PageHelper.hideLoader();
                    $state.go('Page.Engine', {pageName: 'loans.individual.collections.BounceQueue', pageId: null});

                }, function(errorResponse){
                    PageHelper.hideLoader();
                    PageHelper.showErrors(errorResponse);
                });
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.collections.ChargeFee"),
["$log", "SchemaResource", "SessionStore", "Utils", "$stateParams", "LoanAccount", "PageHelper",
    function($log, SchemaResource, SessionStore, Utils, $stateParams, LoanAccount, PageHelper) {

        return {
            "type": "schema-form",
            "title": "ADHOC_CHARGES",
            "subTitle": "CHARGE_FEE",
            initialize: function(model, form, formCtrl) {
                $log.info("Demo Customer Page got initialized");
                model.chargeFee = model.chargeFee || {};
                model.chargeFee.accountNumber = $stateParams.pageId;
                model.chargeFee.transactionDate = Utils.getCurrentDate();
                model.chargeFee.userId = SessionStore.getLoginname();
            },
            form: [{
                "type": "box",
                "title": "FEE_DETAILS",
                "items": [{
                    "key": "chargeFee.accountNumber",
                    "title": "ACCOUNT_NUMBER",
                    "readonly": true
                }, {
                    "key": "_loan.customerName",
                    "title": "ENTITY_NAME",
                    "readonly": true,
                    "condition": "model._loan.customerName"
                }, {
                    "key": "_loan.loanAmount",
                    "title": "LOAN_AMOUNT",
                    "readonly": true,
                    "condition": "model._loan.loanAmount"
                }, {
                    "key": "chargeFee.transactionDate",
                    "title": "FEE_DATE",
                    "type": "date",
                    "readonly": true
                }, {
                    "key": "chargeFee.transactionName",
                    "title": "FEE_TYPE",
                    "type": "select",
                    "enumCode": "charge_fee_type",
                    "required": true
                }, {
                    "key": "chargeFee.amount",
                    "title": "AMOUNT",
                    "type": "amount",
                    "required": true
                }]
            }, {
                type: "actionbox",
                items: [{
                    type: "submit",
                    title: "Submit"
                }]
            }],
            schema: function() {
                return SchemaResource.getDisbursementSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {
                    $log.info("on submit action ....");
                    model.chargeFee.transactionDate = Utils.getCurrentDate() + "T14:35:13.248Z";
                    PageHelper.showLoader();
                    LoanAccount.chargeFee(model.chargeFee).$promise.then(function(resp) {
                        PageHelper.showProgress("charge-fee", "Charge Fee Collected", 3000);
                        $state.go("Page.Engine", {
                            "pageName": "loans.individual.Queue",
                            "pageId": null
                        });
                    }, function(errResp) {
                        $log.error(errResp);
                        PageHelper.showErrors(errResp);
                    }).finally(function() {
                        PageHelper.hideLoader();
                    });
                }
            }
        };
    }
]);
/*
About ACHRegistration.js
------------------------
To register or update ACH loan id. If the user exist, the Update module is called
else the create field is called(both update and create usessame API).
Both Update and Create points to same API.
The search API is called in iniialize to identify if loan account number exist. If exist, the details are obtained
and filled in the screen.

Methods
-------
Initialize : To decare the required model variables.
onClick : To download the Domand Form for the ACH Account
submit : To submit the created/updated ACH

Services
--------
ACH.search({ accountNumber: model.ach.accountId }) : Search for existance of Loan account Number
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHRegistration"), ["$log", "ACH", "IndividualLoan", "LoanAccount", "PageHelper", "irfProgressMessage", "SessionStore", "$state", "Utils", "$stateParams", "formHelper", "CustomerBankBranch", 'Queries', "$q",
	function($log, ACH, IndividualLoan, LoanAccount, PageHelper, irfProgressMessage, SessionStore, $state, Utils, $stateParams, formHelper, CustomerBankBranch, Queries, $q) {

		var branch = SessionStore.getBranch();
		var achSearchPromise;
		var loanAccountPromise;
		var queriesPromise;

		return {
			"type": "schema-form",
			"title": "ACH_REGISTRATION",
			"subTitle": "",

			initialize: function(model, form, formCtrl) {
				//Create Model ach
				model.ach = model.ach || {};
				model.achACHSearch = model.achACHSearch || {};
				model.ach.loanId = $stateParams.pageId;
				model.isRejected = false;
				//flag is to identify Create(false) or Update(true), and to update Submit Button Name

				if (!$stateParams.pageId) {
					$state.go("Page.Engine", {
						pageName: "loans.individual.achpdc.ACHPDCQueue",
						pageId: null
					});
					return;
				}

				if ($stateParams.pageId || model._loanAch) {

					PageHelper.clearErrors();
					PageHelper.showLoader();


					IndividualLoan.get({
						id: model.ach.loanId
					}).$promise.then(
						function(res) {
							model.achIndividualLoanSearch = res;
							// model.ach.mandateOpenDate = Utils.getCurrentDate();
							// model.ach.registrationDate = Utils.getCurrentDate();
							model.ach.reference1 = model.achIndividualLoanSearch.accountNumber;
							model.ach.reference2 = model.achIndividualLoanSearch.urnNo;
							//model.ach.utilityCode = "HDFC05720000027482";
							model.ach.accountId = model.achIndividualLoanSearch.accountNumber;
							model.ach.bankAccountNumber = model.achIndividualLoanSearch.customerBankAccountNumber;
							//model.ach.ifscCode = model.achIndividualLoanSearch.customerBankIfscCode;
							//model.ach.sponsorBankCode = "HDFC0999999";
							model.ach.sponsorAccountCode = "Cash";
							model.ach.mandateStatus = "PENDING";
							//model.ach.branch = model.achIndividualLoanSearch.branch;
							model.ach.id = model.ach.loanId;
							//model.ach.customerName = model.achIndividualLoanSearch.customerId;
							//model.ach.accountHolderName = model.achIndividualLoanSearch.accountHolderName;
							//model.ach.accountType = model.achIndividualLoanSearch.loanType;
							model.ach.accountNumber = model.achIndividualLoanSearch.accountNumber;
							model.ach.centreId = model.achIndividualLoanSearch.loanCentre.centreId;

							if (model.achIndividualLoanSearch.disbursementSchedules && model.achIndividualLoanSearch.disbursementSchedules.length > 0) {
								if (model.achIndividualLoanSearch.disbursementSchedules[0].actualDisbursementDate && model.achIndividualLoanSearch.disbursementSchedules[0].actualDisbursementDate != null) {
									model.ach.achStartDate = model.achIndividualLoanSearch.disbursementSchedules[0].actualDisbursementDate;
									model.ach.mandateOpenDate = model.achIndividualLoanSearch.disbursementSchedules[0].actualDisbursementDate;
								} else if (model.achIndividualLoanSearch.disbursementSchedules[0].scheduledDisbursementDate && model.achIndividualLoanSearch.disbursementSchedules[0].scheduledDisbursementDate != null) {
									model.ach.achStartDate = model.achIndividualLoanSearch.disbursementSchedules[0].scheduledDisbursementDate;
									model.ach.mandateOpenDate = model.achIndividualLoanSearch.disbursementSchedules[0].scheduledDisbursementDate;
								}
							}



							for (var i = 0; i < formHelper.enum('branch_id').data.length; i++) {
								if (parseInt(formHelper.enum('branch_id').data[i].code) == parseInt(model.achIndividualLoanSearch.branchId)) {
									model.ach.branch = formHelper.enum('branch_id').data[i].name;
									break;
								}
							}

							model.ach.centreId = model.achIndividualLoanSearch.loanCentre.centreId;
							for (var i = 0; i < formHelper.enum('centre').data.length; i++) {
								if (parseInt(formHelper.enum('centre').data[i].code) == parseInt(model.ach.centreId)) {
									model.ach.centreCode = formHelper.enum('centre').data[i].name;
									break;
								}
							}


							Queries.getCustomerBasicDetails({
								urns: [model.achIndividualLoanSearch.applicant, model.achIndividualLoanSearch.coBorrowerUrnNo, model.achIndividualLoanSearch.urnNo]
							}).then(
								function(resQuery) {
									// console.log(resQuery);
									// console.log(resQuery.urns[model.achIndividualLoanSearch.applicant].first_name);
									model.ach.applicantName = resQuery.urns[model.achIndividualLoanSearch.applicant].first_name;
									model.ach.entityName = resQuery.urns[model.achIndividualLoanSearch.urnNo].first_name;
								},
								function(errQuery) {}
							);

							loanAccountPromise = LoanAccount.get({
								accountId: model.achIndividualLoanSearch.accountNumber
							}).$promise.then(
								function(response) {
									model.achLoanAccountSearch = response;
									//model.ach.accountHolderName = model.achLoanAccountSearch.accountName;
									model.ach.achEndDate = model.achLoanAccountSearch.maturityDate;

									if (!_.isNull(model.achLoanAccountSearch.customer1Email)) {
										model.ach.emailId = model.achLoanAccountSearch.customer1Email;
									}

									if (!_.isNull(model.achLoanAccountSearch.customer1Phone1)) {
										model.ach.phoneNo = model.achLoanAccountSearch.customer1Phone1;
									}

									model.ach.maximumAmount = parseInt(model.achLoanAccountSearch.equatedInstallment);
									model.ach.maximumAmount = model.ach.maximumAmount.toString();
									model.ach.frequency = model.achLoanAccountSearch.tenureUnit;
								},
								function(error) {}
							);

							achSearchPromise = ACH.search({
								accountNumber: model.achIndividualLoanSearch.accountNumber
							}).$promise.then(
								function(res) {
									$log.info("response: " + res);
									model.achACHSearch = res;
									for (var i = 0; i < model.achACHSearch.body.length; i++) {
										if ((model.achACHSearch.body[i].accountId == model.ach.accountId) && (model.achACHSearch.body[i].mandateStatus != "REJECTED")) {
											PageHelper.showProgress("page-init", "ACH Registration Done for the Account", 5000);
											$state.go("Page.Engine", {
												pageName: "loans.individual.achpdc.ACHPDCQueue",
												pageId: null,
												pageData: null
											});
										} else if ((model.achACHSearch.body[i].accountId == model.ach.accountId) && (model.achACHSearch.body[i].mandateStatus == "REJECTED")) {
											model.isRejected = true;
											angular.extend(model.ach, model.achACHSearch.body[i]);
											model.ach.mandateStatus = "PENDING";
											model.ach.registrationStatus = "PENDING";
										}
									}
								},
								function(httpRes) {}

							);
                            $q.all([loanAccountPromise, achSearchPromise])
                                .then(function(){
                                    PageHelper.hideLoader();
                                })
						},
						function(httpRes) {
							$log.info("ACH Search Response : " + httpRes);
						}
					).finally(function() {});
				}

				$log.info("ACH_REGISTRATION got initialized");
			},
			offline: false,

			getOfflineDisplayItem: function(item, index) {},

			form: [{
				"type": "box",
				"notitle": true,
				"items": [{
					"type": "fieldset",
					"title": "LOAN_DETAILS",
					"items": [{
						"key": "ach.accountId",
						"title": "ACCOUNT_NUMBER",
						"readonly": true
					}, {
						"key": "ach.branch",
						"title": "BRANCH_NAME",
						"readonly": true
					}, {
						"key": "ach.centreCode",
						"title": "SPOKE",
						"readonly": true
					}, {
						"key": "ach.entityName",
						"title": "ENTITY_NAME",
						"readonly": true
					}, {
						"key": "ach.applicantName",
						"title": "APPLICANT_NAME",
						"readonly": true
					}]
				}, {
					"type": "fieldset",
					"title": "ACH_DETAILS",
					"items": [{
							"key": "ach.accountHolderName",
							"title": "ACCOUNT_HOLDER_NAME"
						}, {
							"key": "ach.accountType",
							"title": "ACCOUNT_TYPE",
							"type": "select",
							"enumCode": "ach_account_type"

						}, {
							key: "ach.bankAccountNumber",
							type: "lov",
							autolov: true,
							title: "BANK_ACCOUNT_NUMBER",
							bindMap: {},
							outputMap: {
								"account_number": "ach.bankAccountNumber",
								"ifsc_code": "ach.ifscCode"
							},
							searchHelper: formHelper,
							onSelect: function(result, model, arg1) {
								CustomerBankBranch.search({
									'ifscCode': result.ifsc_code
								}).$promise.then(function(response) {
									console.log(response);
									if (response.body) {
										model.ach.bankName = response.body[0].bankName;
										model.ach.branchName = response.body[0].branchName;
										model.ach.micr = response.body[0].micrCode;
									}
								}, function(error) {

								});
							},
							search: function(inputModel, form, model) {
								var urn = [];
								for (var i = 0; i < model.achIndividualLoanSearch.loanCustomerRelations.length; i++) {
									urn.push(model.achIndividualLoanSearch.loanCustomerRelations[i].urn);
								}
								urn.push(model.achIndividualLoanSearch.urnNo);
								return Queries.getCustomersBankAccounts({
									customer_urns: urn,
									customer_ids: model.achIndividualLoanSearch.customerId
								});
							},
							getListDisplayItem: function(item, index) {
								return [
									'Account Number : ' + item.account_number,
									'Branch : ' + item.customer_bank_branch_name,
									'Bank : ' + item.customer_bank_name,
									'IFSC Code : ' + item.ifsc_code

								];
							}
						}, {
							"key": "ach.ifscCode",
							"title": "IFSC_CODE",
							"type": "lov",
							"inputMap": {
								"ifscCode": {
									"key": "ach.ifscCode"
								},
								"bankName": {
									"key": "ach.bankName"
								},
								"branchName": {
									"key": "ach.branchName"
								}
							},
							bindMap: {},
							outputMap: {
								"bankName": "ach.bankName",
								"branchName": "ach.branchName",
								"ifscCode": "ach.ifscCode",
								"micrCode": "ach.micr"
							},
							searchHelper: formHelper,

							search: function(inputModel, form) {
								$log.info("SessionStore.getBranch: " + SessionStore.getBranch());
								var promise = CustomerBankBranch.search({
									'bankName': inputModel.bankName,
									'ifscCode': inputModel.ifscCode,
									'branchName': inputModel.branchName
								}).$promise;
								return promise;
							},

							getListDisplayItem: function(data, index) {
								return [
									data.ifscCode,
									data.branchName,
									data.bankName,
									data.micrCode
								];
							}
						}, {
							"key": "ach.micr",
							"title": "MICR"
						}, {
							"key": "ach.branchName",
							"title": "BRANCH_NAME"
						}, {
							"key": "ach.branchName",
							"title": "BANK_CITY"
						}, {
							"key": "ach.bankName",
							"title": "BANK_NAME"
						},
						// {
						// 	"key": "ach.mandateApplicationId",
						// 	"title": "MANDATE_APPLICATION_ID"
						// },
						{
							"key": "ach.mandateOpenDate",
							"title": "MANDATE_OPEN_DATE",
							"type": "date",
							"required": true
						}, {
							"key": "ach.achStartDate",
							"title": "ACH_START_DATE",
							"type": "date",
							"required": true
						}, {
							"key": "ach.maximumAmount",
							"title": "MAX_ACH_AMOUNT",
							"type": "string"
						}, {
							"key": "ach.frequency",
							"title": "FREQUENCY",
							"type": "select",
							"enumCode": "ach_frequency"
						}, {
							key: "ach.sponsorBankCode",
							type: "lov",
							autolov: true,
							title: "SPONSOR_BANK_CODE",
							required: true,
							bindMap: {

							},
							outputMap: {
								"sponsor_bank_code": "ach.sponsorBankCode",
								"utility_code": "ach.utilityCode"
							},
							searchHelper: formHelper,
							search: function(inputModel, form, model) {
								var deferred = $q.defer();
								Queries.getBankAccounts().then(
									function(res) {
										var newBody = [];
										for (var i = 0; i < res.body.length; i++) {
											if (res.body[i].sponsor_bank_code != null && res.body[i].utility_code != null) {
												newBody.push(res.body[i])
											}
										}
										res.body = newBody;
										deferred.resolve(res);
									},
									function(httpRes) {
										deferred.reject(res);
									}
								);
								return deferred.promise;
							},
							getListDisplayItem: function(item, index) {
								return [
									item.account_number,
									item.sponsor_bank_code + ', ' +
									item.utility_code
								];
							}
						}, {
							"key": "ach.utilityCode",
							"title": "UTILITY_CODE",
							"required": true
						}, {
							"key": "ach.phoneNo",
							"title": "MOBILE_PHONE"
						}, {
							"key": "ach.emailId",
							"title": "EMAIL"
						}, {
							"key": "ach.reference1",
							"title": "REFERENCE1",
							"type": "string"
						}, {
							"key": "ach.reference2",
							"title": "REFERENCE2",
							"type": "string"
						}
					]
				}]
			}, {
				"type": "actionbox",
				"items": [{
					"type": "submit",
					"title": "SUBMIT"
				}]
			}],

			schema: function() {
				return ACH.getSchema().$promise;
			},

			actions: {
				submit: function(model, form, formName) {
					PageHelper.clearErrors();
					PageHelper.showLoader();
					model.ach.bankCity = model.ach.branchName;
					ACH.create(model.ach, function(response) {
						PageHelper.hideLoader();
						PageHelper.showProgress("page-init", "ACH Registration Successful", 5000);
						if (model.isRejected) {
							model.achUpdateStatus = [];
							model.achUpdateStatus.push(model.ach);
							ACH.updateMandateStatus(model.achUpdateStatus).$promise.then(
								function(response) {
									PageHelper.hideLoader();
									PageHelper.showProgress("page-init", "Done.", 2000);
									$state.go("Page.Engine", {
										pageName: 'loans.individual.achpdc.ACHPDCQueue',
										pageId: null
									});
								},
								function(errorResponse) {
									PageHelper.hideLoader();
									PageHelper.showErrors(errorResponse);
								}
							).finally(function() {
								PageHelper.hideLoader();
							});
						} else {
							$state.go("Page.Engine", {
								pageName: 'loans.individual.achpdc.ACHPDCQueue',
								pageId: null
							});
						}

						//model.ach=response;
					}, function(errorResponse) {
						PageHelper.hideLoader();
						PageHelper.showErrors(errorResponse);
					});
				}
			}
		};
	}
]);

/*
About ACHRegistration.js
------------------------
To register or update ACH loan id. If the user exist, the Update module is called
else the create field is called(both update and create usessame API).
Both Update and Create points to same API.
The search API is called in iniialize to identify if loan account number exist. If exist, the details are obtained
and filled in the screen.

Methods
-------
Initialize : To decare the required model variables.
onClick : To download the Domand Form for the ACH Account
submit : To submit the created/updated ACH

Services
--------
ACH.search({ accountNumber: model.ach.accountId }) : Search for existance of Loan account Number
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHUpdate"), ["$log", "ACH", "IndividualLoan", "LoanAccount", "PageHelper", "irfProgressMessage", "SessionStore", "$state", "Utils", "$stateParams", "formHelper", "CustomerBankBranch", 'Queries', "$q",
	function($log, ACH, IndividualLoan, LoanAccount, PageHelper, irfProgressMessage, SessionStore, $state, Utils, $stateParams, formHelper, CustomerBankBranch, Queries, $q) {

		var branch = SessionStore.getBranch();
		var achAccountId;
		var checkACHExist = false;


		return {
			"type": "schema-form",
			"title": "ACH_REGISTRATION",
			"subTitle": "",

			initialize: function(model, form, formCtrl) {
				//Create Model ach
				model.ach = model.ach || {};
				model.achACHSearch = model.achACHSearch || [];
				//flag is to identify Create(false) or Update(true), and to update Submit Button Name

				if (!$stateParams.pageId) {
					$state.go("Page.Engine", {
						pageName: "loans.individual.achpdc.ACHMandateQueue",
						pageId: null
					});
					return;
				}

				if ($stateParams.pageId) {
					achAccountId = $stateParams.pageId;

					PageHelper.clearErrors();
					PageHelper.showLoader();
	
					ACH.search({
						accountNumber: $stateParams.pageId
					}).$promise.then(
						function(res) {
							$log.info("response: " + res);
						
							model.achACHSearch = res.body;	
							for (var i = 0; i < model.achACHSearch.length; i++) {
								if (model.achACHSearch[i].accountId == achAccountId) {
									model.ach = model.achACHSearch[i];
									model.ach.sponsorAccountCode = "Cash"; 
									checkACHExist = true;
								}
							}
							if(!checkACHExist){
								PageHelper.showProgress("page-init", "ACH Registration not done for the Account", 5000);
									$state.go("Page.Engine", {
										pageName: "loans.individual.achpdc.ACHMandateQueue",
										pageId: null,
										pageData: null
									});
							}
						},
						function(httpRes) {}

					).finally(function() {
						PageHelper.hideLoader();
					});
				}
			},
			offline: false,

			getOfflineDisplayItem: function(item, index) {},

			form: [{
				"type": "box",
				"notitle": true,
				"items": [{
					"type": "fieldset",
					"title": "LOAN_DETAILS",
					"items": [{
						"key": "ach.accountId",
						"title": "ACCOUNT_NUMBER",
						"readonly": true
					}, {
						"key": "ach.branch",
						"title": "BRANCH_NAME",
						"readonly": true
					}, {
						"key": "ach.centreCode",
						"title": "SPOKE",
						"readonly": true
					}, {
						"key": "ach.entityName",
						"title": "ENTITY_NAME",
						"readonly": true
					}, {
						"key": "ach.applicantName",
						"title": "APPLICANT_NAME",
						"readonly": true
					}, {
						"key": "ach.coApplicantName",
						"title": "COAPPLICANT_NAME",
						"readonly": true
					}]
				}, {
					"type": "fieldset",
					"title": "ACH_DETAILS",
					"items": [{
							"key": "ach.accountHolderName",
							"title": "ACCOUNT_HOLDER_NAME"
						}, {
							"key": "ach.accountType",
							"title": "ACCOUNT_TYPE",
							"type": "select",
							"enumCode": "ach_account_type"

						}, {
							key: "ach.bankAccountNumber",
							type: "lov",
							autolov: true,
							title: "BANK_ACCOUNT_NUMBER",
							bindMap: {},
							outputMap: {
								"account_number": "ach.bankAccountNumber",
								"ifsc_code": "ach.ifscCode"
							},
							searchHelper: formHelper,
							onSelect: function(result, model, arg1){
								CustomerBankBranch.search({
									'ifscCode': result.ifsc_code
								}).$promise.then(function(response)
								{
									console.log(response);
									if(response.body)
									{
										model.ach.bankName  = response.body[0].bankName;
										model.ach.branchName  = response.body[0].branchName;
										model.ach.micr  = response.body[0].micrCode;
									}
								},function(error)
								{

								});
							},
							search: function(inputModel, form, model) {
								var urn = [];
								for (var i = 0; i < model.achIndividualLoanSearch.loanCustomerRelations.length; i++) {
									urn.push(model.achIndividualLoanSearch.loanCustomerRelations[i].urn);
								}
								urn.push(model.achIndividualLoanSearch.urnNo);
								return Queries.getCustomersBankAccounts({
									customer_urns: urn,
									customer_ids: model.achIndividualLoanSearch.customerId
								});
							},
							getListDisplayItem: function(item, index) {
								return [
									'Account Number : ' + item.account_number,
									'Branch : ' + item.customer_bank_branch_name,
									'Bank : ' + item.customer_bank_name,
									'IFSC Code : ' + item.ifsc_code

								];
							}
						}, {
							"key": "ach.mandateStatus",
							"title": "ACCOUNT_TYPE",
							"type": "select",
							"enumCode": "ach_mandate_status"

						}, {
							"key": "ach.ifscCode",
							"title": "IFSC_CODE",
							"type": "lov",
							"inputMap": {
								"ifscCode": {
									"key": "ach.ifscCode"
								},
								"bankName": {
									"key": "ach.bankName"
								},
								"branchName": {
									"key": "ach.branchName"
								}
							},
							bindMap: {
							},
							outputMap: {
								"bankName": "ach.bankName",
								"branchName": "ach.branchName",
								"ifscCode": "ach.ifscCode",
								"micrCode": "ach.micr"
							},
							searchHelper: formHelper,

							search: function(inputModel, form) {
								$log.info("SessionStore.getBranch: " + SessionStore.getBranch());
								var promise = CustomerBankBranch.search({
									'bankName': inputModel.bankName,
									'ifscCode': inputModel.ifscCode,
									'branchName': inputModel.branchName
								}).$promise;
								return promise;
							},

							getListDisplayItem: function(data, index) {
								return [
									data.ifscCode,
									data.branchName,
									data.bankName,
									data.micrCode
								];
							}
						}, {
							"key": "ach.micr",
							"title": "MICR"
						}, {
							"key": "ach.branchName",
							"title": "BRANCH_NAME"
						}, {
							"key": "ach.branchName",
							"title": "BANK_CITY"
						}, {
							"key": "ach.bankName",
							"title": "BANK_NAME"
						},
						// {
						// 	"key": "ach.mandateApplicationId",
						// 	"title": "MANDATE_APPLICATION_ID"
						// }, 
						{
							"key": "ach.mandateOpenDate",
							"title": "MANDATE_OPEN_DATE",
							"type": "date",
							"required": true
						}, {
							"key": "ach.achStartDate",
							"title": "ACH_START_DATE",
							"type": "date",
							"required": true
						}, {
							"key": "ach.maximumAmount",
							"title": "MAX_ACH_AMOUNT",
							"type": "string"
						}, {
							"key": "ach.frequency",
							"title": "FREQUENCY",
							"type": "select",
							"enumCode": "ach_frequency"
						}, {
							key: "ach.sponsorBankCode",
							type: "lov",
							autolov: true,
							title: "SPONSOR_BANK_CODE",
							required: true,
							bindMap: {

							},
							outputMap: {
								"sponsor_bank_code": "ach.sponsorBankCode",
								"utility_code": "ach.utilityCode"
							},
							searchHelper: formHelper,
							search: function(inputModel, form, model) {
								var deferred = $q.defer();
								Queries.getBankAccounts().then(
									function(res) {
										var newBody = [];
										for (var i = 0; i < res.body.length; i++) {
											if (res.body[i].sponsor_bank_code != null && res.body[i].utility_code != null) {
												newBody.push(res.body[i])
											}
										}
										res.body = newBody;
										deferred.resolve(res);
									},
									function(httpRes) {
										deferred.reject(res);
									}
								);
								return deferred.promise;
							},
							getListDisplayItem: function(item, index) {
								return [
									item.account_number,
									item.sponsor_bank_code + ', ' +
									item.utility_code
								];
							}
						}, {
							"key": "ach.utilityCode",
							"title": "UTILITY_CODE",
							"required": true
						}, {
							"key": "ach.phoneNo",
							"title": "MOBILE_PHONE"
						}, {
							"key": "ach.emailId",
							"title": "EMAIL"
						}, {
							"key": "ach.reference1",
							"title": "REFERENCE1",
							"type": "string"
						}, {
							"key": "ach.reference2",
							"title": "REFERENCE2",
							"type": "string"
						}
					]
				}]
			}, {
				"type": "actionbox",
				"items": [{
					"type": "submit",
					"title": "UPDATE"
				}]
			}],

			schema: function() {
				return ACH.getSchema().$promise;
			},

			actions: {
				submit: function(model, form, formName) {
					PageHelper.clearErrors();
					PageHelper.showLoader();
					model.ach.bankCity = model.ach.branchName;
					ACH.create(model.ach, function(response) {
						PageHelper.hideLoader();
						PageHelper.showProgress("page-init", "ACH Update Successful", 5000);
						$state.go("Page.Engine", {
							pageName: 'loans.individual.achpdc.ACHMandateQueue',
							pageId: null
						});
						//model.ach=response;
					}, function(errorResponse) {
						PageHelper.hideLoader();
						PageHelper.showErrors(errorResponse);
					});
				}
			}
		};
	}
]);
/*
About PDCRegistration.js
------------------------
To register or update PDC loan id. If the user exist, the Update module is called
else the create field is called. 
The search API is called in iniialize to identify if loan account number exist. If exist, the details are obtained
and filled in the screen.
    
Methods
-------
Initialize : To decare the required model variables.
submit : To submit the created/updated ACH

Services
--------
PDC.getPDCCheque({accountNumber: model.pdc.accountId} : Search for existance of "PDC" Cheque types
PDC.getSecurityCheque({accountNumber: model.pdc.accountId} : Search for existance of "SECURITY" Cheque types
PDC.create : TO carete a new PDC account
PDC.update : TO update an existing PDC account
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.PDCRegistration"), ["$log", "PDC", "PageHelper", "IndividualLoan", "SessionStore", "$state", "CustomerBankBranch", 'formHelper', "$stateParams", "CustomerBankBranch", "LoanAccount", "Queries", "Utils",
    function($log, PDC, PageHelper, IndividualLoan, SessionStore, $state, CustomerBankBranch, formHelper, $stateParams, CustomerBankBranch, LoanAccount, Queries, Utils) {

        var branch = SessionStore.getBranch();
        var urnSearch = [];

        return {
            "type": "schema-form",
            "title": "PDC_REGISTRATION",
            "subTitle": "",

            initialize: function(model, form, formCtrl) {
                $log.info("PDC selection Page got initialized");
                model.pdc = model.pdc || {};
                //model to add new cheque details
                model.pdc.addCheque = model.pdc.addCheque || [];

                //model to view to existing cheque details
                model.pdc.existingPDCCheque = model.pdc.existingPDCCheque || [];
                model.pdc.existingSecurityCheque = model.pdc.existingSecurityCheque || [];
                model.pdc.totalCheques = model.pdc.totalCheques || [];
                model.pdc.cancelledSecurityCheque= model.pdc.cancelledSecurityCheque || [];

                //model to store pdc cheque types from PDC.getPDCCheque api
                model.pdcGetPDCType = model.pdcGetPDCType || {};
                model.pdcGetPDCType.pdcSummaryDTO = model.pdcGetPDCType.pdcSummaryDTO || [];

                model.pdcIndividualLoanSearch = model.pdcIndividualLoanSearch || [];


                //model to store individual cheques details from accountPDCWSDto array in PDC.getPDCCheque api
                model.pdc.pdcChequeDetails = model.pdc.pdcChequeDetails || [];
                model.pdc.securityChequeDetails = model.pdc.securityChequeDetails || [];
                //model to check if the creating pdc number already exist
                model.pdcNumberMatch = model.pdcNumberMatch || [];
                model.pdcChequeMatch = model.pdcChequeMatch || [];
                model.pdcChequeExceedLimit = model.pdcChequeExceedLimit || [];
                model.pdc.pdcFormMax = model.pdc.pdcFormMax || 0;
                model.repaymentLenght = model.repaymentLenght || 0;

                //false if PDC.get({accountId: model._pdc.loanId} fails (No date available), else update
                model.flag = false;
                model.confirmUpdate = false;
                model.confirmDelete = false;
                model.exceedCheque = false;
                model.isPDC = false;
                model.isSecurity = false;

                model.loanId = $stateParams.pageId;

                if ($stateParams.pageId || model._pdc) {

                    PageHelper.clearErrors();
                    PageHelper.showLoader();
                    console.log(formHelper.enum('branch_id'));

                    IndividualLoan.get({
                        id: $stateParams.pageId
                    }).$promise.then(
                        function(res) {
                            $log.info("response: " + res);
                            model.pdcIndividualLoanSearch = res;
                            model.pdc.loanAccountNo = model.pdcIndividualLoanSearch.accountNumber;
                            
                            model.pdc.customerName = model.pdcIndividualLoanSearch.customerId;
                            model.pdc.accountId = model.pdcIndividualLoanSearch.accountNumber;
                            model.pdc.centreId = model.pdcIndividualLoanSearch.loanCentre.centreId;
                            for (var i = 0; i < formHelper.enum('centre').data.length; i++) {
                                if (parseInt(formHelper.enum('centre').data[i].code) == parseInt(model.pdc.centreId)) {
                                    model.pdc.centreCode = formHelper.enum('centre').data[i].name;
                                }
                            }

                            for (var i = 0; i < formHelper.enum('branch_id').data.length; i++) {
                                if (parseInt(formHelper.enum('branch_id').data[i].code) == parseInt(model.pdcIndividualLoanSearch.branchId)) {
                                    model.pdc.branchName = formHelper.enum('branch_id').data[i].name;
                                    break;
                                }
                            }
                            if(model.pdcIndividualLoanSearch.applicant){
                            urnSearch.push(model.pdcIndividualLoanSearch.applicant)    
                            }
                            if(model.pdcIndividualLoanSearch.coBorrowerUrnNo){
                            urnSearch.push(model.pdcIndividualLoanSearch.coBorrowerUrnNo)    
                            }
                            if(model.pdcIndividualLoanSearch.urnNo){
                            urnSearch.push(model.pdcIndividualLoanSearch.urnNo)    
                            }
                             
                            Queries.getCustomerBasicDetails({
                                urns: urnSearch
                            }).then(
                                function(resQuery) {
                                    if(model.pdcIndividualLoanSearch.applicant){
                                        model.pdc.applicantName = resQuery.urns[model.pdcIndividualLoanSearch.applicant].first_name;    
                                    }
                                    if(model.pdcIndividualLoanSearch.urnNo){
                                        model.pdc.entityName = resQuery.urns[model.pdcIndividualLoanSearch.urnNo].first_name;    
                                    }
                                    
                                },
                                function(errQuery) {}
                            );
                            LoanAccount.get({
                                accountId: model.pdcIndividualLoanSearch.accountNumber
                            }).$promise.then(
                                function(response) {
                                    model.pdcLoanAccountSearch = response;
                                    if (model.pdcLoanAccountSearch.repaymentSchedule) {
                                        model.repaymentLenght = model.pdcLoanAccountSearch.repaymentSchedule.length
                                    }
                                },
                                function(error) {}
                            );

                            PDC.getSecurityCheque({
                                accountNumber: model.pdcIndividualLoanSearch.accountNumber
                            }).$promise.then(function(res) {
                                    model.pdcGetSecurityType = res;
                                    PageHelper.showProgress("page-init", "Done.", 2000);
                                    $log.info("PDC Type PDC GET RESP. : " + res);
                                    for (var i = 0; i < model.pdcGetSecurityType.body.length; i++) {
                                        if (model.pdc.accountId == model.pdcGetSecurityType.body[i].loanAccountNo) {
                                            model.pdc.securityChequeDetails.push(model.pdcGetSecurityType.body[i]);
                                        }
                                    }
                                    if (model.pdcGetSecurityType.body.length > 0){
                                        model.flag = true;                                        
                                    }

                                    for(var i =0 ; i < model.pdc.securityChequeDetails.length ; i++){
                                        model.pdc.securityChequeDetails[i].status = 'ACTIVE';
                                    }
                                },
                                function(resError) {
                                    $log.info("PDC GET Error : " + resError);
                                }
                            ).finally(function() {
                                PageHelper.hideLoader();
                            });



                            PDC.getPDCCheque({
                                accountNumber: model.pdcIndividualLoanSearch.accountNumber
                            }).$promise.then(function(res) {
                                    model.pdcGetPDCType = res;
                                    PageHelper.showProgress("page-init", "Done.", 2000);
                                    $log.info("PDC Type PDC GET RESP. : " + res);
                                    for (var i = 0; i < model.pdcGetPDCType.body.pdcSummaryDTO.length; i++) {
                                        if (model.pdc.accountId == model.pdcGetPDCType.body.pdcSummaryDTO[i].loanAccountNo) {

                                            // model.pdc.existingPDCCheque.loanAccountNo = model.pdcGetPDCType.body.pdcSummaryDTO[i].accountNumber;
                                            // model.pdc.existingPDCCheque.id = model.pdcGetPDCType.body.pdcSummaryDTO[i].loanId;
                                            // model.pdc.existingPDCCheque.push(model.pdcGetPDCType.body.pdcSummaryDTO[i]);
                                            if (model.pdcGetPDCType.body.pdcSummaryDTO[i].accountPDCWSDto) {
                                                for (var j = 0; j < model.pdcGetPDCType.body.pdcSummaryDTO[i].accountPDCWSDto.length; j++) {
                                                    $log.info(model.pdcGetPDCType.body.pdcSummaryDTO[i].accountPDCWSDto[j].pdcNum);
                                                    if (model.pdc.pdcFormMax < parseInt(model.pdcGetPDCType.body.pdcSummaryDTO[i].accountPDCWSDto[j].pdcNum)) {
                                                        model.pdc.pdcFormMax = parseInt(model.pdcGetPDCType.body.pdcSummaryDTO[i].accountPDCWSDto[j].pdcNum);
                                                    }
                                                    model.pdc.pdcChequeDetails.push(model.pdcGetPDCType.body.pdcSummaryDTO[i].accountPDCWSDto[j]);
                                                }
                                            }
                                        }
                                    }
                                    if (model.pdcGetPDCType.body.pdcSummaryDTO.length > 0)
                                        model.flag = true;

                                },
                                function(resError) {
                                    $log.info("PDC GET Error : " + resError);
                                }
                            ).finally(function() {
                                PageHelper.hideLoader();

                            });
                        },
                        function(httpRes) {
                            PageHelper.hideLoader();

                            // PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                            // PageHelper.showErrors(httpRes);
                            $log.info("ACH Search Response : " + httpRes);
                        }
                    );
                } else {
                    $state.go("Page.Engine", {
                        pageName: "loans.individual.Queue",
                        pageId: null
                    });
                }
            },
            offline: false,

            getOfflineDisplayItem: function(item, index) {

            },

            form: [{
                "type": "box",
                "notitle": true,
                "items": [{
                    "type": "fieldset",
                    "title": "LOAN_DETAILS",
                    "items": [{
                        "key": "pdc.loanAccountNo",
                        "title": "LOAN_ACCOUNT_NUMBER",
                        "readonly": true
                    }, {
                        "key": "pdc.branchName",
                        "title": "BRANCH_NAME",
                        "readonly": true
                    }, {
                        "key": "pdc.centreCode",
                        "title": "SPOKE",
                        "readonly": true
                    }, {
                        "key": "pdc.entityName",
                        "title": "ENTITY_NAME",
                        "readonly": true
                    }, {
                        "key": "pdc.applicantName",
                        "title": "APPLICANT_NAME",
                        "readonly": true
                    }]
                }, {
                    "type": "fieldset",
                    "title": "PDC_DETAILS",
                    "items": [{
                        "type": "array",
                        "key": "pdc.addCheque",
                        "startEmpty": true,
                        "title": "ADD_CHEQUE_DETAILS",
                        "items": [{
                        key: "pdc.addCheque[].customerBankAccountNo",
                        type: "lov",
                        autolov: true,
                        title: "CUSTOMER_BANK_ACCOUNT_NUMBER",
                        bindMap: {
                        },
                        outputMap: {
                            "account_number": "pdc.addCheque[arrayIndex].customerBankAccountNo",
                            "ifsc_code": "pdc.addCheque[arrayIndex].ifscCode"
                        },
                        onSelect: function(result, model, arg1){
                            CustomerBankBranch.search({
                                'ifscCode': result.ifsc_code
                            }).$promise.then(function(response)
                            {
                                if(response.body)
                                {
                                    model.pdc.addCheque[arg1.arrayIndex].bankName  = response.body[0].bankName;
                                    model.pdc.addCheque[arg1.arrayIndex].branchName  = response.body[0].branchName;
                                    model.pdc.addCheque[arg1.arrayIndex].micr  = response.body[0].micrCode;
                                }
                            },function(error)
                            {

                            });
                        },
                        searchHelper: formHelper,
                        search: function(inputModel, form, model) {
                            var urn = [];
                            for(var i =0; i <model.pdcIndividualLoanSearch.loanCustomerRelations.length; i++)
                            {
                                urn.push(model.pdcIndividualLoanSearch.loanCustomerRelations[i].urn);   
                            }
                            urn.push(model.pdcIndividualLoanSearch.urnNo);
                            return Queries.getCustomersBankAccounts({
                               customer_urns : urn,
                               customer_ids : model.pdcIndividualLoanSearch.customerId
                            });
                        },
                        getListDisplayItem: function(item, index) {
                            return [
                                'Account Number : ' +item.account_number,
                                'Branch : ' + item.customer_bank_branch_name,
                                'Bank : ' + item.customer_bank_name,
                                'IFSC Code : ' + item.ifsc_code

                            ];
                        }
                    }, {
                            "key": "pdc.addCheque[].ifscCode",
                            "title": "IFSC_CODE",
                            "type": "lov",
                            "lovonly": true,
                            "inputMap": {
                                "ifscCode": {
                                    "key": "pdc.addCheque[].ifscCode"
                                },
                                "bankName": {
                                    "key": "pdc.addCheque[].bankName"
                                },
                                "branchName": {
                                    "key": "pdc.addCheque[].branchName"
                                }
                            },

                            outputMap: {
                                "bankName": "pdc.addCheque[arrayIndex].bankName",
                                "branchName": "pdc.addCheque[arrayIndex].branchName",
                                "ifscCode": "pdc.addCheque[arrayIndex].ifscCode"
                            },

                            searchHelper: formHelper,
                            search: function(inputModel, form) {
                                $log.info("SessionStore.getBranch: " + SessionStore.getBranch());
                                var promise = CustomerBankBranch.search({
                                    'bankName': inputModel.bankName,
                                    'ifscCode': inputModel.ifscCode,
                                    'branchName': inputModel.branchName
                                }).$promise;
                                return promise;
                            },

                            getListDisplayItem: function(data, index) {
                                return [
                                    data.ifscCode,
                                    data.branchName,
                                    data.bankName
                                ];
                            }


                        }, {
                            "key": "pdc.addCheque[].bankName",
                            "title": "BANK_NAME"
                        }, {
                            "key": "pdc.addCheque[].branchName",
                            "title": "BRANCH_NAME"
                        }, {
                            "key": "pdc.addCheque[].chequeType",
                            "title": "CHEQUE_TYPE",
                            "type": "select",
                            "enumCode": "pdc_cheque_type"
                        }, {
                            "key": "pdc.addCheque[].numberOfCheque",
                            "title": "NUMBER_OF_CHEQUE",
                            "type": "Number"
                        }, {
                            "key": "pdc.addCheque[].chequeNoFrom",
                            "title": "CHEQUE_START_NUMBER",
                            "type": "string",
                            "placeholder": "Enter 6 digit Cheque Number",
                        }, {
                            "key": "pdc.addCheque[].pdcFrom",
                            "title": "EMI_SEQUENCE_NUMBER",
                            "type": "Number",
                            "condition": "model.pdc.addCheque[arrayIndex].chequeType == 'PDC'"
                        }]
                    }, {
                        "type": "actionbox",
                        "condition": "!model.flag",
                        "items": [{
                            "type": "submit",
                            "title": "SUBMIT",

                        }]
                    }, {
                        "type": "actionbox",
                        "condition": "model.flag",
                        "items": [{
                            "type": "submit",
                            "title": "UPDATE",
                        }]
                    }]
                }]
            }, {
                "type": "box",
                "notitle": true,
                "items": [{
                    "type": "fieldset",
                    "title": "SECURITY_CHEQUE_DETAILS",
                    "items": [{
                        "type": "array",
                        "key": "pdc.securityChequeDetails",
                        "add": null,
                        "startEmpty": true,
                        "remove": null,
                        "title": "SECURITY_CHEQUE_DETAILS",
                        "titleExpr": "model.pdc.securityChequeDetails[arrayIndex].chequeNoFrom + ' - ' + model.pdc.securityChequeDetails[arrayIndex].numberOfCheque",
                        "items": [{
                            "key": "pdc.securityChequeDetails[].customerBankAccountNo",
                            "title": "BANK_ACCOUNT_NUMBER",
                            "readonly": true
                        }, {
                            "key": "pdc.securityChequeDetails[].chequeNoFrom",
                            "title": "CHEQUE_NUMBER_FROM",
                            "readonly": true
                        }, {
                            "key": "pdc.securityChequeDetails[].numberOfCheque",
                            "title": "NUMBER_OF_CHEQUE",
                            "readonly": true
                        }, {
                            "key": "pdc.securityChequeDetails[].bankName",
                            "title": "BANK_NAME",
                            "type": "string",
                            "readonly": true
                        }, {
                            "key": "pdc.securityChequeDetails[].ifscCode",
                            "title": "IFSC_CODE",
                            "readonly": true
                        },{
                            "key": "pdc.securityChequeDetails[].status",
                            "title": "CHEQUE_STATUS",
                            'required': true,
                            "type": "select",
                            "titleMap": {
                            "ACTIVE": "ACTIVE",
                            "CANCELLED": "CANCELLED"
                            }
                        }, {
                            "key": "pdc.securityChequeDetails[].rejectReason",
                            "title": "REJECTED_REASON",
                            "condition": "model.pdc.securityChequeDetails[arrayIndex].status == 'CANCELLED'",
                            "required": true
                        }]
                    }]
                }, {
                    "type": "fieldset",
                    "title": "PDC_CHEQUE_LEAVES",
                    "items": [{
                        "type": "array",
                        "key": "pdc.pdcChequeDetails",
                        "add": null,
                        "startEmpty": true,
                        "remove": null,
                        "title": "CHEQUE_DETAILS",
                        "titleExpr": "model.pdc.pdcChequeDetails[arrayIndex].chequeNo + ' - ' + model.pdc.pdcChequeDetails[arrayIndex].pdcNum",
                        "items": [{
                            "key": "pdc.pdcChequeDetails[].chequeNo",
                            "title": "CHEQUE_NUMBER",
                            "readonly": true
                        }, {
                            "key": "pdc.pdcChequeDetails[].amount",
                            "title": "AMOUNT",
                            "type": "string",
                            "readonly": true
                        }, {
                            "key": "pdc.pdcChequeDetails[].chequeDate",
                            "title": "CHEQUE_DATE",
                            "readonly": true
                        }, {
                            "key": "pdc.pdcChequeDetails[].pdcNum",
                            "title": "EMI_SEQUENCE_NUMBER",
                            "readonly": true
                        }]
                    }]
                }]
            }],

            schema: function() {
                return PDC.getSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {
                    $log.info("Inside submit()");
                    //add the newly addeed cheque details
                    model.pdcNumberMatch = [];
                    model.pdcChequeMatch = [];
                    model.pdcChequeExceedLimit = [];
                    model.exceedCheque = false;
                    model.pdc.cancelledSecurityCheque = [];
                    model.pdc.cancelledSecurityChequeNumber = [];
                    model.confirmDelete = true;
                    //check for cancelled security cheque
                    for (var i = 0; i < model.pdc.securityChequeDetails.length; i++) {
                        if(model.pdc.securityChequeDetails[i].status == 'CANCELLED') {
                           model.pdc.cancelledSecurityCheque.push(model.pdc.securityChequeDetails[i]); 
                           model.pdc.cancelledSecurityChequeNumber.push(model.pdc.securityChequeDetails[i].chequeNoFrom);
                        } 
                    }

                    //check if check count is less than no. of repayment

                    for (var i = 0; i < model.pdc.addCheque.length; i++) {
                        if ((model.pdc.addCheque[i].chequeType == "PDC") && (model.pdc.addCheque[i].pdcFrom + model.pdc.addCheque[i].numberOfCheque - 1) > model.repaymentLenght) {
                            model.pdcChequeExceedLimit.push(model.pdc.addCheque[i]);
                        }
                    }

                    //check for the existance of PDC Number 
                    for (var i = 0; i < model.pdc.pdcChequeDetails.length; i++) {
                        for (var j = 0; j < model.pdc.addCheque.length; j++) {
                            if (model.pdc.addCheque[j].chequeType == "PDC") {
                                for (var k = model.pdc.addCheque[j].pdcFrom; k < (model.pdc.addCheque[j].pdcFrom + model.pdc.addCheque[j].numberOfCheque); k++) {
                                    if (model.pdc.pdcChequeDetails[i].pdcNum == k) {
                                        model.pdcNumberMatch.push(model.pdc.pdcChequeDetails[i].pdcNum);
                                    }
                                }
                            }
                        }
                    }
                    //Check for the existance of the cheque number
                    for (var i = 0; i < model.pdc.addCheque.length; i++) {
                        for (var j = parseInt(model.pdc.addCheque[i].chequeNoFrom); j < (parseInt(model.pdc.addCheque[i].chequeNoFrom) + parseInt(model.pdc.addCheque[i].numberOfCheque)); j++) {
                            for (var k = 0; k < model.pdc.pdcChequeDetails.length; k++) {
                                if (j == parseInt(model.pdc.pdcChequeDetails[k].chequeNo)) {
                                    model.pdcChequeMatch.push(model.pdc.pdcChequeDetails[i].chequeNo);
                                }
                            }
                        }
                    }

                    if (model.pdcChequeExceedLimit.length > 0) {
                        PageHelper.showProgress("page-init", "Cheque Number Count exceeds Number of Repayment ( " + model.repaymentLenght + " )", 3000);
                    } else if (model.pdcChequeMatch.length > 0) {
                        alert('1. The Following CHEQUE Numbers already exist: \n' + model.pdcChequeMatch.join(", ") + '\n');
                    } else {
                        if (model.pdcNumberMatch) {
                            if (model.pdcNumberMatch.length > 0) {

                                var confirmUpdate = confirm('The Following PDC Numbers already exist: \n' + model.pdcNumberMatch.join(", ") + "\nWould you like to replace them");
                                if (confirmUpdate == true) {
                                    var confirmUpdateAgain = confirm('Are you sure?');
                                    if (confirmUpdateAgain == true) {
                                        model.confirmUpdate = true;
                                    }
                                }

                            }

                            if (model.pdc.cancelledSecurityChequeNumber.length > 0) {

                                var confirmDelete = confirm('The Following Security Cheque(s) will be removed: \n' + model.pdc.cancelledSecurityChequeNumber.join(", ") + "\nWould you like to remove them?");
                                if (confirmDelete == true) {
                                    var confirmDeleteAgain = confirm('Are you sure?');
                                    if (confirmDeleteAgain == true) {
                                        model.confirmDelete = true;
                                    }
                                }

                            }
                            if (((model.pdcNumberMatch && model.confirmUpdate == true) || model.pdcNumberMatch.length == 0) || 
                                ((model.pdc.cancelledSecurityChequeNumber && model.confirmDelete == true) || model.pdc.cancelledSecurityChequeNumber.length == 0)) {
                                for (var bankCount = 0; bankCount < model.pdc.addCheque.length; bankCount++) {
                                    model.pdc.addCheque[bankCount].loanAccountNo = model.pdc.loanAccountNo;
                                    model.pdc.addCheque[bankCount].id = model.pdc.id;
                                    model.pdc.addCheque[bankCount].bankAccountNo = model.pdc.bankAccountNo;
                                    //model.pdc.addCheque[bankCount].chequeNoFrom = parseInt(model.pdc.addCheque[bankCount].chequeNoFrom); 
                                    model.pdc.addCheque[bankCount].branchName = model.pdc.addCheque[bankCount].branchName;
                                    if (model.pdc.addCheque[bankCount].chequeType == "PDC") {
                                        if (model.pdc.addCheque[bankCount].pdcFrom > 0 && model.pdc.addCheque[bankCount].pdcFrom < model.pdc.pdcFormMax) {
                                            var pdcMax = model.pdc.addCheque[bankCount].pdcFrom;
                                            model.pdc.addCheque[bankCount].pdcFrom = pdcMax;
                                            //model.pdc.pdcFormMax =model.pdc.pdcFormMax + model.pdc.addCheque[bankCount].numberOfCheque;
                                            pdcMax = model.pdc.addCheque[bankCount].numberOfCheque + model.pdc.addCheque[bankCount].pdcFrom;
                                            if (pdcMax > model.pdc.addCheque[bankCount].pdcFrom) {
                                                model.pdc.pdcFormMax = pdcMax;
                                            }

                                        } else {
                                            var pdcMax = model.pdc.pdcFormMax + 1;
                                            model.pdc.addCheque[bankCount].pdcFrom = pdcMax;
                                            model.pdc.pdcFormMax = model.pdc.pdcFormMax + model.pdc.addCheque[bankCount].numberOfCheque;

                                        }
                                    } else if(model.pdc.addCheque[bankCount].chequeType == "SECURITY")
                                    {
                                        for(var securityNumber = parseInt(model.pdc.addCheque[bankCount].chequeNoFrom); securityNumber < parseInt(model.pdc.addCheque[bankCount].chequeNoFrom) + parseInt(model.pdc.addCheque[bankCount].numberOfCheque); securityNumber++) {
                                            var currentCheque = "" + securityNumber;
                                            var padZeros = "000000";
                                            var securityChequeNumber = padZeros.substring(0, padZeros.length - currentCheque.length) + currentCheque;
                                            
                                            model.pdc.totalCheques.push({
                                                'customerBankAccountNo':model.pdc.addCheque[bankCount].customerBankAccountNo,
                                                'ifscCode':model.pdc.addCheque[bankCount].ifscCode,
                                                'bankName':model.pdc.addCheque[bankCount].bankName,
                                                'branchName':model.pdc.addCheque[bankCount].branchName,
                                                'chequeType':model.pdc.addCheque[bankCount].chequeType,
                                                'numberOfCheque':1,
                                                'chequeNoFrom':securityChequeNumber,
                                                'loanAccountNo': model.pdc.loanAccountNo,
                                                'micr':model.pdc.addCheque[bankCount].micr
                                            })
                                        }
                                    }
                                }
                                for(var finalCount = 0; finalCount < model.pdc.addCheque.length; finalCount++){
                                    if(model.pdc.addCheque[finalCount].chequeType == "PDC"){
                                        model.pdc.totalCheques.push(model.pdc.addCheque[finalCount]);    
                                    }
                                }
                                if(model.pdc.totalCheques.length > 0) {
                                    PageHelper.clearErrors();
                                    PageHelper.showLoader();
                                    PDC.update(model.pdc.totalCheques, function(response) {
                                        PageHelper.hideLoader();
                                        $state.reload();
                                    }, function(errorResponse) {
                                        PageHelper.hideLoader();
                                        model.pdc.pdcFormMax = 0;
                                        PageHelper.showErrors(errorResponse);
                                    });
                                }
                                
                                if(model.confirmDelete){
                                    for(var cancelledCheque = 0; cancelledCheque< model.pdc.cancelledSecurityCheque.length; cancelledCheque++)
                                    {
                                        model.pdc.securityChequeDetails[cancelledCheque].accountId = model.pdc.securityChequeDetails[cancelledCheque].loanAccountNo;
                                        model.pdc.securityChequeDetails[cancelledCheque].chequeNo = model.pdc.securityChequeDetails[cancelledCheque].chequeNoFrom;
                                        model.pdc.securityChequeDetails[cancelledCheque].bankAccountNo = model.pdc.securityChequeDetails[cancelledCheque].customerBankAccountNo;
                                        model.pdc.securityChequeDetails[cancelledCheque].rejectionDate = Utils.getCurrentDate();
                                    }
                                          
                                    PageHelper.clearErrors();
                                    PageHelper.showLoader();
                                    PDC.deleteSecurity(model.pdc.cancelledSecurityCheque, function(response) {
                                    PageHelper.hideLoader();
                                    $state.reload();
                                    }, function(errorResponse) {
                                        PageHelper.hideLoader();
                                        PageHelper.showErrors(errorResponse);
                                    });   
                                }
                                
                            }
                        }
                    }

                }
            }
        };
    }
]);
/*
About ACHMandateQueue.js
-------------------------
1. Search page that displays all the ACH Loan Accounts based on the sort criteria.
2. To update ACH Account
3. To Dounload ACH Mandate Registration file.

Methods
-------
Initialize : To decare the required model variables.
getResultsPromise : TO return the result of ACH.search.
getListItem : Values to display from search result
getActions : Menu icon to Update ACH or to Download Mandate.

Services
--------
ACH.search : To get all the ACH Accounts.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHMandateQueue"), ["$log", "formHelper", "entityManager", "ACH", "$state", "SessionStore", "Utils",
	function($log, formHelper, EntityManager, ACH, $state, SessionStore, Utils) {

		var branch = SessionStore.getBranch();

		return {
			"type": "search-list",
			"title": "ACH_MANDATE_QUEUE",
			"subTitle": "",

			initialize: function(model, form, formCtrl) {
				model.branch = branch;
				$log.info("search-list sample got initialized");
			},

			definition: {
				title: "SEARCH_CUSTOMERS",
				searchForm: [
					"*"
				],
				searchSchema: {
					"type": 'object',
					"title": 'SEARCH_OPTIONS',
					"properties": {
						"accountNumber": {
							"title": "ACCOUNT_NUMBER",
							"type": "string"
						},
						
						"bankName": {
							"title": "BANK_NAME",
							"type": "string"
						}
					}
					//"required":["branch"]
				},

				getSearchFormHelper: function() {
					return formHelper;
				},

				getResultsPromise: function(searchOptions, pageOpts) { /* Should return the Promise */

					var promise = ACH.search({
						'accountNumber': searchOptions.accountNumber,
						'mandateStatus': searchOptions.mandateStatus,
						'bankName': searchOptions.bankName
					}).$promise;

					return promise;
				},

				paginationOptions: {
					"viewMode": "page",
					"getItemsPerPage": function(response, headers) {
						return 20;
					},
					"getTotalItemsCount": function(response, headers) {
						return headers['x-total-count']
					}
				},

				listOptions: {
					expandable: true,
					itemCallback: function(item, index) {},
					getItems: function(response, headers) {
						if (response != null && response.length && response.length != 0) {
							return response;
						}
						return [];
					},
					getListItem: function(item) {
						return [

							"{{'ACCOUNT_NUMBER'|translate}} : " + item.accountId,
							"{{'CUSTOMER_NAME'|translate}} : " + item.accountHolderName,
							"{{'LOAN_AMOUNT'|translate}} : " + item.maximumAmount,
							"{{'REGISTRATION_STATUS'|translate}} : " + item.registrationStatus
						]
					},
					getActions: function() {
						return [{
							name: "ACH_MANDATE_FORM_DOWNLOAD",
							desc: "",
							icon: "fa fa-download",
							fn: function(item, index) {
								window.open("http://115.113.193.49:8080/formsKinara/formPrint.jsp?form_name=ach_loan&record_id=" + item.accountId);
							},
							isApplicable: function(item, index) {
									return true;
							}
						}];
					}
				}
			}
		};
	}
]);
/*
About ACHClearingCollection.js
------------------------------
1. To download the demand list with date criteria
2. To upload the demand list and change the status as "MARK AS PAID"

Methods
-------
Initialize : To decare the required model variables.
onClick : To download the Domand List based on date criteria and to call "ACH.getDemandList" service
onChange : To select/unselect all demands listed in array.
customHandle : To upload ACH files(Excel).

Services
--------
ACH.getDemandList : To get all the demands for the entered date. And all the branch ID's are
                    parsed so as to get all the demands for the corresponding date.
ACH.achDemandListUpload : To upload the selected file.
ACH.bulkRepay : To repay all the demands marked. The req. is send as JSON Array.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHClearingCollection"), ["$log", "SessionStore", 'Utils', 'ACH', 'AuthTokenHelper', 'PageHelper', 'formHelper', '$filter', '$q', '$state',
    function($log, SessionStore, Utils, ACH, AuthTokenHelper, PageHelper, formHelper, $filter, $q, $state) {

        var allUpdateDemands = [];
        var branchIDArray = [];
        return {
            "type": "schema-form",
            "title": "ACH_COLLECTIONS",
            "subTitle": Utils.getCurrentDate(),

            initialize: function(model, form, formCtrl) {
                //alert($filter('date')(new Date(), 'dd/MM/yyyy'));
                //alert(moment(new Date()).format("YYYY-MM-DD"));
                //alert(Utils.getCurrentDate());
                allUpdateDemands = [];
                model.achSearch = model.achSearch || {};
                model.authToken = AuthTokenHelper.getAuthData().access_token;
                model.userLogin = SessionStore.getLoginname();
                model.achCollections = model.achCollections || {};
                model.showUpdateSection = false;
                model.searchAccountId = false;
                model.searchDemarkAccountId = false;
                model.achDemand = model.achDemand || {};
                model.achDemand.demarkList = model.achDemand.demarkList || [];
                model.achDemand.updateDemand = model.achDemand.updateDemand || [];
                model.achCollections.demandDate = model.achCollections.demandDate || Utils.getCurrentDate();
                console.log(formHelper.enum('branch_id'));
                for (var i = 0; i < formHelper.enum('branch_id').data.length; i++) {
                    branchIDArray.push(parseInt(formHelper.enum('branch_id').data[i].code));
                }
            },
            form: [{
                "type": "box",
                "title": "UPDATE_ACH_DEMANDS",
                "items": [{
                    "key": "ach.achDemandListDate",
                    "title": "INSTALLMENT_DATE",
                    "type": "date"
                }, {
                    "type": "button",
                    "title": "SEARCH_DEMAND",
                    "onClick": function(model, formCtrl, form) {
                        PageHelper.clearErrors();
                        if (!model.ach || !model.ach.achDemandListDate) {
                            PageHelper.setError({
                                'message': 'Installment Date is mandatory.'
                            });
                            return false;
                        }
                        model.showUpdateSection = false;
                        PageHelper.showLoader();
                        ACH.getDemandList({
                            demandDate: model.ach.achDemandListDate,
                            branchId: branchIDArray // TODO should it be hardcoded?
                        }).$promise.then(function(res) {
                                PageHelper.hideLoader();
                                model.achSearch = res;
                                if (model.achSearch.body.length) {
                                    model.showUpdateSection = true;
                                    model.chosenRecordCountText = model.achSearch.body.length + ' Record(s) found.';
                                } else {
                                    model.showUpdateSection = false;
                                    model.chosenRecordCountText = 'No Records found..!';
                                }
                                // Clear the existing array whenever the user clicks on download,
                                // to prevent the value getting appended to the existing
                                allUpdateDemands = [];
                                for (var i = 0; i < model.achSearch.body.length; i++) {
                                    model.achSearch.body[i].repaymentType = "ACH";
                                    // model.achSearch.body[i].accountId = model.achSearch.body[i].accountId;
                                    model.achSearch.body[i].amount = parseInt(model.achSearch.body[i].amount3);
                                    model.achSearch.body[i].repaymentDate = Utils.convertJSONTimestampToDate(model.achSearch.body[i].valueDate);
                                    model.achSearch.body[i].check = true;
                                    allUpdateDemands.push(model.achSearch.body[i]);
                                }
                            },
                            function(httpRes) {
                                PageHelper.hideLoader();
                                PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                                PageHelper.showErrors(httpRes);
                                $log.info("ACH Search Response : " + httpRes);
                            });
                    }
                }, {
                    "type": "help",
                    "helpExpr": "model.chosenRecordCountText"
                }]
            }, {
                "type": "box",
                "condition": "model.showUpdateSection",
                "title": "SEARCH_DEMANDS_TO_DEMARK",
                "items": [{
                    "key": "achDemand.chosenToMark.accountId",
                    "title": "ACCOUNT_NUMBER",
                    "type": "lov",
                    "lovonly": true,
                    "inputMap": {
                        "loanAccountNumber": "ach.loanAccountNumber"
                    },
                    "searchHelper": formHelper,
                    "search": function(model, formCtrl, form) {
                        var filteredDemandList = $filter('filter')(allUpdateDemands, {
                                    accountId: model.loanAccountNumber
                                });
                                return $q.resolve({
                                    "header": {
                                        "x-total-count": filteredDemandList.length
                                    },
                                    "body": filteredDemandList
                                });
                    },
                    "getListDisplayItem": function(item, index) {
                        return [
                            '{{"ACCOUNT_NUMBER"|translate}}: ' + item.accountId,
                            '<i class="fa fa-rupee"></i> ' + item.amount,
                            '{{"ENTITY_NAME"|translate}}: ' + item.customerName
                        ];
                    },
                    "onSelect": function(result, model, context) {
                        model.searchAccountId = false;
                        if (!model.achDemand.demarkList){
                            model.achDemand.demarkList = [];
                        }
                        for(var i = 0; i < model.achDemand.demarkList.length; i++)
                        {
                            if(result.accountId == model.achDemand.demarkList[i].accountId)
                            {
                                model.searchAccountId = true;
                                PageHelper.showProgress("page-init", "ACCOUNT ID exist in Demarked Demand", 5000);
                            }
                        }
                        if(model.searchAccountId == false) {
                            model.achDemand.chosenToMark = result;
                        }
                    }
                },
                //  {
                //     "key": "achDemand.chosenToMark.transactionDate",
                //     "title": "TRANSACTION_DATE",
                //     "type": "date"
                // }, {
                //     "key": "achDemand.chosenToMark.repaymentDate",
                //     "title": "REPAYMENT_DATE",
                //     "type": "date"
                // },
                {
                    "key": "achDemand.chosenToMark.amount",
                    "title": "LOAN_AMOUNT",
                    "type": "number",
                    "readonly": true
                }, {
                    "key": "achDemand.chosenToMark.demark",
                    "title": "MARK_AS_UNPAID",
                    "condition": "model.achDemand.chosenToMark.accountId",
                    "type": "button",
                    "schema": {
                        "default": false
                    },
                    "onClick": function(modelValue, form, model) {
                        modelValue.searchDemarkAccountId = false;
                        if(modelValue.achDemand.demarkList)
                        {
                            for (var i = 0; i < modelValue.achDemand.demarkList.length; i++) {
                                    if(modelValue.achDemand.chosenToMark.accountId == modelValue.achDemand.demarkList[i].accountId)
                                    {
                                        modelValue.searchDemarkAccountId = true;
                                    }
                                }
                            if(!modelValue.searchDemarkAccountId)
                            {
                                modelValue.achDemand.chosenToMark.check = false;
                                modelValue.achDemand.demarkList.push(modelValue.achDemand.chosenToMark);
                                modelValue.achDemand.chosenToMark = null;
                            }
                        }

                        // modelValue.achDemand.chosenToMark.accountId = ""


                        // if (!modelValue) {
                        //     if (model.achDemand.demarkList.length > 0) {
                        //         for (var i = 0; i < model.achDemand.demarkList.length; i++) {
                        //             if (model.achDemand.demarkList[i].accountId == model.achDemand.chosenToMark.accountId) {
                        //                 model.achDemand.demarkList[i].check = model.achDemand.chosenToMark.check;
                        //             } else {
                        //                 model.achDemand.demarkList.push(model.achDemand.chosenToMark);
                        //             }
                        //         }
                        //     } else {
                        //         model.achDemand.demarkList.push(model.achDemand.chosenToMark);
                        //     }

                        // } else {
                        //     for (var i = 0; i < model.achDemand.demarkList.length; i++) {
                        //         if (model.achDemand.demarkList[i].accountId == model.achDemand.chosenToMark.accountId) {
                        //             model.achDemand.demarkList.splice(i, 1);
                        //         }
                        //     }
                        // }
                    }
                }]
            }, {
                "type": "box",
                "condition": "model.showUpdateSection",
                "title": "DEMARKED_DEMANDS",
                "items": [{
                    "type": "array",
                    "key": "achDemand.demarkList",
                    //"condition": "!model.achDemand.demarkList[arrayIndex].check",
                    "add": null,
                    "startEmpty": true,
                    "remove": null,
                    "title": "CHEQUE_DETAILS",
                    "titleExpr": "(model.achDemand.demarkList[arrayIndex].check?'⚫ ':'⚪ ') + model.achDemand.demarkList[arrayIndex].accountId + ' - ' + model.achDemand.demarkList[arrayIndex].amount",
                    "items": [{
                        "key": "achDemand.demarkList[].accountId",
                        //"condition": "!model.achDemand.demarkList[arrayIndex].check",
                        "title": "ACCOUNT_NUMBER",
                        "readonly": true
                    },
                    //  {
                    //     "key": "achDemand.demarkList[].transactionDate",
                    //     //"condition": "!model.achDemand.demarkList[arrayIndex].check",
                    //     "title": "TRANSACTION_DATE",
                    //     "type": "date"
                    // }, {
                    //     "key": "achDemand.demarkList[].repaymentDate",
                    //     //"condition": "!model.achDemand.demarkList[arrayIndex].check",
                    //     "title": "REPAYMENT_DATE",
                    //     "type": "date"
                    // },
                    {
                        "key": "achDemand.demarkList[].amount",
                        //"condition": "!model.achDemand.demarkList[arrayIndex].check",
                        "title": "LOAN_AMOUNT",
                        "type": "number",
                        "readonly": true
                    }, {
                        "key": "achDemand.demarkList[].demark",
                        //"condition": "!model.achDemand.demarkList[arrayIndex].check",
                        "title": "MARK_AS_PAID",
                        "type": "button",
                        "schema": {
                            "default": false
                        },
                        "onClick": function(modelValue, form, modelIndex) {
                            modelValue.achDemand.demarkList[modelIndex.arrayIndex].check = true;
                            modelValue.achDemand.demarkList.splice(modelIndex.arrayIndex, 1);

                        }
                    }]
                }]
            },{
                "type": "actionbox",
                "condition": "model.showUpdateSection",
                "items": [{
                    "type": "button",
                    "notitle": true,
                    "condition": "model.showUpdateSection",
                    "title": "SUBMIT_TO_MARK",
                    "onClick": "actions.submit(model, formCtrl)"
                }]
            }],
            schema: function() {
                return ACH.getSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {
                    PageHelper.clearErrors();
                    model.achDemand.updateDemand = [];
                    for (var i = 0; i < allUpdateDemands.length; i++) {
                        var transName = "Scheduled Demand";
                        if (allUpdateDemands[i].check == true) {
                            if ((new Date(allUpdateDemands[i].valueDate).getTime()) == (new Date(allUpdateDemands[i].repaymentDate).getTime())) {
                                transName = "Scheduled Demand";
                            } else if ((new Date(allUpdateDemands[i].valueDate).getTime()) > (new Date(allUpdateDemands[i].repaymentDate).getTime())) {
                                transName = "Prepayment";
                            } else if ((new Date(allUpdateDemands[i].valueDate).getTime()) < (new Date(allUpdateDemands[i].repaymentDate).getTime())) {
                                transName = "Scheduled Demand";
                            }
                            model.achDemand.updateDemand.push({
                                repaymentDate: allUpdateDemands[i].repaymentDate,
                                accountNumber: allUpdateDemands[i].accountId,
                                amount: allUpdateDemands[i].amount,
                                transactionName: transName,
                                productCode: allUpdateDemands[i].param1,
                                instrument: "ACH",
                                valueDate: allUpdateDemands[i].valueDate,
                                urnNo: allUpdateDemands[i].customerName
                            });
                        }
                    }
                    if(model.achDemand.updateDemand.length > 0)
                    {
                        PageHelper.clearErrors();
                        PageHelper.showLoader();
                        ACH.bulkRepay(model.achDemand.updateDemand).$promise.then(function(response) {
                            PageHelper.showProgress("page-init", "Done.", 2000);
                            $state.reload();
                            // allUpdateDemands = [];
                            // model.showUpdateSection = false;
                        }, function(errorResponse) {
                            PageHelper.showErrors(errorResponse);
                        }).finally(function() {
                            PageHelper.hideLoader();
                        });
                    } else {
                        PageHelper.showProgress("page-init", "No account seected for repayment", 5000);
                    }
                }
            }
        };
    }
]);

/*
About ACHClearingCollection.js
------------------------------
1. To download the demand list with date criteria
2. To upload the demand list and change the status as "MARK AS PAID"

Methods
-------
Initialize : To decare the required model variables.
onClick : To download the Domand List based on date criteria and to call "ACH.getDemandList" service
onChange : To select/unselect all demands listed in array.
customHandle : To upload ACH files(Excel).

Services
--------
ACH.getDemandList : To get all the demands for the entered date. And all the branch ID's are 
                    parsed so as to get all the demands for the corresponding date.
ACH.achDemandListUpload : To upload the selected file.
ACH.bulkRepay : To repay all the demands marked. The req. is send as JSON Array.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHDemandDownload"), ["$log", "SessionStore", 'Utils', 'ACH', 'AuthTokenHelper', 'PageHelper', 'formHelper', '$filter', '$q',
    function($log, SessionStore, Utils, ACH, AuthTokenHelper, PageHelper, formHelper, $filter, $q) {
        var branchIDArray = [];
        return {
            "type": "schema-form",
            "title": "ACH_DEMANDS_DOWNLOAD_UPLOAD",
            "subTitle": Utils.getCurrentDate(),

            initialize: function(model, form, formCtrl) {
                model.authToken = AuthTokenHelper.getAuthData().access_token;
                model.userLogin = SessionStore.getLoginname();
                model.achCollections = model.achCollections || {};
                model.achCollections.demandDate = model.achCollections.demandDate || Utils.getCurrentDate();
                //model.achDemand.updateDemand = model.achDemand.updateDemand || [];
                for (var i = 0; i < formHelper.enum('branch_id').data.length; i++) {
                    branchIDArray.push(parseInt(formHelper.enum('branch_id').data[i].code));
                }

            },
            form: [{
                "type": "box",
                "title": "ACH_INPUT",
                "items": [{
                    "type": "fieldset",
                    "title": "DOWNLOAD_ACH_INPUT",
                    "items": [{
                        "key": "achCollections.demandDate",
                        "title": "INSTALLMENT_DATE",
                        "type": "date"
                    }, {
                        "title": "DOWNLOAD",
                        "htmlClass": "btn-block",
                        "icon": "fa fa-download",
                        "type": "button",
                        "notitle": true,
                        "readonly": false,
                        "onClick": function(model, formCtrl, form, $event) {
                            if (!model.achCollections.demandDate) {
                                PageHelper.setError({
                                    'message': 'Installment Date is mandatory.'
                                });
                                return false;
                            }
                            PageHelper.clearErrors();
                            PageHelper.showLoader();
                            ACH.demandDownloadStatus({
                                "demandDate": model.achCollections.demandDate,
                                "branchId": branchIDArray.join(",")
                            }).$promise.then(
                                function(response) {
                                    window.open(irf.BI_BASE_URL + "/download.php?user_id=" + model.userLogin + "&auth_token=" + model.authToken + "&report_name=ach_demands&date=" + model.achCollections.demandDate);
                                    PageHelper.showProgress("page-init", "Success", 5000);
                                },
                                function(error) {
                                    PageHelper.showProgress("page-init", error, 5000);
                                }).finally(function() {
                                PageHelper.hideLoader();
                            });
                        }
                    }]
                }]
            }, {
                "type": "box",
                "title": "UPLOAD_ACH_REALIZATION_REPORT",
                "items": [{
                    "type": "fieldset",
                    "title": "UPLOAD_STATUS",
                    "items": [{
                            "key": "ach.achDemandListFileId",
                            "notitle": true,
                            "type": "file",
                            "category": "ACH",
                            "subCategory": "cat2",
                            "fileType": "application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            customHandle: function(file, progress, modelValue, form, model) {
                                ACH.achDemandListUpload(file, progress);
                            }
                        }
                    ]
                }]
            }],
            schema: function() {
                return ACH.getSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {}
            }
        };
    }
]);
/*
About PDCClearingCollection.js
------------------------------
1. To download the demand list with date criteria
2. To upload the demand list and change the status as "MARK AS PAID"

Methods
-------
Initialize : To decare the required model variables.
onClick : To download the Domand List based on date criteria and to call "PDC.getDemandList" service
onChange : To select/unselect all demands listed in array.
customHandle : To upload PDC files(Excel).

Services
--------
PDC.getDemandList : To get all the demands for the entered date. And all the branch ID's are 
                    parsed so as to get all the demands for the corresponding date.
PDC.pdcDemandListUpload : To upload the selected file.
PDC.bulkRepay : To repay all the demands marked. The req. is send as JSON Array.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.PDCDemandDownload"), ["$log", "SessionStore", 'Utils', 'PDC', 'AuthTokenHelper', 'PageHelper', 'formHelper', '$q', '$filter',
    function($log, SessionStore, Utils, PDC, AuthTokenHelper, PageHelper, formHelper, $q, $filter) {
        var branchIDArray = [];
        return {
            "type": "schema-form",
            "title": "PDC_DEMANDS_DOWNLOAD_UPLOAD",
            "subTitle": Utils.getCurrentDate(),
            initialize: function(model, form, formCtrl) {
                model.authToken = AuthTokenHelper.getAuthData().access_token;
                model.userLogin = SessionStore.getLoginname();
                model.pdcCollections = model.pdcCollections || {};
                model.pdcCollections.demandDate = model.pdcCollections.demandDate || Utils.getCurrentDate();
                //model.pdcCollections.demandDate = model.pdcCollections.demandDate || {};
                for (var i = 0; i < formHelper.enum('branch_id').data.length; i++) {
                    branchIDArray.push(parseInt(formHelper.enum('branch_id').data[i].code));
                }

            },
            "form": [{
                "type": "box",
                "title": "PDC_INPUT",
                "items": [{
                    "type": "fieldset",
                    "title": "DOWNLOAD_PDC_INPUT",
                    "items": [{
                        "key": "pdcCollections.demandDate",
                        "title": "INSTALLMENT_DATE",
                        "type": "date"
                    }, {
                        "title": "DOWNLOAD",
                        "htmlClass": "btn-block",
                        "icon": "fa fa-download",
                        "type": "button",
                        "notitle": true,
                        "readonly": false,
                        "onClick": function(model, formCtrl, form, $event) {
                            if (!model.pdcCollections.demandDate) {
                                PageHelper.setError({
                                    'message': 'Installment Date is mandatory.'
                                });
                                return false;
                            }
                            PageHelper.clearErrors();
                            PageHelper.showLoader();
                            PDC.demandDownloadStatus({
                                "demandDate": model.pdcCollections.demandDate,
                                "branchId": branchIDArray.join(",")
                            }).$promise.then(
                                function(response) {
                                    window.open(irf.BI_BASE_URL + "/download.php?user_id=" + model.userLogin + "&auth_token=" + model.authToken + "&report_name=pdc_challan&date=" + model.pdcCollections.demandDate);
                                    PageHelper.showProgress("page-init", "Success", 5000);
                                },
                                function(error) {
                                    PageHelper.showProgress("page-init", error, 5000);
                                }).finally(function() {
                                PageHelper.hideLoader();
                            });
                        }
                    }]
                }]
            }, {
                "type": "box",
                "title": "UPLOAD_PDC_REALIZATION_REPORT",
                "items": [{
                    "type": "fieldset",
                    "title": "UPLOAD_STATUS",
                    "items": [{
                        "key": "pdc.pdcReverseFeedListFileId",
                        "notitle": true,
                        "category": "ACH",
                        "subCategory": "cat2",
                        "type": "file",
                        "fileType": "application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        customHandle: function(file, progress, modelValue, form, model) {
                            PDC.pdcReverseFeedListUpload(file, progress);
                        }
                    }]
                }]
            }],
            schema: function() {
                return PDC.getSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {}
            }
        };
    }
]);
/*
ACHSubmission.js
----------------
To download the demand list with date criteria and change the status as "MARK AS PAID"

Methods
-------
Initialize : To decare the required model variables.
onClick : To call "ACH.getDemandList" service
onChange : To select/unselect all demands listed in array.

Services
--------
ACH.getDemandList : To get all the demands for the entered date. And all the branch ID's are 
                    parsed so as to get all the demands for the corresponding date.
ACH.bulkRepay : To repay all the demands marked. The req. is send as JSON Array.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHSubmission"),
["$log", "ACH", "PageHelper", "SessionStore","$state", "Enrollment", 'formHelper', "$stateParams", 
function($log, ACH, PageHelper, SessionStore,$state,Enrollment,formHelper,$stateParams){

    return {
        "type": "schema-form",
        "title": "ACH_SUBMISSION",
        "subTitle": "",

        initialize: function (model, form, formCtrl) {
            $log.info("Demo Customer Page got initialized");
            model.achDemand = model.achDemand || {};
            model.achDemand.demandList = model.achDemand.demandList ||[];
            // model.achDemand.demandList = [{
            //     accountId: "10010101",
            //     amount1: "100",
            //     customerName: "aaa",
            //     check: false
            // },
            // {
            //     accountId: "10010102",
            //     amount1: "100",
            //     customerName: "bbb",
            //     check: true
            // }];
        },

        form:[
            {
                "type": "box",
                "notitle": true,
                "items": [
                    {
                        "type":"fieldset",
                        "title":"SEARCH_ACH_DEMANDS",
                        "items":[
                            {
                                "key": "achDemand.search.demandDate",
                                "title": "DEMAND_DATE",
                                "type": "date"
                            },
                            {
                                "key": "achDemand.search.branchId",
                                "title": "BRANCH_CODE",
                                "type": "select",
                                "enumCode": "branch_id",
                            },
                            {
                                "title":"SEARCH",
                                "type":"button",
                                "onClick": function(model, formCtrl, form, $event){
                                    PageHelper.clearErrors();
                                    PageHelper.showLoader();
                                    ACH.getDemandList(model.achDemand.search).$promise.then(function(res) {
                                        PageHelper.hideLoader();
                                        model.achSearch = res;

                                        for (var i = 0; i < model.achSearch.body.length; i++) {
                                            model.achSearch.body[i].repaymentType = "ACH";
                                            model.achSearch.body[i].amount = parseInt(model.achSearch.body[i].amount1);
                                            model.achDemand.demandList.push(model.achSearch.body[i]);
                                        }
                                        
                                        },
                                        function(httpRes) {
                                            PageHelper.hideLoader();
                                            PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                                            PageHelper.showErrors(httpRes);
                                            $log.info("ACH Search Response : " + httpRes);
                                        }
                                    );
                                }
                            }
                        ]
                    }
                ]
            },
            {
                "type": "box",
                "notitle": true,
                "items": [
                    {
                        "type":"fieldset",
                        "title":"UPDATE_ACH_DEMANDS",
                        "items":[
                            {   
                                "key": "achDemand.checkbox",
                                "type": "checkbox",
                                "title": "SELECT_ALL",
                                "schema":{
                                        "default": false
                                    },
                                "onChange": function(modelValue, form, model){

                                    if (modelValue)
                                    {
                                        for ( i = 0; i < model.achDemand.demandList.length; i++)
                                            model.achDemand.demandList[i].check = true;  
                                    }
                                    else
                                    {
                                        for ( i = 0; i < model.achDemand.demandList.length; i++)
                                            model.achDemand.demandList[i].check = false;
                                    }                        
                                }    
                            },
                            {
                                "type":"array",
                                "key":"achDemand.demandList",
                                "add": null,
                                "startEmpty": true,
                                "remove":null,
                                "title":"CHEQUE_DETAILS",
                                "titleExpr": "(model.achDemand.demandList[arrayIndex].check?'⚫ ':'⚪ ') + model.achDemand.demandList[arrayIndex].accountId + ' - ' + model.achDemand.demandList[arrayIndex].amount1",
                                "items":[
                                    {
                                        "key": "achDemand.demandList[].accountId",
                                        "title": "ACCOUNT_NUMBER",
                                        "readonly": true
                                    },
                                    {
                                        "key": "achDemand.demandList[].amount1",
                                        "title": "LOAN_AMOUNT",
                                        "readonly": true
                                    },
                                    {
                                        "key": "achDemand.demandList[].customerName",
                                        "title": "CUSTOMER_NAME",
                                        "readonly": true
                                    },
                                    {
                                        "key": "achDemand.demandList[].check",
                                        "title": "MARK_AS_PAID",
                                        "type": "checkbox",
                                        "schema":{
                                            "default": false
                                        }
                                    },
                                ]                                                                           
                            }
                        ]                        
                    },
                    {
                        "type": "actionbox",
                        "items": [
                            {
                                "type": "submit",
                                "title": "SUBMIT"
                            }
                        ]
                    }
                ]
            }
        ],

        schema: function() {
            return Enrollment.getSchema().$promise;
        },

        actions: {
            submit: function(model, form, formName){
                PageHelper.clearErrors();
                PageHelper.showLoader();
                ACH.bulkRepay(model.achDemand.demandList, function(response) {
                    PageHelper.hideLoader();
                    PageHelper.showProgress("page-init", "Done.", 2000);
                    model.flag = true;
                }, function(errorResponse) {
                    PageHelper.hideLoader();
                    PageHelper.showErrors(errorResponse);
                });
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.achpdc.Collections"),
["$log", "Enrollment", "SessionStore",'Utils', function($log, Enrollment, SessionStore,Utils){

    

    return {
        "type": "schema-form",
        "title": "ACH_CLEARING_COLLECTION",
        "subTitle": Utils.getCurrentDate(),
        initialize: function (model, form, formCtrl) {
            $log.info("Demo Customer Page got initialized");
            
            
            var docsTitles = [
                "ACH Demand",
                "PDC Demand",
                "Combined (Daily) Demand"
            ];

            for(var i=0;i<docsTitles.length;i++){
                model.loanDocs[i]= {
                    "title":docsTitles[i]
                }

            }
        },
        
        form: [

                {
                    "type":"box",
                    "title":"Daily Collections",
                    "items":[
                                    
                                    {
                                        "titleExpr":"model.loanDocs[arrayIndex].title",
                                        "type":"array",
                                        "key":"loanDocs",
                                        "add":null,
                                        "remove":null,
                                        "items":[

                                                    {
                                                        "title":"Download",
                                                        "htmlClass":"btn-block",
                                                        "icon":"fa fa-download",
                                                        "type":"button",
                                                        "readonly":false
                                                    }


                                                   ]
                                    }
                            ]

                }
           
              ],
        schema: function() {
            return Enrollment.getSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
            },
            approve:function(model,form){
                alert("Approved");
            },
            reject:function(model,form){
                alert("Rejected");
            }
        }
    };
}]);

/*
About PDCClearingCollection.js
------------------------------
1. To download the demand list with date criteria
2. To upload the demand list and change the status as "MARK AS PAID"

Methods
-------
Initialize : To decare the required model variables.
onClick : To download the Domand List based on date criteria and to call "PDC.getDemandList" service
onChange : To select/unselect all demands listed in array.
customHandle : To upload PDC files(Excel).

Services
--------
PDC.getDemandList : To get all the demands for the entered date. And all the branch ID's are 
                    parsed so as to get all the demands for the corresponding date.
PDC.pdcDemandListUpload : To upload the selected file.
PDC.bulkRepay : To repay all the demands marked. The req. is send as JSON Array.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.PDCCollections"), ["$log", "SessionStore", 'Utils', 'PDC', 'AuthTokenHelper', 'PageHelper', 'formHelper', '$filter', '$q', '$state',
    function($log, SessionStore, Utils, PDC, AuthTokenHelper, PageHelper, formHelper, $filter, $q, $state) {

        var allDemands = [];
        var branchIDArray = [];
        return {
            "type": "schema-form",
            "title": "PDC_COLLECTIONS",
            "subTitle": Utils.getCurrentDate(),

            initialize: function(model, form, formCtrl) {
                //alert($filter('date')(new Date(), 'dd/MM/yyyy'));
                //alert(moment(new Date()).format("YYYY-MM-DD"));
                //alert(Utils.getCurrentDate());
                allDemands = [];
                model.authToken = AuthTokenHelper.getAuthData().access_token;
                model.userLogin = SessionStore.getLoginname();
                model.pdcSearch = model.pdcSearch || {};
                //model.pdcCollections = model.pdcCollections || {};
                model.showUpdateSection = false;
                model.searchAccountId = false;
                model.searchDemarkAccountId = false;
                model.pdcDemand = model.pdcDemand || {};
                model.pdcDemand.demarkList = model.pdcDemand.demarkList || [];
                model.updateDemand = model.updateDemand || [];
                //model.pdcCollections.demandDate = model.pdcCollections.demandDate || Utils.getCurrentDate();
                console.log(formHelper.enum('branch_id'));
                for (var i = 0; i < formHelper.enum('branch_id').data.length; i++) {
                    branchIDArray.push(parseInt(formHelper.enum('branch_id').data[i].code));
                }
            },
            form: [{
                "type": "box",
                "title": "UPDATE_PDC_DEMANDS",
                "items": [{
                    "key": "pdc.pdcDemandListDate",
                    "title": "INSTALLMENT_DATE",
                    "type": "date"
                }, {
                    "type": "button",
                    "title": "SEARCH_ALL_DEMAND",
                    "onClick": function(model, formCtrl, form) {
                        PageHelper.clearErrors();
                        if (!model.pdc || !model.pdc.pdcDemandListDate) {
                            PageHelper.setError({
                                'message': 'Installment Date is mandatory.'
                            });
                            return false;
                        }
                        model.showUpdateSection = false;
                        PageHelper.showLoader();
                        PDC.getDemandList({
                            demandDate: model.pdc.pdcDemandListDate,
                            branchId: branchIDArray
                        }).$promise.then(function(res) {
                                PageHelper.hideLoader();
                                model.pdcSearch = res;
                                if (model.pdcSearch.length) {
                                    model.showUpdateSection = true;
                                    model.chosenRecordCountText = model.pdcSearch.length + ' Record(s) found.';
                                } else {
                                    model.showUpdateSection = false;
                                    model.chosenRecordCountText = 'No Records found..!';
                                }
                                // Clear the existing array whenever the user clicks on download,
                                // to prevent the value getting appended to the existing
                                allDemands = [];
                                for (var i = 0; i < model.pdcSearch.length; i++) {
                                    model.pdcSearch[i].repaymentType = "PDC";
                                    // model.pdcSearch[i].accountId = model.pdcSearch[i].accountId;
                                    model.pdcSearch[i].amount = parseInt(model.pdcSearch[i].amount3);
                                    model.pdcSearch[i].repaymentDate = Utils.convertJSONTimestampToDate(model.pdcSearch[i].valueDate);
                                    model.pdcSearch[i].check = true;
                                    allDemands.push(model.pdcSearch[i]);
                                }
                            },
                            function(httpRes) {
                                PageHelper.hideLoader();
                                PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                                PageHelper.showErrors(httpRes);
                                $log.info("PDC Search Response : " + httpRes);
                            });
                    }
                }, {
                    "type": "help",
                    "helpExpr": "model.chosenRecordCountText"
                }]
            }, {
                "type": "box",
                "condition": "model.showUpdateSection",
                "title": "SEARCH_DAMANDS_TO_DEMARK",
                "items": [{
                        "key": "pdcDemand.chosenToMark.accountId",
                        "title": "ACCOUNT_NUMBER",
                        "type": "lov",
                        "lovonly": true,
                        "inputMap": {
                            "loanAccountNumber": "pdc.loanAccountNumber",
                            "reference": "pdc.reference"
                        },
                        "searchHelper": formHelper,
                        "search": function(model, formCtrl, form) {
                            var filteredDemandList = $filter('filter')(allDemands, {
                                accountId: model.loanAccountNumber,
                                reference: model.reference
                            });
                            return $q.resolve({
                                "header": {
                                    "x-total-count": filteredDemandList.length
                                },
                                "body": filteredDemandList
                            });



                        },
                        "getListDisplayItem": function(item, index) {
                            return [
                                '{{"ACCOUNT_NUMBER"|translate}}: ' + item.accountId + ' <small><i class="fa fa-rupee"></i> ' + item.amount + '</small>',
                                '{{"INSTRUMENT_REFERENCE"|translate}}: ' + item.reference,
                                '{{"ENTITY_NAME"|translate}}: ' + item.customerName
                            ];
                        },
                        "onSelect": function(result, model, context) {
                            model.searchAccountId = false;
                            if (!model.pdcDemand.demarkList) {
                                model.pdcDemand.demarkList = [];
                            }
                            for (var i = 0; i < model.pdcDemand.demarkList.length; i++) {
                                if (result.accountId == model.pdcDemand.demarkList[i].accountId) {
                                    model.searchAccountId = true;
                                    PageHelper.showProgress("page-init", "ACCOUNT ID exist in Demarked Demand", 5000);
                                }
                            }
                            if (model.searchAccountId == false) {
                                model.pdcDemand.chosenToMark = result;
                            }

                        }
                    },

                    {
                        "key": "pdcDemand.chosenToMark.amount",
                        "title": "LOAN_AMOUNT",
                        "type": "number",
                        "readonly": true
                    }, {
                        "key": "pdcDemand.chosenToMark.demark",
                        "title": "MARK_AS_UNPAID",
                        "condition": "model.pdcDemand.chosenToMark.accountId",
                        "type": "button",
                        "schema": {
                            "default": false
                        },
                        "onClick": function(model, form, formName) {
                            model.searchDemarkAccountId = false;
                            if (model.pdcDemand.demarkList) {
                                for (var i = 0; i < model.pdcDemand.demarkList; i++) {
                                    if (model.pdcDemand.chosenToMark.accountId == model.pdcDemand.demarkList[i].accountId) {
                                        model.searchDemarkAccountId = true;
                                    }
                                }
                                if (!model.searchDemarkAccountId) {
                                    model.pdcDemand.chosenToMark.check = false;
                                    model.pdcDemand.demarkList.push(model.pdcDemand.chosenToMark);
                                    model.pdcDemand.chosenToMark = null;
                                }
                            }
                        }
                    }
                ]
            }, {
                "type": "box",
                "condition": "model.showUpdateSection",
                "title": "DEMARKED_DEMANDS",
                "items": [{
                    "type": "array",
                    "key": "pdcDemand.demarkList",
                    //"condition": "!model.pdcDemand.demarkList[arrayIndex].check",
                    "add": null,
                    "startEmpty": true,
                    "remove": null,
                    "title": "CHEQUE_DETAILS",
                    "titleExpr": "(model.pdcDemand.demarkList[arrayIndex].check?'⚫ ':'⚪ ') + model.pdcDemand.demarkList[arrayIndex].accountId + ' - ' + model.pdcDemand.demarkList[arrayIndex].amount",
                    "items": [{
                            "key": "pdcDemand.demarkList[].accountId",
                            //"condition": "!model.pdcDemand.demarkList[arrayIndex].check",
                            "title": "ACCOUNT_NUMBER",
                            "readonly": true
                        }, {
                            "key": "pdcDemand.demarkList[].amount",
                            //"condition": "!model.pdcDemand.demarkList[arrayIndex].check",
                            "title": "LOAN_AMOUNT",
                            "type": "number",
                            "readonly": true
                        }, {
                            "key": "pdcDemand.demarkList[].demark",
                            //"condition": "!model.pdcDemand.demarkList[arrayIndex].check",
                            "title": "MARK_AS_PAID",
                            "type": "button",
                            "schema": {
                                "default": false
                            },
                            "onClick": function(model, form, formName) {


                                model.pdcDemand.demarkList[formName.arrayIndex].check = true;
                                model.pdcDemand.demarkList.splice(formName.arrayIndex, 1);

                            }
                        }
                    ]
                }]
            }, {
                "type": "actionbox",
                "condition": "model.showUpdateSection",
                "items": [{
                    "type": "button",
                    "notitle": true,
                    "condition": "model.showUpdateSection",
                    "title": "SUBMIT",
                    "onClick": "actions.submit(model, formCtrl)"
                }]
            }],
            schema: function() {
                return PDC.getSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {
                    PageHelper.clearErrors();
                    model.updateDemand = [];
                    for (var i = 0; i < allDemands.length; i++) {
                        var transName = "Scheduled Demand";
                        if (allDemands[i].check == true) {
                            if ((new Date(Utils.getCurrentDate()).getTime()) == (new Date(allDemands[i].repaymentDate).getTime())) {
                                transName = "Scheduled Demand";
                            } else if ((new Date(allDemands[i].transactionDate).getTime()) > (new Date(allDemands[i].repaymentDate).getTime())) {
                                transName = "Scheduled Demand";
                            } else if ((new Date(allDemands[i].transactionDate).getTime()) < (new Date(allDemands[i].repaymentDate).getTime())) {
                                transName = "Scheduled Demand";
                            }
                            model.updateDemand.push({
                                repaymentDate: Utils.convertJSONTimestampToDate(allDemands[i].valueDate),
                                accountNumber: allDemands[i].accountId,
                                amount: parseInt(allDemands[i].amount3),
                                transactionName: transName,
                                productCode: allDemands[i].param1,
                                instrument: "PDC",
                                valueDate: allDemands[i].valueDate,
                                urnNo: allDemands[i].customerName,
                                instrumentDate: Utils.convertJSONTimestampToDate(allDemands[i].valueDate),
                                pdcNo: allDemands[i].sequenceNum,
                                reference: allDemands[i].reference,
                                ifscCode: allDemands[i].responseCode,
                                demandAmount: parseInt(allDemands[i].amount3) 
                            });
                        }
                    }
                    if (model.updateDemand.length > 0) {
                        console.log(model.updateDemand);
                        PageHelper.clearErrors();
                        PageHelper.showLoader();
                        PDC.bulkRepay(model.updateDemand).$promise.then(function(response) {
                            PageHelper.showProgress("page-init", "Done.", 2000);
                            $state.reload();
                            // allDemands = [];
                            // model.showUpdateSection = false;
                        }, function(errorResponse) {
                            PageHelper.showErrors(errorResponse);
                        }).finally(function() {
                            PageHelper.hideLoader();
                        });
                    } else {
                        PageHelper.showProgress("page-init", "No account seected for repayment", 5000);
                    }
                }
            }
        };
    }
]);
/*
About ACHMandateUpload.js
-------------------------
To Upload the ACH Mandate Registration Reverse Feed into the system(Status will be 
either approved by bank/ rejected by bank)

Methods
-------
Initialize : To decare the required model variables.
customHandle : To upload ACH files(Excel).

Services
--------
ACH.achMandateUpload(file, progress) : To upload the selected file.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHMandateUpload"),
["$log", "Enrollment", "SessionStore","$state", "$stateParams", "ACH", function($log, Enrollment, SessionStore,$state,$stateParams, ACH){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "ACH_MANDATE_UPLOAD",
        "subTitle": "",

        initialize: function (model, form, formCtrl) {
            $log.info("ACH Mandate Upload Page got initialized");
        },
        offline: false,

        getOfflineDisplayItem: function(item, index){            
        },

        form: [
            {
                
                "type": "box",
                "title": "ACH_MANDATE_UPLOAD_FROM_BANK" ,
                "colClass":"col-sm-6",
                "items": [
                    {
                        "key": "ach.achMandateReverseFileId",
                        "notitle":true,
                        "category":"ACH",
                        "subCategory":"cat2",
                        "type": "file",
                        "fileType":"application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        customHandle: function(file, progress, modelValue, form, model) {
                            ACH.achMandateUpload(file, progress);
                        }
                    },
                    {
                        "type": "button",
                        "icon": "fa fa-user-plus",
                        "title": "UPLOAD",
                        "onClick": "actions.proceed(model, formCtrl, form, $event)"
                    }
                ]
            }
        ],

        schema: function() {
            return Enrollment.getSchema().$promise;
        },

        actions: {
            submit: function(model, form, formName){
                    $state.go("Page.Engine", {
                        pageName: 'loans.individual.achpdc.ACHMandateUpload',
                        pageId: model.customer.id
                    });
            },
            
            proceed: function(model, formCtrl, form, $event) {
            }
        }
    };
}]);
/*
About ACHMandateDownload.js
-------------------------
1. To Download the ACH Mandate Registration from the system(Status will be PENDING).
2. Once the file is downloaded, The Mandate Status is changed to "SUBMITTED"

Methods
-------
Initialize : To decare the required model variables.
onClick : To download the ACH Mandate List whose status are "PENDING" based on date criteria and to call "ACH.getDemandList" service
customHandle : To upload ACH Mandate Reverse Feed files(Excel).

Services
--------
ACH.search({mandateStatus: "PENDING"}) : To get all the ACH Accounts whose status are "PENDING".
ACH.update : Mandate Status is Updated as to "SUBMITTED".
ACH.achMandateUpload(file, progress) : To Upload the Mandate Reverse Feed.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHMandateDownload"), ["$log", "Enrollment", "ACH", "SessionStore", "$state", "$stateParams", "AuthTokenHelper", "PageHelper", "$httpParamSerializer",
    function($log, Enrollment, ACH, SessionStore, $state, $stateParams, AuthTokenHelper, PageHelper, $httpParamSerializer) {

        var branch = SessionStore.getBranch();
        return {
            "type": "schema-form",
            "title": "ACH_MANDATE",
            "subTitle": "",

            initialize: function(model, form, formCtrl) {
                $log.info("ACH Mandate Download Page got initialized");
                model.authToken = AuthTokenHelper.getAuthData().access_token;
                model.userLogin = SessionStore.getLoginname();
                model.achSearch = model.achSearch || {};
                model.achUpdate = model.achUpdate || [];

                model.flag = false;
                model.achMandate = model.achMandate || {};
                model.achMandate.changeMandateStatus = model.achMandate.changeMandateStatus || [];
                //Search for existance of Loan account Number
                model.bi = {};
                model.bi.report_name = "ach_registration_mandate";
                //model.bi.from_date = "2016-09-24";
                //model.bi.to_date = "2016-09-24";
            },
            offline: false,

            getOfflineDisplayItem: function(item, index) {},

            form: [{
                "type": "box",
                "title": "DOWNLOAD_UPLOAD_ACH_MANDATES",
                "colClass": "col-sm-6",
                "items": [{
                    "type": "fieldset",
                    "title": "DOWNLOAD_STATUS",
                    "items": [{
                        "key": "ach.achMandateStatus",
                        "title": "MANDATE_STATUS",
                        "required": true,
                        "type": "select",
                        "titleMap": {
                            "PENDING": "PENDING",
                            "SUBMITTED": "SUBMITTED"
                        }
                    }, {
                        "title": "DOWNLOAD",
                        "key": "ach.achMandateDownload",
                        "htmlClass": "btn-block",
                        "condition": "model.ach.achMandateStatus",
                        "icon": "fa fa-download",
                        "type": "button",
                        "readonly": false,
                        "onClick": function(model, formCtrl, form, event) {
                            if (model.ach.achMandateStatus) {
                                model.achMandate.changeMandateStatus = [];
                                //window.open(irf.BI_BASE_URL+"/download.php?user_id="+model.userLogin+"&auth_token="+model.authToken+"&report_name=ach_registration_mandate");
                                var biDownloadUrl = irf.BI_BASE_URL + '/download.php?auth_token=' + AuthTokenHelper.getAuthData().access_token + '&' + $httpParamSerializer(model.bi) + '&mandate_status=' + model.ach.achMandateStatus;
                                window.open(biDownloadUrl);
                                PageHelper.clearErrors();
                                PageHelper.showLoader();
                                ACH.search({
                                    mandateStatus: model.ach.achMandateStatus
                                }).$promise.then(
                                    function(res) {
                                        $log.info("response: " + res);
                                        model.achSearch = res;
                                        if (model.achSearch.body.length > 0) {
                                            model.flag = true;
                                        }
                                        for (var i = 0; i < model.achSearch.body.length; i++) {
                                            model.achSearch.body[i].maximumAmount = parseInt(model.achSearch.body[i].maximumAmount);
                                            model.achSearch.body[i].maximumAmount = model.achSearch.body[i].maximumAmount.toString();
                                            model.achMandate.changeMandateStatus.push(model.achSearch.body[i]);
                                            model.achMandate.changeMandateStatus[i].check = false;
                                        }
                                    },
                                    function(httpRes) {
                                        PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                                        PageHelper.showErrors(httpRes);
                                        $log.info("ACH Search Response : " + httpRes);
                                    }
                                ).finally(function() {
                                    PageHelper.hideLoader();
                                });

                            }

                            // PageHelper.clearErrors();
                            // PageHelper.showLoader();
                            // ACH.update(model.achSearch.body).$promise.then( 
                            //     function(response) {
                            //         PageHelper.hideLoader();
                            //         PageHelper.showProgress("page-init", "Done.", 2000);
                            //         model.flag = true;
                            //     },
                            //     function(errorResponse) {
                            //         PageHelper.hideLoader();
                            //         PageHelper.showErrors(errorResponse);
                            //     }
                            // ).finally(function(){
                            //     PageHelper.hideLoader();
                            // }
                            // );
                        }
                    }]
                }
                // , {
                //     "type": "fieldset",
                //     "title": "UPLOAD_STATUS",
                //     "items": [{
                //             "key": "ach.achMandateReverseFileId",
                //             "notitle": true,
                //             "category": "ACH",
                //             "subCategory": "cat2",
                //             "type": "file",
                //             "fileType": "application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                //             customHandle: function(file, progress, modelValue, form, model) {
                //                 ACH.achMandateUpload(file, progress);
                //             }
                //         }
                //         //,
                //         // {
                //         //     "type": "button",
                //         //     "icon": "fa fa-user-plus",
                //         //     "title": "UPLOAD",
                //         //     "onClick": "actions.proceed(model, formCtrl, form, $event)"
                //         // }
                //     ]
                // }
                ]
            }, {
                "type": "box",
                "notitle": true,
                "items": [{
                    "type": "fieldset",
                    "title": "UPLOAD_ACH_MANDATE_STATUS",
                    "items": [{
                        "key": "ach.achMandateReverseFileId",
                        "notitle": true,
                        "category": "ACH",
                        "subCategory": "cat2",
                        "type": "file",
                        "fileType": "application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        customHandle: function(file, progress, modelValue, form, model) {
                            ACH.achMandateUpload(file, progress);
                        }
                    }]
                }]
            }
            // , {
            //     "type": "box",
            //     "notitle": true,
            //     "items": [{
            //         "type": "fieldset",
            //         "title": "UPDATE_ACH_MANDATE_STATUS",
            //         "items": [{
            //             "key": "achMandate.checkbox",
            //             "condition": "model.flag",
            //             "type": "checkbox",
            //             "title": "SELECT_ALL",
            //             "schema": {
            //                 "default": false
            //             },
            //             "onChange": function(modelValue, form, model) {

            //                 if (modelValue) {
            //                     for (var i = 0; i < model.achSearch.body.length; i++) {
            //                         model.achMandate.changeMandateStatus[i].check = true;
            //                     }
            //                 } else {
            //                     for (var i = 0; i < model.achSearch.body.length; i++) {
            //                         model.achMandate.changeMandateStatus[i].check = false;
            //                     }
            //                 }
            //             }
            //         }, {
            //             "type": "array",
            //             "key": "achMandate.changeMandateStatus",
            //             "condition": "model.flag",
            //             "add": null,
            //             "startEmpty": true,
            //             "remove": null,
            //             "title": "PENDING_MANDATE_LIST",
            //             "titleExpr": "(model.achMandate.changeMandateStatus[arrayIndex].check?'⚫ ':'⚪ ') + model.achMandate.changeMandateStatus[arrayIndex].mandateStatus + ' - ' + model.achMandate.changeMandateStatus[arrayIndex].accountId",
            //             "items": [{
            //                 "key": "achMandate.changeMandateStatus[].accountId",
            //                 "title": "ACCOUNT_NUMBER",
            //                 "readonly": true
            //             }, {
            //                 "key": "achMandate.changeMandateStatus[].accountHolderName",
            //                 "title": "CUSTOMER_NAME",
            //                 "readonly": true
            //             }, {
            //                 "key": "achMandate.changeMandateStatus[].mandateStatus",
            //                 "title": "MANDATE_STATUS",
            //                 "readonly": true
            //             }, {
            //                 "key": "achMandate.changeMandateStatus[].check",
            //                 "title": "MARK_AS_SUBMITTED",
            //                 "type": "checkbox",
            //                 "schema": {
            //                     "default": false
            //                 }
            //             }, ]
            //         }]
            //     }, {
            //         "type": "actionbox",
            //         "condition": "model.flag",
            //         "items": [{
            //             "type": "submit",
            //             "title": "SUBMIT"
            //         }]
            //     }]
            // }
            ],

            schema: function() {
                return ACH.getSchema().$promise;
            },

            actions: {
                submit: function(model, form, formName) {
                    model.achUpdate = [];
                    for (var i = 0; i < model.achSearch.body.length; i++) {
                        if (model.ach.achMandateStatus == "PENDING") {
                            if (model.achMandate.changeMandateStatus[i].check) {
                                model.achMandate.changeMandateStatus[i].mandateStatus = "SUBMITTED";
                                model.achUpdate.push(model.achMandate.changeMandateStatus[i]);
                            } else {
                                model.achSearch.body[i].mandateStatus = "PENDING"
                            }
                        } else if (model.ach.achMandateStatus == "SUBMITTED") {
                            if (model.achMandate.changeMandateStatus[i].check) {
                                model.achMandate.changeMandateStatus[i].mandateStatus = "ACCEPTED";
                                model.achUpdate.push(model.achMandate.changeMandateStatus[i]);
                            } else {
                                model.achSearch.body[i].mandateStatus = "SUBMITTED"
                            }
                        }

                    }
                    PageHelper.clearErrors();
                    PageHelper.showLoader();
                    ACH.updateMandateStatus(model.achUpdate).$promise.then(
                        function(response) {
                            PageHelper.hideLoader();
                            PageHelper.showProgress("page-init", "Done.", 2000);
                            model.achMandate.changeMandateStatus = [];
                            model.achSearch.body = [];
                            model.flag = false;
                        },
                        function(errorResponse) {
                            PageHelper.hideLoader();
                            PageHelper.showErrors(errorResponse);
                        }
                    ).finally(function() {
                        PageHelper.hideLoader();
                    });
                }
            }
        };
    }
]);
/*
PDCSubmission.js
----------------
To download the demand list with date criteria and change the status as "MARK AS PAID"

Methods
-------
Initialize : To decare the required model variables.
onClick : To call "PDC.getDemandList" service
onChange : To select/unselect all demands listed in array.

Services
--------
PDC.getDemandList : To get all the demands for the entered date. And all the branch ID's are 
                    parsed so as to get all the demands for the corresponding date.
PDC.bulkRepay : To repay all the demands marked. The req. is send as JSON Array.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.PDCSubmission"),
["$log", "PDC", "PageHelper", "SessionStore","$state", "Enrollment", 'formHelper', "$stateParams", 
function($log, PDC, PageHelper, SessionStore,$state,Enrollment,formHelper,$stateParams){

    return {
        "type": "schema-form",
        "title": "PDC_SUBMISSION",
        "subTitle": "",

        initialize: function (model, form, formCtrl) {
            $log.info("Demo Customer Page got initialized");
            model.pdcDemand = model.pdcDemand || {};
            model.pdcDemand.demandList = model.pdcDemand.demandList ||[];
            // model.pdcDemand.demandList = [{
            //     accountId: "10010101",
            //     amount1: "100",
            //     customerName: "aaa",
            //     check: false
            // },
            // {
            //     accountId: "10010102",
            //     amount1: "100",
            //     customerName: "bbb",
            //     check: true
            // }];
        },

        form:[
            {
                "type": "box",
                "notitle": true,
                "items": [
                    {
                        "type":"fieldset",
                        "title":"SEARCH_PDC_DEMANDS",
                        "items":[
                            {
                                "key": "pdcDemand.search.demandDate",
                                "title": "DEMAND_DATE",
                                "type": "date"
                            },
                            {
                                "key": "pdcDemand.search.branchId",
                                "title": "BRANCH_CODE",
                                "type": "select",
                                "enumCode": "branch_id",
                            },
                            {
                                "title":"SEARCH",
                                "type":"button",
                                "onClick": function(model, formCtrl, form, $event){
                                    PageHelper.clearErrors();
                                    PageHelper.showLoader();
                                    PDC.getDemandList(model.pdcDemand.search).$promise.then(function(res) {
                                        PageHelper.hideLoader();
                                        model.pdcSearch = res;

                                        for (var i = 0; i < model.pdcSearch.body.length; i++) {
                                                model.pdcDemand.demandList.push(model.pdcSearch.body[i]);
                                        }
                                        
                                        },
                                        function(httpRes) {
                                            PageHelper.hideLoader();
                                            PageHelper.showProgress('loan-load', 'Failed to load the loan details. Try again.', 4000);
                                            PageHelper.showErrors(httpRes);
                                            $log.info("PDC Search Response : " + httpRes);
                                        }
                                    );
                                }
                            }
                        ]
                    }
                ]
            },
            {
                "type": "box",
                "notitle": true,
                "items": [
                    {
                        "type":"fieldset",
                        "title":"PDC_DEMANDS",
                        "items":[
                            {   
                                "key": "pdcDemand.checkbox",
                                "type": "checkbox",
                                "title": "SELECT_ALL",
                                "schema":{
                                        "default": false
                                    },
                                "onChange": function(modelValue, form, model){
                                    
                                    if (modelValue)
                                    {   
                                        for ( i = 0; i < model.pdcDemand.demandList.length; i++)
                                            model.pdcDemand.demandList[i].check = true;  
                                    }
                                    else
                                    {
                                        for ( i = 0; i < model.pdcDemand.demandList.length; i++)
                                            model.pdcDemand.demandList[i].check = false;
                                    }
                                }    
                            },
                            {
                                "type":"array",
                                "key":"pdcDemand.demandList",
                                "add": null,
                                "startEmpty": true,
                                "remove":null,
                                "title":"CHEQUE_DETAILS",
                                "titleExpr": "(model.pdcDemand.demandList[arrayIndex].check?'⚫ ':'⚪ ') + model.pdcDemand.demandList[arrayIndex].accountId + ' - ' + model.pdcDemand.demandList[arrayIndex].customerName",
                                "items":[
                                    {
                                        "key": "pdcDemand.demandList[].accountId",
                                        "title": "ACCOUNT_NUMBER",
                                        "readonly": true
                                    },
                                    {
                                        "key": "pdcDemand.demandList[].amount1",
                                        "title": "LOAN_AMOUNT",
                                        "readonly": true
                                    },
                                    {
                                        "key": "pdcDemand.demandList[].customerName",
                                        "title": "CUSTOMER_NAME",
                                        "readonly": true
                                    },
                                    {
                                        "key": "pdcDemand.demandList[].check",
                                        "title": "MARK_AS_PAID",
                                        "type": "checkbox",
                                        "schema":{
                                            "default": false
                                        }
                                    },
                                ]                                                                           
                            }
                        ]                        
                    },
                    {
                        "type": "actionbox",
                        "items": [
                            {
                                "type": "submit",
                                "title": "SUBMIT"
                            }
                        ]
                    }
                ]
            }
        ],

        schema: function() {
            return Enrollment.getSchema().$promise;
        },

        actions: {
            submit: function(model, form, formName){
                PageHelper.clearErrors();
                PageHelper.showLoader();
                PDC.bulkRepay(model.pdcDemand.demandList, function(response) {
                    PageHelper.hideLoader();
                    PageHelper.showProgress("page-init", "Done.", 2000);
                    model.flag = true;
                }, function(errorResponse) {
                    PageHelper.hideLoader();
                    PageHelper.showErrors(errorResponse);
                });
            }
        }
    };
}]);

/*
About Queue.js
-------------------------
1. Search page that displays all the Loan Accounts based on the sort criteria.
2. To Create/update ACH Account
3. To Create/update PDC Account.

Methods
-------
Initialize : To decare the required model variables.
getResultsPromise : TO return the result of IndividualLoan.search.
getListItem : Values to display from search result
getActions : Menu icon to create/update ACH or create/update PDC.

Services
--------
IndividualLoan.search : To get all the Loan Accounts.
*/
irf.pageCollection.factory(irf.page("loans.individual.achpdc.ACHPDCQueue"), ["$log", "formHelper", "ACH", "entityManager", "IndividualLoan", "$state", "SessionStore", "Utils", "PageHelper", "Queries",
	function($log, formHelper, ACH, EntityManager, IndividualLoan, $state, SessionStore, Utils, PageHelper, Queries) {

		var branchId = SessionStore.getBranchId();
		var achSearchResult = [];

		return {
			"type": "search-list",
			"title": "LOANS_SEARCH",
			"subTitle": "",

			initialize: function(model, form, formCtrl) {
				model.branchId = branchId;
			},

			definition: {
				title: "SEARCH_LOANS",
				searchForm: [
					"*"
				],
				searchSchema: {
					"type": 'object',
					"title": 'SearchOptions',
					"properties": {
						"branchId": {
							"title": "HUB_NAME",
							"type": "integer",
							"enumCode": "branch_id",
							"x-schema-form": {
								"type": "select",
								"screenFilter": true
							}
						},
						"accountNumber": {
							"title": "LOAN_ACCOUNT_NUMBER",
							"type": "string"
						},
						"rejectedMandates": {
							"title": "INCLUDE_REJECTED_ACH_MANDATES",
							"type": "boolean"
						}
					},
					"required": ["branchId"]
				},

				getSearchFormHelper: function() {
					return formHelper;
				},

				getResultsPromise: function(searchOptions, pageOpts) { /* Should return the Promise */
					if(searchOptions.rejectedMandates) {
						searchOptions.mandateStatus = "REJECTED";
					} else {
						searchOptions.mandateStatus = "";
					}
					var promise = Queries.getCustomerBankDetails({
						'branchId': searchOptions.branchId,
						'accountNumber': searchOptions.accountNumber,
						'mandate_status': searchOptions.mandateStatus,
						'page': pageOpts.pageNo,
						'per_page': pageOpts.itemsPerPage
					});
					return promise;
				},

				paginationOptions: {
					"viewMode": "page",
					"getItemsPerPage": function(response, headers) {
						return 20;
					},
					"getTotalItemsCount": function(response, headers) {
						return headers['x-total-count']
					}
				},

				listOptions: {
					expandable: true,
					itemCallback: function(item, index) {},
					getItems: function(response, headers) {
						if (response != null && response.length && response.length != 0) {
							return response;
						}
						return [];
					},
					getListItem: function(item) {
						return [
							"{{'ACCOUNT_NUMBER'|translate}} : " + item.account_number,
							"{{'ENTITY_NAME'|translate}} : " + item.first_name,
							"{{'LOAN_AMOUNT'|translate}} : " + item.loan_amount,
							"{{'LOAN_TYPE'|translate}} : " + item.loan_type,
							"{{'PARTNER_CODE'|translate}} : " + item.product_code,
							"{{'PROCESS_TYPE'|translate}} : " + item.process_type
						]
					},
					getActions: function() {
						return [{
							name: "LOAN_INPUT",
							desc: "",
							icon: "fa fa-book",
							fn: function(item, index) {
								EntityManager.setModel("loans.individual.booking.LoanInput", {
									_loan: item
								});
								$state.go("Page.Engine", {
									pageName: "loans.individual.booking.LoanInput",
									pageId: item.loanId
								});
							},
							isApplicable: function(item, index) {
								if (item.stage == "LoanInitiation") {
									return true;
								} else {
									return false;
								}
							}
						}, {
							name: "CAPTURE_DATES",
							desc: "",
							icon: "fa fa-clock-o",
							fn: function(item, index) {
								EntityManager.setModel("loans.individual.booking.LoanBooking", {
									_loan: item
								});
								$state.go("Page.Engine", {
									pageName: "loans.individual.booking.LoanBooking",
									pageId: item.loanId
								});
							},
							isApplicable: function(item, index) {
								if (item.stage == "LoanBooking") {
									return true;
								} else {
									return false;
								}
							}
						}, {
							name: "DOCUMENT_UPLOAD",
							desc: "",
							icon: "fa fa-file-excel-o",
							fn: function(item, index) {
								EntityManager.setModel("loans.individual.booking.DocumentUpload", {
									_loan: item
								});
								$state.go("Page.Engine", {
									pageName: "loans.individual.booking.DocumentUpload",
									pageId: item.loanId
								});
							},
							isApplicable: function(item, index) {
								if (item.stage == "DocumentUpload") {
									return true;
								} else {
									return false;
								}
							}
						}, {
							name: "COLLECT_ADHOC_CHARGES",
							desc: "",
							icon: "fa fa-rupee",
							fn: function(item, index) {
								EntityManager.setModel("loans.individual.collections.ChargeFee", {
									"_loan": item
								});
								$state.go("Page.Engine", {
									pageName: "loans.individual.collections.ChargeFee",
									pageId: item.accountNumber
								});
							},
							isApplicable: function(item, index) {
								if (item.stage == "Completed") {
									return true;
								} else {
									return false;
								}
							}
						}, {
							name: "ACH_REGISTRATION",
							desc: "",
							icon: "fa fa-cc",
							fn: function(item, index) {
								//EntityManager.setModel("loans.individual.achpdc.ACHRegistration",{_loanAch:item});
								$state.go("Page.Engine", {
									pageName: "loans.individual.achpdc.ACHRegistration",
									pageId: item.id,
									pageData: item
								});
							},
							isApplicable: function(item, index) {
								return true;
							}
						}, {
							name: "PDC_REGISTRATION",
							desc: "",
							icon: "fa fa-cc",
							fn: function(item, index) {
								//EntityManager.setModel("loans.individual.achpdc.PDCRegistration",{_pdc:item});
								$state.go("Page.Engine", {
									pageName: "loans.individual.achpdc.PDCRegistration",
									pageId: item.id,
									pageData: item
								});
							},
							isApplicable: function(item, index) {
								return true;
							}
						}];
					}
				}
			}
		};
	}
]);


irf.pageCollection.factory(irf.page("loans.individual.achpdc.PDCQueue"),
["$log", "formHelper","entityManager", "IndividualLoan","$state", "SessionStore", "Utils",
function($log, formHelper,EntityManager, IndividualLoan,$state, SessionStore, Utils){

	var branch = SessionStore.getBranch();

	return {
		"type": "search-list",
		"title": "PDC_LOANS_SEARCH",
		"subTitle": "",

		initialize: function (model, form, formCtrl) {
			model.branch = branch;
		},

		definition: {
			title: "SEARCH_PDC_LOANS",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"branchName": {
						"title": "BRANCH_ID",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true
						}
					},
					"centreCode": {
                        "title": "CENTER_NAME",
                        "type": ["number", "null"],
                        "enumCode": "centre",
                        "x-schema-form": {
                            "type": "select",
                            "parentEnumCode":"branch"
                        }
                    },
					"customerId": {
						"title": "CUSTOMER_ID",
						"type": "number"
					},
					"accountNumber": {
						"title": "ACCOUNT_NUMBER",
						"type": "string"
					}
				},
				"required":["branchName"]
			},

			getSearchFormHelper: function() {
				return formHelper;
			},

			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */
				var promise = IndividualLoan.search({
					'stage': "Completed",
					'branchName': searchOptions.branchName,
					'centreCode': searchOptions.centreCode,
					'customerId': searchOptions.customerId,
					'accountNumber': searchOptions.accountNumber,
                    'page': pageOpts.pageNo
				}).$promise;
				return promise;
			},

			paginationOptions: {
				"viewMode": "page",
				"getItemsPerPage": function(response, headers){
					return 20;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},

			listOptions: {
				expandable: true,
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [

						"{{'ACCOUNT_NUMBER'|translate}} : " + item.accountNumber,
						"{{'ENTITY_NAME'|translate}} : " + item.customerName,
						"{{'LOAN_AMOUNT'|translate}} : " + item.loanAmount,
						"{{'LOAN_TYPE'|translate}} : " + item.loanType,
						"{{'PARTNER_CODE'|translate}} : " + item.partnerCode,
						"{{'PROCESS_TYPE'|translate}} : " + item.processType
					]
				},
				getActions: function(){
					return [
						{
							name: "PDC_REGISTRATION",
							desc: "",
							icon: "fa fa-cc",
							fn: function(item, index){
								//EntityManager.setModel("loans.individual.achpdc.PDCRegistration",{_pdc:item});
								$state.go("Page.Engine",{
									pageName:"loans.individual.achpdc.PDCRegistration",
									pageId:item.loanId,
									pageData: item
								});
							},
							isApplicable: function(item, index){
								return true;
							}
						}
					];
				}
			}
		}
	};
}]);


irf.pageCollection.factory(irf.page("loans.individual.achpdc.DemandDownloads"), ["$log", "SessionStore", 'Utils', 'ACH', 'AuthTokenHelper', 'PageHelper', 'formHelper', '$filter', '$q',
    function($log, SessionStore, Utils, ACH, AuthTokenHelper, PageHelper, formHelper, $filter, $q) {
        var branchIDArray = [];
        return {
            "type": "schema-form",
            "title": "ACH_PDC_DEMANDS",
            "subTitle": Utils.getCurrentDate(),

            initialize: function(model, form, formCtrl) {
                model.authToken = AuthTokenHelper.getAuthData().access_token;
                model.userLogin = SessionStore.getLoginname();
                model.achpdcCollections = model.achpdcCollections || {};
                model.achpdcCollections.demandDate = model.achpdcCollections.demandDate || Utils.getCurrentDate();
                //model.achDemand.updateDemand = model.achDemand.updateDemand || [];
                for (var i = 0; i < formHelper.enum('branch_id').data.length; i++) {
                    branchIDArray.push(parseInt(formHelper.enum('branch_id').data[i].code));
                }

            },
            form: [{
                "type": "box",
                "title": "ACH_PDC_DEMANDS",
                "items": [{
                    "type": "fieldset",
                    "title": "DOWNLOAD_DEMANDS",
                    "items": [{
                        "key": "achpdcCollections.demandDate",
                        "title": "INSTALLMENT_DATE",
                        "type": "date"
                    }, {
                        "title": "DOWNLOAD",
                        "htmlClass": "btn-block",
                        "icon": "fa fa-download",
                        "type": "button",
                        "notitle": true,
                        "readonly": false,
                        "onClick": function(model, formCtrl, form, $event) {
                            if (!model.achpdcCollections.demandDate) {
                                PageHelper.setError({
                                    'message': 'Installment Date is mandatory.'
                                });
                                return false;
                            }
                            PageHelper.clearErrors();
                            PageHelper.showLoader();
                            ACH.achpdcDemandDownload({
                                "demandDate": model.achpdcCollections.demandDate,
                                "branchId": branchIDArray.join(",")
                            }).$promise.then(
                                function(response) {
                                    window.open(irf.BI_BASE_URL + "/download.php?user_id=" + model.userLogin + "&auth_token=" + model.authToken + "&report_name=ach_pdc_demands&date=" + model.achpdcCollections.demandDate);
                                    PageHelper.showProgress("page-init", "Success", 5000);
                                },
                                function(error) {
                                    PageHelper.showProgress("page-init", error, 5000);
                                }).finally(function() {
                                PageHelper.hideLoader();
                            });



                            //window.open(irf.BI_BASE_URL+"/download.php?user_id="+model.userLogin+"&auth_token="+model.authToken+"&report_name=ach_demands");    
                        }
                    }]
                }]
            }],
            schema: function() {
                return ACH.getSchema().$promise;
            },
            actions: {
                submit: function(model, form, formName) {}
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("audit.OpenAuditsQueue"),
["$log", "$q","formHelper","$state", "SessionStore", "Utils",
function($log,$q, formHelper,$state, SessionStore, Utils){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "Open Audits",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model.branch = branch;
			$log.info("Open Audit Queue got initialized");
		},
		definition: {
			title: "",
			searchForm: [
				
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"Branch": {
						"title": "SelectBranch",
						"type": "string",
						"x-schema-form": {
							"type": "select",
							 titleMap: {
                                        "Branch1": "Branch1",
                                        "Branch2": "Branch2"
                                    }
						}
			
					},
					"AuditType": {
						"title": "SelectAuditType",
						"type": "string",
						"x-schema-form": {
							"type": "select",
							 titleMap: {
                                        "Audittype1": "Audittype1",
                                        "Audittype2": "Audittype2"
                                    }
						}
					},
					
				},
				"required":["Branch"]
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				return $q.resolve({
	                headers: {
	                	"x-total-count": 4
	                },
	                body: [
	                {
	                	BranchName:    "Akra",
	                    AuditStartedOn:"9-10-2016 3:30:00 ",
	                	AuditType:     "fixed",
	                	$synced: true,
	                	$syncedOn: "10-10-2016 4:30:00"

	                },
	                {
	                	BranchName:    "Baranagar",
	                    AuditStartedOn:"9-10-2016 4:30:00 ",
	                	AuditType:     "fixed"
	                },
	                {
	                	BranchName:    "Bolpur",
	                    AuditStartedOn:"10-10-2016 1:30:00 ",
	                	AuditType:     "fixed"
	                },
	                {
	                	BranchName:    "Kholapata",
	                    AuditStartedOn:"10-10-2016 3:30:00 ",
	                	AuditType:     "fixed"
	                },

	                ]
                });
			},
			paginationOptions: {
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				selectable: false,
				expandable: true,
				//listStyle: "table",
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						(item.$synced ? '<i class="fa fa-check text-green">&nbsp;</i>':'<i class="fa fa-warning text-yellow">&nbsp;</i>') + "Branch Name: " + item.BranchName,	
						"Audit Start Date: " + item.AuditStartedOn,
					    "Audit Type: " + item.AuditType,
					    item.$synced ? "Synced On:" + item.$syncedOn : ""
					]
				},
				getTableConfig: function() {
					return {
						"serverPaginate": true,
						"paginate": true,
						"pageLength": 10
					};
				},
				
				getActions: function(){
					return [
						{
							name: "Do Audit",
							desc: "",
							icon: "fa fa-pencil-square-o ",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"audit.SampleSets",
									//pageId:item.AuditType
								});
							},
							isApplicable: function(item, index){
								return item.$synced;
							}
						},
						{
							name: "Upload",
							desc: "",
							icon: "fa fa-upload",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"audit.SampleSets",
									//pageId:item.AuditType
								});
							},
							isApplicable: function(item, index){
								return item.$synced;
							}
						},
						{
							name: "Sync",
							desc: "",
							icon: "fa fa-refresh",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"audit.SampleSets",
									//pageId:item.AuditType
								});
							},
							isApplicable: function(item, index){
								return !item.$synced;
							}
						}
					];
				},
				getBulkActions: function(){
					return [
						{
							name: "Sync All",
							desc: "",
							icon: "fa fa-refresh",
							fn: function(items){
							},
							isApplicable: function(items){
								return true;
							}
						}
						
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("audit.SampleSets"),
["$log","$q", "formHelper","$state", "SessionStore", "Utils",
function($log,$q, formHelper,$state, SessionStore, Utils){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "Sample Sets",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model.branch = branch;
			$log.info("SampleSets Queue got initialized");
		},
		definition: {
			title: "",
			searchForm: [
	
			],
			searchSchema: {	
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"Branch": {
						"title": "SelectBranch",
						"type": "string",
						"x-schema-form": {
							"type": "select",
							"titlemap": {
                                        "Branch1": "Branch1",
                                        "Branch2": "Branch2"
                                    }
						}
			
					},
					"AuditType": {
						"title": "SelectAuditType",
						"type": "string",
						"x-schema-form": {
							"type": "select",
							"titlemap": {
                                        "Audittype1": "Audittype1",
                                        "Audittype2": "Audittype2"
                                    }
						}
					},
					
				},
				"required":["Branch"]
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				return $q.resolve({
	                headers: {
	                	"x-total-count": 4
	                },
	                body: [
	                {
	                	SampleSet:   "Verification",
	                    NoOfSamples:  "15",
	                	TotalRecords: "30"

	                },
	               {
	                	SampleSet:   "CGT",
	                    NoOfSamples:  "5",
	                	TotalRecords: "20"

	                },
	               {
	                	SampleSet:   "GRT",
	                    NoOfSamples:  "5",
	                	TotalRecords: "10"

	                },
	               {
	                	SampleSet:   "Documentation",
	                    NoOfSamples:  "-",
	                	TotalRecords: "-"

	                },

	                ]

                });
			},
			paginationOptions: {
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				selectable: false,
				expandable: true,
				//listStyle: "table",
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
					item.SampleSet,	
					"No. of samples: " + item.NoOfSamples,
				    "Total Records: " + item.TotalRecords,	
					]
				},
				getTableConfig: function() {
					return {
						"serverPaginate": true,
						"paginate": true,
						"pageLength": 10
					};
				},
				
				getActions: function(){
					return [
						{
							name: "Audit Sample",
							desc: "",
							icon: "fa fa-pencil-square-o ",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"audit.Samples",
								});
							},
							isApplicable: function(item, index){
								return true;
							}
						}
						
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("audit.Samples"),
["$log", "$q","formHelper","$state", "SessionStore", "Utils",
function($log,$q, formHelper,$state, SessionStore, Utils){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "Samples",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model.branch = branch;
			$log.info("Samples queue got initialized");
		},
		definition: {
			title: "",
			searchForm: [
				
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"Branch": {
						"title": "SelectBranch",
						"type": "string",
						"x-schema-form": {
							"type": "select",
							 "titlemap": {
                                        "Branch1": "Branch1",
                                        "Branch2": "Branch2"
                                    }
						}
			
					},
					"AuditType": {
						"title": "SelectAuditType",
						"type": "string",
						"x-schema-form": {
							"type": "select",
							 "titlemap": {
                                        "Audittype1": "Audittype1",
                                        "Audittype2": "Audittype2"
                                    }
						}
					},
					
				},
				"required":["Branch"]
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				return $q.resolve({
	                headers: {
	                	"x-total-count": 4
	                },
	                body: [
	                {
	                	
	                    Branch:   		     "Akra",
	                	CustomerName:  	     "Ravi",
	                	URN:         	     "1",
	                	Product:      		 "Loan",
	                	AccountNumber:       "12345",
	                	LoanApplicationDate: "12/5/16",
	                	LoanAmount:          "1,23,345", 
	                	ApplicationStatus:   "New",
	                	Status:              "-"

	                },
	                {
	                	
	                    Branch:   		     "Akra",
	                	CustomerName:  	     "Ravi",
	                	URN:         	     "1",
	                	Product:      		 "Loan",
	                	AccountNumber:       "12345",
	                	LoanApplicationDate: "12/5/16",
	                	LoanAmount:          "1,23,345", 
	                	Status:              "-"

	                },
	                {
	                	
	                    Branch:   		     "Akra",
	                	CustomerName:  	     "Raj",
	                	URN:         	     "1",
	                	Product:      		 "Loan",
	                	AccountNumber:       "12345",
	                	LoanApplicationDate: "12/5/16",
	                	LoanAmount:          "1,23,345", 
	                	Status:              "Audited"
	                },
	                {
	                	
	                    Branch:   		     "Akra",
	                	CustomerName:  	     "Ram",
	                	URN:         	     "1",
	                	Product:      		 "Loan",
	                	AccountNumber:       "12345",
	                	LoanApplicationDate: "12/5/16",
	                	LoanAmount:          "1,23,345", 
	                	Status:              "Not Audited"
	                },

	                ]
                });
			},
			paginationOptions: {
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				selectable: false,
				expandable: true,
				listStyle: "table",
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
					item.Bank,	
					item.Branch,
				    item.CustomerName,
				    item.URN,
				    item.Product,
				    item.AccountNumber,
				    item.LoanApplicationDate,
				    item.LoanAmount,
				    item.ApplicationStatus,
				    item.Status,
					]
				},
				getTableConfig: function() {
					return {
						"serverPaginate": true,
						"paginate": true,
						"pageLength": 10
					};
				},
				getColumns: function(){
					return [
						{
							title:'Branch',
							data: 'Branch'
						},
						{
							title:'CustomerName',
							data: 'CustomerName'
						},
						{
							title:'URN',
							data: 'URN'
						},
						{
							title:'Product',
							data: 'Product'
						},
						{
							title:'AccountNumber',
							data: 'AccountNumber'
						},
						{
							title:'LoanApplicationDate',
							data: 'LoanApplicationDate'
						},
						{
							title:'LoanAmount',
							data: 'LoanAmount'
						},
						{
							title:'Status',
							data: 'Status'
						},
					]
				},
				
				getActions: function(){
					return [
						{
							name: "NA",
							desc: "",
							icon: "",
							/*fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"ProfileInformation",
									pageId:item.id
								});
							},*/
							isApplicable: function(item, index){
								return true;
							}
						},
						{
							name: "Not OK",
							desc: "",
							icon: "",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"audit.Issues",
									pageId:item.Branch
								});
							},
							isApplicable: function(item, index){
								return true;
							}
						}
						
					];
				},
				getBulkActions: function(){
					return [
						{
							name: "New Sample",
							desc: "",
							icon: "fa fa-plus",
							fn: function(items){
								$state.go("Page.Engine",{
									pageName:"audit.Issues",
									pageId:'edit'
								});
							},
							isApplicable: function(items){
								return true;
							}
						}
						
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("audit.Issues"), ["$log","$stateParams", "$q","$state","SessionStore", "formHelper", "$q", "irfProgressMessage",
    "PageHelper", "Utils", "BiometricService", "PagesDefinition", "Queries",


    function($log,$stateParams,$q, $state, SessionStore, formHelper, $q, irfProgressMessage,
        PageHelper, Utils, BiometricService, PagesDefinition, Queries) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "Issues",
            "subTitle": "",
            initialize: function(model, form, formCtrl) {
                this.form = [];
                model.audit = model.audit || {};
                $log.info("Issues page ");
                var form = _.cloneDeep(this.formSource);
                form[0].readonly = $stateParams.pageId !== 'edit';
                if (!form[0].readonly) {
                    model.audit = {};
                } else {
                    model.audit = {  
                        Branch:"akra",
                        CustomerName:"Ravi",
                        URN:"123654",
                        Product:"Loan",
                        AccountNumber:126589,
                        LoanApplicationDate:"3/8/16",
                        LoanAmount:"1,23,456",
                        Status:"Audited",
                    };
                }
                this.form = form;
            },
            offline: true,
            getOfflineDisplayItem: function(item, index) {
                return []
            },
            form: [],
            formSource: [ {
                    type: "box",
                    title: "Sample",
                    items: [ {
                        key: "audit.Branch",
                        title: "Branch"
                    }, {
                        key: "audit.CustomerName",
                        title: "CustomerName"
                    }, {
                        key: "audit.URN",
                        title: "URN"
                    }, {
                        key: "audit.Product",
                        title: "Product"
                    }, {
                        "key": "audit.AccountNumber",
                        "title": "AccountNumber"
                     }, {
                        "key": "audit.LoanApplicationDate",
                        title: "LoanApplicationdate",
                        type: "date"
                    }, 
                    {
                        "key": "audit.LoanAmount",
                        title: "LoanAmount"
                    },
                     {
                        "key": "audit.Status",
                        title: "Status"
                    }
                     ]
                },

                {
                    type: "box",
                    title: "Issues",
                    items: [{
                         type: "help",
                         "title":"1",
                         helpvalue: "1.Does the CSR verify original identity proof and address proof during verification?"  
                    },
                    {
                        "key":"",
                        "title":"Answer",
                        "type":"select",
                         titleMap: {
                                        "Y": "Yes",
                                        "N": "No",
                                        "NA":"NA"
                                    }
                    },
                    {
                         type: "help",
                         "title":"2",
                         helpvalue: "2.Does the CSR ask the client to show loan repayment book(s)  of other companies?"  
                    },
                    {
                        "key":"",
                        "title":"Answer",
                        "type":"select",
                         titleMap: {
                                        "Y": "Yes",
                                        "N": "No",
                                        "NA":"NA"
                                    }
                    },
                    {
                         type: "help",
                         helpvalue: "3.Are the spelling of the name, mentioned in BIS, and unique ID of the customer matching with CB report?"  
                    },
                    {
                        "key":"",
                        "title":"No of Deviation",
                        
                    },
                    {
                        "key":"",
                        "title":"No of Customer (min 30)",
                        
                    }
                    ]
                },

                {
                    "type": "actionbox",
                    "items": [{
                        "type": "submit",
                        "title": "Submit"
                    }, ]
                },
            ],

            schema: {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "type": "object",
            "customerMinAge" : 18,
            "customerMaxAge" : 60,
            "isMinimumFingerPrintRequired" : 1,
            "properties": {
            "audit": {
            "type": "object",
            "required":[  

             ],
            "properties": {
                "Bank": {
                    "type": "string"
                },
                "Branch":{
                    "type":"string"
                },
                "CustomerName":{
                    "type":"string"
                },
                 "URN":{
                    "type":"string"
                },
                 "Product":{
                    "type":"string"
                },
                 "AccountNumber":{
                    "type":"number"
                },
                 "LoanApplicationDate":{
                    "type":"string"
                },
                 "LoanAmount":{
                    "type":"string"
                },
                 "ApplicationStatus":{
                    "type":"string"
                },
                 "Status":{
                    "type":"string"
                },
            }
        }
    }
},

            actions: {
                preSave: function(model, form, formName) {
                    $log.info("Inside save()");
                    var deferred = $q.defer();
                    if (model.lead.Name) {
                        deferred.resolve();
                    } else {
                        irfProgressMessage.pop('LeadGeneration-save', 'Applicant Name is required', 3000);
                        deferred.reject();
                    }
                    return deferred.promise;
                },

                submit: function(model, form, formName) {
                    $log.info("Inside submit()");
                    irfProgressMessage.pop('LeadGeneration-save', 'Lead is successfully created', 3000);
                    $log.warn(model);
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("loans.individual.documentTracking.BatchInTransist"),
["$log", "formHelper", "document","$state", "SessionStore", "Utils",
function($log, formHelper, document,$state, SessionStore, Utils){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "BATCH_IN_TRANSIST",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model.branch = branch;
			$log.info("Batch in transist page got initiated");
		},
		definition: {
			title: "Search Customers",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"Batch_No": {
						"title": "BATCH_NO",
						"type": "string"
					},
					"POD_No": {
						"title": "POD_NO",
						"type": "string"
					},
					"Hub": {
						"title": "HUB_NAME",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true
						}
					},
					"dispatch_date":{
						"title":"DISPATCH_DATE",
						"type":"string",
						"x-schema-form": {
							"type":"date"
						}
					}
				},
				"required":[]
			},
			
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){   

				var promise = document.searchBIT({
					'batchNo': searchOptions.Batch_No,
					'podNo': searchOptions.POD_No,
					'hub': searchOptions.Hub,
					'page': pageOpts.pageNo,
					'itemsPerPage': pageOpts.itemsPerPage,
					'dispatchDate': searchOptions.dispatch_date,
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				selectable: false,
				expandable: true,
				listStyle: "table",
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						Utils.getFullName(item.firstName, item.middleName, item.lastName),
						'Customer ID : ' + item.id,
						item.urnNo?('URN : ' + item.urnNo):("{{'CURRENT_STAGE'|translate}} : " + (item.currentStage==='Stage02'?'House verification':
							(item.currentStage==='Stage01'?'Enrollment':item.currentStage))),
						"{{'BRANCH'|translate}} : " + item.kgfsName,
						"{{'CENTRE_CODE'|translate}} : " + item.centreCode,
						"{{'FATHERS_NAME'|translate}} : " + Utils.getFullName(item.fatherFirstName, item.fatherMiddleName, item.fatherLastName)
					]
				},
				getTableConfig: function() {
					return {
						"serverPaginate": true,
						"paginate": true,
						"pageLength": 10
					};
				},
				getColumns: function(){
					return [
						{
							title:'NAME',
							data: 'firstName',
							render: function(data, type, full, meta) {
								return (full.customerType==='Individual'?'<i class="fa fa-user" style="color:#777">&nbsp;</i> ':'<i class="fa fa-industry" style="color:#777"></i> ') + data;
							}
						},
						{
							title:'URN_NO',
							data: 'urnNo'
							// type: 'html',
						},
						{
							title:'CURRENT_STAGE',
							data: 'currentStage'
						},
						{
							title:'BRANCH',
							data: 'kgfsName'
						},
						{
							title:'CENTRE_CODE',
							data: 'centreCode'
						},
						{
							title:'FATHERS_NAME',
							data: 'fatherFirstName'
						}
					]
				},
				getActions: function(){
					return [
						{
							name: "Enroll Customer",
							desc: "",
							icon: "fa fa-user-plus",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"ProfileInformation",
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Stage01')
									return true;
								return false;
							}
						},
						{
							name: "Do House Verification",
							desc: "",
							icon: "fa fa-house",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"AssetsLiabilitiesAndHealth",
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Stage02')
									return true;
								return false;
							}
						},
						{
							name: "Customer 360",
							desc: "",
							icon: "fa fa-user",
							fn: function(item, index){
								$state.go("Page.Customer360",{
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Completed')
									return true;
								return false;
							}
						}
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("loans.individual.documentTracking.PendingForDispatch"), ["$log", "formHelper", "document", "$state", "SessionStore", "Utils",
    function($log,formHelper,document,$state,SessionStore,Utils) {
        var branch = SessionStore.getBranch();
        return {
            "type": "search-list",
            "title": "Pending_For_Dispatch",
            "subTitle": "",
            initialize: function(model, form, formCtrl) {
                model.branch = branch;
                $log.info("Perding for Dispatch page got initiated");
            },
            definition: {
                title: "Search Customers",
                searchForm: [
                    "*"
                ],
                searchSchema: {
                    "type": 'object',
                    "title": 'SearchOptions',
                    "properties": {
                        "customer_name": {
                            "title": "CUSTOMER_NAME",
                            "type": "string"
                        },
                        "Business_name": {
                            "title": "Business_NAME",
                            "type": "string"
                        },
                        "Loan_id": {
                            "title": "LOAN_ID",
                            "type": "string"
                        },

                        "spoke_name": {
                            "title": "SPOKE_NAME",
                            "type": "string",
                            "enumCode": "centre",
                            "x-schema-form": {
                                "type": "select",
                                "filter": {
                                    "parentCode as branch": "model.branch"
                                },
                                "screenFilter": true
                            }
                        },
                        "disbursement_date": {
                            "title": "DISBURSEMENT_DATE",
                            "type": "string",
                            "x-schema-form": {
                                "type": "date"
                            }
                        }

                    },
                    "required": ["Loan_id"]
                },

                getSearchFormHelper: function() {
                    return formHelper;
                },
                getResultsPromise: function(searchOptions, pageOpts) { 

                    var promise = document.searchPFD({
                        'customername': searchOptions.customer_name,
                        'businessname': searchOptions.Business_name,
                        'loanid': searchOptions.LOAN_ID,
                        'page': pageOpts.pageNo,
                        'itemsPerPage': pageOpts.itemsPerPage,
                        'spokename': searchOptions.spoke_name,
                        'disbursementdate': searchOptions.disbursement_date,

                    }).$promise;

                    return promise;
                },
                paginationOptions: {
                    "getItemsPerPage": function(response, headers) {
                        return 100;
                    },
                    "getTotalItemsCount": function(response, headers) {
                        return headers['x-total-count']
                    }
                },
                listOptions: {
                    selectable: false,
                    expandable: true,
                    listStyle: "table",
                    itemCallback: function(item, index) {},
                    getItems: function(response, headers) {
                        if (response != null && response.length && response.length != 0) {
                            return response;
                        }
                        return [];
                    },
                    getListItem: function(item) {
                        return [
                            Utils.getFullName(item.firstName, item.middleName, item.lastName),
                            'Customer ID : ' + item.id,
                            item.urnNo ? ('URN : ' + item.urnNo) : ("{{'CURRENT_STAGE'|translate}} : " + (item.currentStage === 'Stage02' ? 'House verification' :
                                (item.currentStage === 'Stage01' ? 'Enrollment' : item.currentStage))),
                            "{{'BRANCH'|translate}} : " + item.kgfsName,
                            "{{'CENTRE_CODE'|translate}} : " + item.centreCode,
                            "{{'FATHERS_NAME'|translate}} : " + Utils.getFullName(item.fatherFirstName, item.fatherMiddleName, item.fatherLastName)
                        ]
                    },
                    getTableConfig: function() {
                        return {
                            "serverPaginate": true,
                            "paginate": true,
                            "pageLength": 10
                        };
                    },
                    getColumns: function() {
                        return [{
                            title: 'NAME',
                            data: 'firstName',
                            render: function(data, type, full, meta) {
                                return (full.customerType === 'Individual' ? '<i class="fa fa-user" style="color:#777">&nbsp;</i> ' : '<i class="fa fa-industry" style="color:#777"></i> ') + data;
                            }
                        }, {
                            title: 'URN_NO',
                            data: 'urnNo'
                                // type: 'html',
                        }, {
                            title: 'CURRENT_STAGE',
                            data: 'currentStage'
                        }, {
                            title: 'BRANCH',
                            data: 'kgfsName'
                        }, {
                            title: 'CENTRE_CODE',
                            data: 'centreCode'
                        }, {
                            title: 'FATHERS_NAME',
                            data: 'fatherFirstName'
                        }]
                    },
                    getActions: function() {
                        return [{
                            name: "Enroll Customer",
                            desc: "",
                            icon: "fa fa-user-plus",
                            fn: function(item, index) {
                                $state.go("Page.Engine", {
                                    pageName: "ProfileInformation",
                                    pageId: item.id
                                });
                            },
                            isApplicable: function(item, index) {
                                if (item.currentStage === 'Stage01')
                                    return true;
                                return false;
                            }
                        }, {
                            name: "Do House Verification",
                            desc: "",
                            icon: "fa fa-house",
                            fn: function(item, index) {
                                $state.go("Page.Engine", {
                                    pageName: "AssetsLiabilitiesAndHealth",
                                    pageId: item.id
                                });
                            },
                            isApplicable: function(item, index) {
                                if (item.currentStage === 'Stage02')
                                    return true;
                                return false;
                            }
                        }, {
                            name: "Customer 360",
                            desc: "",
                            icon: "fa fa-user",
                            fn: function(item, index) {
                                $state.go("Page.Customer360", {
                                    pageId: item.id
                                });
                            },
                            isApplicable: function(item, index) {
                                if (item.currentStage === 'Completed')
                                    return true;
                                return false;
                            }
                        }];
                    }
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("loans.individual.documentTracking.PendingForVerification"),
["$log", "formHelper", "document","$state", "SessionStore", "Utils",
function($log, formHelper,document,$state, SessionStore, Utils){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "PENDING_FOR_VERIFICATION",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model.branch = branch;
			$log.info("Perding for verification page got initiated");
		},
		definition: {
			title: "SEARCH_CUSTOMERS",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"customer_name": {
						"title": "CUSTOMER_NAME",
						"type": "string"
					},
					"Business_name": {
						"title": "Business_NAME",
						"type": "string"
					},
					"Loan_id": {
						"title": "LOAN_ID",
						"type": "string"
					},
					"Hub": {
						"title": "HUB_NAME",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true
						}
					},
					"spoke_name": {
						"title": "SPOKE_NAME",
						"type": "string",
						"enumCode": "centre",
						"x-schema-form": {
							"type": "select",
							"filter": {
								"parentCode as branch": "model.branch"
							},
							"screenFilter": true
						}
					},
					"Received_Date":{
						"title":"RECEIVED_DATE",
						"type":"string",
						"x-schema-form": {
							"type":"date"
						}
					},
					"Batch_No": {
						"title": "BATCH_NO",
						"type": "string"
					},
					"POD_No": {
						"title": "POD_NO",
						"type": "string"
					},


				},
				"required":["Received_Date"]
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				var promise = document.searchPFD({
					'customername': searchOptions.customer_name,
					'businessname': searchOptions.Business_name,
					'loanid': searchOptions.LOAN_ID,
					'page': pageOpts.pageNo,
					'itemsPerPage': pageOpts.itemsPerPage,
					'spokename': searchOptions.spoke_name,
					'disbursementdate': searchOptions.disbursement_date,
					
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				selectable: false,
				expandable: true,
				listStyle: "table",
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						Utils.getFullName(item.firstName, item.middleName, item.lastName),
						'Customer ID : ' + item.id,
						item.urnNo?('URN : ' + item.urnNo):("{{'CURRENT_STAGE'|translate}} : " + (item.currentStage==='Stage02'?'House verification':
							(item.currentStage==='Stage01'?'Enrollment':item.currentStage))),
						"{{'BRANCH'|translate}} : " + item.kgfsName,
						"{{'CENTRE_CODE'|translate}} : " + item.centreCode,
						"{{'FATHERS_NAME'|translate}} : " + Utils.getFullName(item.fatherFirstName, item.fatherMiddleName, item.fatherLastName)
					]
				},
				getTableConfig: function() {
					return {
						"serverPaginate": true,
						"paginate": true,
						"pageLength": 10
					};
				},
				getColumns: function(){
					return [
						{
							title:'NAME',
							data: 'firstName',
							render: function(data, type, full, meta) {
								return (full.customerType==='Individual'?'<i class="fa fa-user" style="color:#777">&nbsp;</i> ':'<i class="fa fa-industry" style="color:#777"></i> ') + data;
							}
						},
						{
							title:'URN_NO',
							data: 'urnNo'
							// type: 'html',
						},
						{
							title:'CURRENT_STAGE',
							data: 'currentStage'
						},
						{
							title:'BRANCH',
							data: 'kgfsName'
						},
						{
							title:'CENTRE_CODE',
							data: 'centreCode'
						},
						{
							title:'FATHERS_NAME',
							data: 'fatherFirstName'
						}
					]
				},
				getActions: function(){
					return [
						{
							name: "Enroll Customer",
							desc: "",
							icon: "fa fa-user-plus",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"ProfileInformation",
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Stage01')
									return true;
								return false;
							}
						},
						{
							name: "Do House Verification",
							desc: "",
							icon: "fa fa-house",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"AssetsLiabilitiesAndHealth",
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Stage02')
									return true;
								return false;
							}
						},
						{
							name: "Customer 360",
							desc: "",
							icon: "fa fa-user",
							fn: function(item, index){
								$state.go("Page.Customer360",{
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Completed')
									return true;
								return false;
							}
						}
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("loans.individual.documentTracking.IncompleteDispatch"), ["$log", "$state", "document", "SessionStore", "formHelper", "$q", "irfProgressMessage",
"PageHelper", "Utils", "PagesDefinition", "Queries",


function($log,$state,document, SessionStore, formHelper, $q, irfProgressMessage,
    PageHelper, Utils, PagesDefinition, Queries) {

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "DISPATCH_INCOMPLETE_DOCUMENTS",
        "subTitle": "",
        initialize: function(model, form, formCtrl) {
            model.doc = model.doc || {};
            $log.info("Dispatch Incomplete documents is initiated ");
        },

        modelPromise: function(pageId, _model) {

        },

        offline: true,
        getOfflineDisplayItem: function(item, index) {
            return []
        },

         form: [{
                "type": "box",
                "title": "DISPATCH_DETAILS",
                "items": [{
                    key: "doc.Dispatch[].CourierSentDate",
                    title: "COURIER_SENT_DATE",
                    type:"date"
                }, {
                    key: "doc.Dispatch[].CourierCompanyName",
                    title: "CourierCompanyName",
                }, {
                    key: "doc.Dispatch[].PodNumber",
                    title: "POD_NUMBER",
                }, {
                    key: "doc.Dispatch[].BatchNumber",
                    title: "BATCHNUMBER",
                    readonly: true
                }, {
                    key: "doc.Dispatch[].Remarks",
                    title: "REMARKS",
                }]


            },


            {
                "type": "actionbox",
                "items": [{
                    "type": "submit",
                    "title": "Submit"
                }]
            },
        ],

        schema: function() {
            return document.getSchema().$promise;
        },

        actions: {
            preSave: function(model, form, formName) {
                $log.info("Inside save()");
                var deferred = $q.defer();
                if (model.doc) {
                    deferred.resolve();
                } else {
                    irfProgressMessage.pop('Dispatch-save', ' PodNumber is required', 3000);
                    deferred.reject();
                }
                return deferred.promise;
            },

            submit: function(model, form, formName) {
                $log.info("Inside submit()");
                irfProgressMessage.pop('Dispatch-save', 'Dispatch is successfully created', 3000);
                $log.warn(model);
            }
        }
    };

}]);
irf.pageCollection.factory(irf.page("loans.individual.documentTracking.PendingDispatch"), 
    ["$log", "$state", "document",  "SessionStore", "formHelper", "$q", "irfProgressMessage",
    "PageHelper", "Utils","PagesDefinition", "Queries",


    function($log, $state, document, SessionStore, formHelper, $q, irfProgressMessage,
        PageHelper, Utils,PagesDefinition, Queries) {

        var branch = SessionStore.getBranch();

        return {
            "type": "schema-form",
            "title": "DISPATCH_PENDING_DOCUMENTS",
            "subTitle": "",
            initialize: function(model, form, formCtrl) {
                model.doc = model.doc || {};
                $log.info("Dispatch pending documents is initiated ");
            },

            modelPromise: function(pageId, _model) {

            },

            offline: true,
            getOfflineDisplayItem: function(item, index) {
                return []
            },

            form: [{
                    "type": "box",
                    "title": "DISPATCH_DETAILS",
                    "items": [{
                        key: "doc.Dispatch[].CourierSentDate",
                        title: "COURIER_SENT_DATE",
                        type: "date"
                    }, {
                        key: "doc.Dispatch[].CourierCompanyName",
                        title: "CourierCompanyName",
                    }, {
                        key: "doc.Dispatch[].PodNumber",
                        title: "POD_NUMBER",
                    }, {
                        key: "doc.Dispatch[].BatchNumber",
                        title: "BATCHNUMBER",
                        readonly: true
                    }, {
                        key: "doc.Dispatch[].Remarks",
                        title: "REMARKS",
                    }]


                },


                {
                    "type": "actionbox",
                    "items": [{
                        "type": "submit",
                        "title": "Submit"
                    }]
                },
            ],

            schema: function() {
                return document.getSchema().$promise;
            },

            actions: {
                preSave: function(model, form, formName) {
                    $log.info("Inside save()");
                    var deferred = $q.defer();
                    if (model.doc) {
                        deferred.resolve();
                    } else {
                        irfProgressMessage.pop('LeadGeneration-save', 'Applicant Name is required', 3000);
                        deferred.reject();
                    }
                    return deferred.promise;
                },

                submit: function(model, form, formName) {
                    $log.info("Inside submit()");
                    irfProgressMessage.pop('LeadGeneration-save', 'Lead is successfully created', 3000);
                    $log.warn(model);
                }
            }
        };

    }
]);
irf.pageCollection.factory(irf.page("loans.individual.documentTracking.PendingForFiling"),
["$log", "formHelper", "document","$state", "SessionStore", "Utils",
function($log, formHelper, document,$state, SessionStore, Utils){
	var branch = SessionStore.getBranch();
	return {
		"type": "search-list",
		"title": "Pending_For_Filing",
		"subTitle": "",
		initialize: function (model, form, formCtrl) {
			model.branch = branch;
			$log.info("Perding for Filing page got initiated");
		},
		definition: {
			title: "Search Customers",
			searchForm: [
				"*"
			],
			searchSchema: {
				"type": 'object',
				"title": 'SearchOptions',
				"properties": {
					"customer_name": {
						"title": "CUSTOMER_NAME",
						"type": "string"
					},
					"Business_name": {
						"title": "Business_NAME",
						"type": "string"
					},
					"Loan_id": {
						"title": "LOAN_ID",
						"type": "string"
					},
					"Hub": {
						"title": "HUB_NAME",
						"type": "string",
						"enumCode": "branch",
						"x-schema-form": {
							"type": "select",
							"screenFilter": true
						}
					},
					"spoke_name": {
						"title": "SPOKE_NAME",
						"type": "string",
						"enumCode": "centre",
						"x-schema-form": {
							"type": "select",
							"filter": {
								"parentCode as branch": "model.branch"
							},
							"screenFilter": true
						}
					},
					"Batch_No": {
						"title": "BATCH_NO",
						"type": "string"
					},
					"POD_No": {
						"title": "POD_NO",
						"type": "string"
					},
					"Verification_date":{
						"title":"VERIFICATION_DATE",
						"type":"string",
						"x-schema-form": {
							"type":"date"
						}
					}

				},
				"required":["Batch_No"]
			},
			getSearchFormHelper: function() {
				return formHelper;
			},
			getResultsPromise: function(searchOptions, pageOpts){      /* Should return the Promise */

				var promise = document.searchPFD({
					'customername': searchOptions.customer_name,
					'businessname': searchOptions.Business_name,
					'loanid': searchOptions.LOAN_ID,
					'page': pageOpts.pageNo,
					'itemsPerPage': pageOpts.itemsPerPage,
					'hubname': searchOptions.hub,
					'spokename': searchOptions.spoke_name,
					'batchno': searchOptions.Batch_No,
					'podno': searchOptions.Pod_No,
					'verificationdate': searchOptions.Verification_date,	
				}).$promise;

				return promise;
			},
			paginationOptions: {
				"getItemsPerPage": function(response, headers){
					return 100;
				},
				"getTotalItemsCount": function(response, headers){
					return headers['x-total-count']
				}
			},
			listOptions: {
				selectable: false,
				expandable: true,
				listStyle: "table",
				itemCallback: function(item, index) {
				},
				getItems: function(response, headers){
					if (response!=null && response.length && response.length!=0){
						return response;
					}
					return [];
				},
				getListItem: function(item){
					return [
						Utils.getFullName(item.firstName, item.middleName, item.lastName),
						'Customer ID : ' + item.id,
						item.urnNo?('URN : ' + item.urnNo):("{{'CURRENT_STAGE'|translate}} : " + (item.currentStage==='Stage02'?'House verification':
							(item.currentStage==='Stage01'?'Enrollment':item.currentStage))),
						"{{'BRANCH'|translate}} : " + item.kgfsName,
						"{{'CENTRE_CODE'|translate}} : " + item.centreCode,
						"{{'FATHERS_NAME'|translate}} : " + Utils.getFullName(item.fatherFirstName, item.fatherMiddleName, item.fatherLastName)
					]
				},
				getTableConfig: function() {
					return {
						"serverPaginate": true,
						"paginate": true,
						"pageLength": 10
					};
				},
				getColumns: function(){
					return [
						{
							title:'NAME',
							data: 'firstName',
							render: function(data, type, full, meta) {
								return (full.customerType==='Individual'?'<i class="fa fa-user" style="color:#777">&nbsp;</i> ':'<i class="fa fa-industry" style="color:#777"></i> ') + data;
							}
						},
						{
							title:'URN_NO',
							data: 'urnNo'
							// type: 'html',
						},
						{
							title:'CURRENT_STAGE',
							data: 'currentStage'
						},
						{
							title:'BRANCH',
							data: 'kgfsName'
						},
						{
							title:'CENTRE_CODE',
							data: 'centreCode'
						},
						{
							title:'FATHERS_NAME',
							data: 'fatherFirstName'
						}
					]
				},
				getActions: function(){
					return [
						{
							name: "Enroll Customer",
							desc: "",
							icon: "fa fa-user-plus",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"ProfileInformation",
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Stage01')
									return true;
								return false;
							}
						},
						{
							name: "Do House Verification",
							desc: "",
							icon: "fa fa-house",
							fn: function(item, index){
								$state.go("Page.Engine",{
									pageName:"AssetsLiabilitiesAndHealth",
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Stage02')
									return true;
								return false;
							}
						},
						{
							name: "Customer 360",
							desc: "",
							icon: "fa fa-user",
							fn: function(item, index){
								$state.go("Page.Customer360",{
									pageId:item.id
								});
							},
							isApplicable: function(item, index){
								if (item.currentStage==='Completed')
									return true;
								return false;
							}
						}
					];
				}
			}
		}
	};
}]);

irf.pageCollection.factory(irf.page("loans.individual.documentTracking.SuccessfullyFiled"),
 ["$log", "formHelper", "document", "$state", "SessionStore", "Utils",
    function($log, formHelper,document, $state, SessionStore, Utils) {
        var branch = SessionStore.getBranch();
        return {
            "type": "search-list",
            "title": "SUCCESSFULLY_FILED_DOCUMENTS",
            "subTitle": "",
            initialize: function(model, form, formCtrl) {
                model.branch = branch;
                $log.info("Successfully filed page got initiated");
            },
            definition: {
                title: "SEARCH_CUSTOMERS",
                searchForm: [
                    "*"
                ],
                searchSchema: {
                    "type": 'object',
                    "title": 'SearchOptions',
                    "properties": {
                        "customer_name": {
                            "title": "CUSTOMER_NAME",
                            "type": "string"
                        },
                        "Business_name": {
                            "title": "Business_NAME",
                            "type": "string"
                        },
                        "Loan_id": {
                            "title": "LOAN_ID",
                            "type": "string"
                        },
                        "Hub": {
                            "title": "HUB_NAME",
                            "type": "string",
                            "enumCode": "branch",
                            "x-schema-form": {
                                "type": "select",
                                "screenFilter": true
                            }
                        },
                        "spoke_name": {
                            "title": "SPOKE_NAME",
                            "type": "string",
                            "enumCode": "centre",
                            "x-schema-form": {
                                "type": "select",
                                "filter": {
                                    "parentCode as branch": "model.branch"
                                },
                                "screenFilter": true
                            }
                        },
                        "Filing_Id": {
                            "title": "FILING_ID",
                            "type": "string"
                        },
                        "Filing_Date" :{
                            "title": "FILING_DATE",
                            "type": "string"
                        }
                    },
                    "required": ["Loan_id"]
                },
                getSearchFormHelper: function() {
                    return formHelper;
                },
                getResultsPromise: function(searchOptions, pageOpts) { /* Should return the Promise */

                    var promise = document.searchPFD({
                        'customername': searchOptions.customer_name,
                        'businessname': searchOptions.Business_name,
                        'loanid': searchOptions.LOAN_ID,
                        'page': pageOpts.pageNo,
                        'itemsPerPage': pageOpts.itemsPerPage,
                        'spokename': searchOptions.spoke_name,
                        

                    }).$promise;

                    return promise;
                },
                paginationOptions: {
                    "getItemsPerPage": function(response, headers) {
                        return 100;
                    },
                    "getTotalItemsCount": function(response, headers) {
                        return headers['x-total-count']
                    }
                },
                listOptions: {
                    selectable: false,
                    expandable: true,
                    listStyle: "table",
                    itemCallback: function(item, index) {},
                    getItems: function(response, headers) {
                        if (response != null && response.length && response.length != 0) {
                            return response;
                        }
                        return [];
                    },
                    getListItem: function(item) {
                        return [
                            Utils.getFullName(item.firstName, item.middleName, item.lastName),
                            'Customer ID : ' + item.id,
                            item.urnNo ? ('URN : ' + item.urnNo) : ("{{'CURRENT_STAGE'|translate}} : " + (item.currentStage === 'Stage02' ? 'House verification' :
                                (item.currentStage === 'Stage01' ? 'Enrollment' : item.currentStage))),
                            "{{'BRANCH'|translate}} : " + item.kgfsName,
                            "{{'CENTRE_CODE'|translate}} : " + item.centreCode,
                            "{{'FATHERS_NAME'|translate}} : " + Utils.getFullName(item.fatherFirstName, item.fatherMiddleName, item.fatherLastName)
                        ]
                    },
                    getTableConfig: function() {
                        return {
                            "serverPaginate": true,
                            "paginate": true,
                            "pageLength": 10
                        };
                    },
                    getColumns: function() {
                        return [{
                            title: 'NAME',
                            data: 'firstName',
                            render: function(data, type, full, meta) {
                                return (full.customerType === 'Individual' ? '<i class="fa fa-user" style="color:#777">&nbsp;</i> ' : '<i class="fa fa-industry" style="color:#777"></i> ') + data;
                            }
                        }, {
                            title: 'URN_NO',
                            data: 'urnNo'
                                // type: 'html',
                        }, {
                            title: 'CURRENT_STAGE',
                            data: 'currentStage'
                        }, {
                            title: 'BRANCH',
                            data: 'kgfsName'
                        }, {
                            title: 'CENTRE_CODE',
                            data: 'centreCode'
                        }, {
                            title: 'FATHERS_NAME',
                            data: 'fatherFirstName'
                        }]
                    },
                    getActions: function() {
                        return [{
                            name: "Enroll Customer",
                            desc: "",
                            icon: "fa fa-user-plus",
                            fn: function(item, index) {
                                $state.go("Page.Engine", {
                                    pageName: "ProfileInformation",
                                    pageId: item.id
                                });
                            },
                            isApplicable: function(item, index) {
                                if (item.currentStage === 'Stage01')
                                    return true;
                                return false;
                            }
                        }, {
                            name: "Do House Verification",
                            desc: "",
                            icon: "fa fa-house",
                            fn: function(item, index) {
                                $state.go("Page.Engine", {
                                    pageName: "AssetsLiabilitiesAndHealth",
                                    pageId: item.id
                                });
                            },
                            isApplicable: function(item, index) {
                                if (item.currentStage === 'Stage02')
                                    return true;
                                return false;
                            }
                        }, {
                            name: "Customer 360",
                            desc: "",
                            icon: "fa fa-user",
                            fn: function(item, index) {
                                $state.go("Page.Customer360", {
                                    pageId: item.id
                                });
                            },
                            isApplicable: function(item, index) {
                                if (item.currentStage === 'Completed')
                                    return true;
                                return false;
                            }
                        }];
                    }
                }
            }
        };
    }
]);
irf.pageCollection.factory(irf.page("loans.individual.documentTracking.DocumentFiling"),
  ["$log", "$state", "document", "SessionStore", "formHelper", "$q", "irfProgressMessage",
    "PageHelper", "Utils", "PagesDefinition", "Queries",


   function($log, $state,document, SessionStore, formHelper, $q, irfProgressMessage,
    PageHelper, Utils, PagesDefinition, Queries) {

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "DOCUMENT_FILING",
        "subTitle": "",
        initialize: function(model, form, formCtrl) {
            model.doc = model.doc || {};
            $log.info("filing documents is initiated ");
        },

        modelPromise: function(pageId, _model) {

        },

        offline: true,
        getOfflineDisplayItem: function(item, index) {
            return []
        },

         form: [

           {
                "type": "box",
                "title": "Document_DETAILS",
                "items": [{
                    key: "doc.CustomerName",
                    title: "CUSTOMER_NAME"
                }, {
                    key: "doc.BusinessName",
                    title: "BUSINESS_NAME"
                }, {
                    key: "doc.LoanId",
                    title: "LOAN_ID"
                }, {
                    key: "doc.DocumentName",
                    title: "DOCUMENT_NAME"
                }, {
                    key: "doc.hubName",
                    title: "HUB_NAME"
                },
                {
                    key: "doc.spokeName",
                    title: "SPOKE_NAME"
                },
                {
                    key: "doc.Disbursementdate",
                    title: "DISBURSEMENT_DATE",
                    type:"date"
                },
                ]


            },


           {
              
                "type": "box",
                "title": "DISPATCH_DETAILS",
                "items": [{
                    key: "doc.Dispatch[].CourierSentDate",
                    title: "COURIER_SENT_DATE"
                }, {
                    key: "doc.Dispatch[].CourierCompanyName",
                    title: "COURIER_COMPANY_NAME"
                }, {
                    key: "doc.Dispatch[].PodNumber",
                    title: "POD_NUMBER"
                }, {
                    key: "doc.Dispatch[].BatchNumber",
                    title: "BATCHNUMBER",
                    readonly: true
                }, 
                {
                    key: "doc.ReceivedDate",
                    title: "RECEIVED_DATE",
                    type:"date"
                },
                {
                    key: "doc.VerificationDate",
                    title: "VERIFIED_DATE",
                    type:"date"
                },
                {
                    key: "doc.FilingDate",
                    title: "FILING_DATE",
                    type:"date"
                },
                {
                    key: "doc.Dispatch[].Remarks",
                    title: "REMARKS",
                }
                ]


            },


            {
                "type": "actionbox",
                "items": [{
                    "type": "submit",
                    "title": "File"
                },
                 {
                    "type": "submit",
                    "title": "Reject"
                }]
            },
        ],

        schema: function() {
            return document.getSchema().$promise;
        },

        actions: {
            preSave: function(model, form, formName) {
                $log.info("Inside save()");
                var deferred = $q.defer();
                if (model.doc) {
                    deferred.resolve();
                } else {
                    irfProgressMessage.pop('LeadGeneration-save', 'Applicant Name is required', 3000);
                    deferred.reject();
                }
                return deferred.promise;
            },

            submit: function(model, form, formName) {
                $log.info("Inside submit()");
                irfProgressMessage.pop('LeadGeneration-save', 'Lead is successfully created', 3000);
                $log.warn(model);
            }
        }
    };

}]);
irf.pageCollection.factory(irf.page("loans.individual.documentTracking.DocumentVerification"),
 ["$log", "$state", "document", "SessionStore", "formHelper", "$q", "irfProgressMessage",
    "PageHelper", "Utils", "PagesDefinition", "Queries",


   function($log, $state, document, SessionStore, formHelper, $q, irfProgressMessage,
    PageHelper, Utils, PagesDefinition, Queries) {

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "DOCUMENT_VERIFICATION",
        "subTitle": "",
        initialize: function(model, form, formCtrl) {
            model.doc = model.doc || {};
            $log.info("Dispatch Incomplete documents is initiated ");
        },

        modelPromise: function(pageId, _model) {

        },

        offline: true,
        getOfflineDisplayItem: function(item, index) {
            return []
        },

         form: [
         {
                "type": "box",
                "title": "Document_DETAILS",
                "items": [{
                    key: "doc.CustomerName",
                    title: "CUSTOMER_NAME"
                }, {
                    key: "doc.BusinessName",
                    title: "BUSINESS_NAME"
                }, {
                    key: "doc.LoanId",
                    title: "LOAN_ID"
                }, {
                    key: "doc.DocumentName",
                    title: "DOCUMENT_NAME"
                }, {
                    key: "doc.hubName",
                    title: "HUB_NAME"
                },
                {
                    key: "doc.spokeName",
                    title: "SPOKE_NAME"
                },
                {
                    key: "doc.Disbursementdate",
                    title: "DISBURSEMENT_DATE",
                    type:"date"
                },
                ]


            },
            {
                "type": "box",
                "title": "DISPATCH_DETAILS",
                "items": [{
                    key: "doc.Dispatch[].CourierSentDate",
                    title: "COURIER_SENT_DATE"
                }, {
                    key: "doc.Dispatch[].CourierCompanyName",
                    title: "COURIER_COMPANY_NAME"
                }, {
                    key: "doc.Dispatch[].PodNumber",
                    title: "POD_NUMBER"
                }, {
                    key: "doc.Dispatch[].BatchNumber",
                    title: "BATCHNUMBER",
                    readonly: true
                }, 
                {
                    key: "doc.ReceivedDate",
                    title: "RECEIVED_DATE",
                    type:"date"
                },
                {
                    key: "doc.VerificationDate",
                    title: "VERIFIED_DATE",
                    type:"date"
                },
                {
                    key: "doc.Dispatch[].Remarks",
                    title: "REMARKS",
                }
                ]
            },


            {
                "type": "actionbox",
                "items": [{
                    "type": "submit",
                    "title": "Accept"
                },
                {
                    "type": "submit",
                    "title": "Reject"
                }]
            },
        ],

        schema: function() {
            return document.getSchema().$promise;
        },

        actions: {
            preSave: function(model, form, formName) {
                $log.info("Inside save()");
                var deferred = $q.defer();
                if (model.doc) {
                    deferred.resolve();
                } else {
                    irfProgressMessage.pop('LeadGeneration-save', 'Applicant Name is required', 3000);
                    deferred.reject();
                }
                return deferred.promise;
            },

            submit: function(model, form, formName) {
                $log.info("Inside submit()");
                irfProgressMessage.pop('LeadGeneration-save', 'Lead is successfully created', 3000);
                $log.warn(model);
            }
        }
    };

}]);
irf.pageCollection.factory(irf.page("loans.individual.writeoff.WriteOffQueue"),
["$log", "formHelper", "Enrollment", "$state", "SessionStore", "$q", "LoanAccount", "entityManager",
function($log, formHelper, Enrollment, $state, SessionStore, $q, LoanAccount, EntityManager){
    return {
        "type": "search-list",
        "title": "PENDING_WRITEOFF_QUEUE",
        "subTitle": "",
        initialize: function (model, form, formCtrl) {
            $log.info("search-list sample got initialized");
            model.branchName = SessionStore.getBranch();
            model.stage = 'WriteOff';
            console.log(model);
        },

        offline: false,

        definition: {
            title: "SEARCH",
            autoSearch: false,
            sorting:true,
            sortByColumns:{
                "days":"OD Days"
            },
            searchForm: [
                "*"
            ],
            searchSchema: {
                "type": 'object',
                "title": "VIEW_LOANS",
                "required":["branch"],
                "properties": {

                    "loan_product": {
                        "title": "Loan Product",
                        "type": "string",
                        "x-schema-form": {
                            "type": "select",
                            "enumCode": "loan_product"
                        }
                    },
                    "branchName": {
                        "title": "BRANCH_NAME",
                        "type": "integer",
                        "x-schema-form": {
                            "type": "select"
                        },
                        "enumCode": "branch_id"
                    }
                }
            },
            getSearchFormHelper: function() {
                return formHelper;
            },
            getResultsPromise: function(searchOptions, pageOpts){
                return LoanAccount.writeOffQueue({
                    'Branches': searchOptions.branchName
                }).$promise;

            },
            paginationOptions: {
                "viewMode": "page",
                "getItemsPerPage": function(response, headers){
                    return 20;
                },
                "getTotalItemsCount": function(response, headers){
                    return headers['x-total-count']
                }
            },
            listOptions: {
                itemCallback: function(item, index) {
                    $log.info(item);
                },
                getItems: function(response, headers){
                    if (response!=null && response.length && response.length!=0){
                        return response;
                    }
                    return [];
                },
                getListItem: function(item){
                    return [
                        "<em>Account ID:" + item.accountId + " | Customer Name:" + item.customerName + " | Customer URN:" + item.description + "</em>",
                        "<em>Total Demand Due:" + item.amount1 + " | Principal Due:" + item.part1 + " | Interest Due:" + item.part2 + "</em>",
                        "<em>Product Code:" + item.param1 + "</em>"
                    ]
                },
                getActions: function(){
                    return [
                        {
                            name: "WRITE_OFF",
                            desc: "",
                            fn: function(item, index){
                                $log.info("Redirecting");
                                EntityManager.setModel("loans.individual.writeoff.WriteOffExecution",{_loanAccount:item});
                                $state.go('Page.Engine', {pageName: 'loans.individual.writeoff.WriteOffExecution', pageId: item.loanId});
                            },
                            isApplicable: function(item, index){
                                return true;
                            }
                        }
                    ];
                }
            }
        }
    };
}]);

irf.pageCollection.factory(irf.page("loans.individual.writeoff.WriteOffExecution"),
["$log", "Enrollment", "SessionStore", "$state", "SchemaResource", "LoanAccount", "PageHelper", 
function($log, Enrollment, SessionStore, $state, SchemaResource, LoanAccount, PageHelper){

    var branch = SessionStore.getBranch();

    return {
        "type": "schema-form",
        "title": "WRITE_OFF",
        initialize: function (model, form, formCtrl) {
            $log.info("WriteOff Screen got initialized");
            model.loanAccount = model.loanAccount || [];
            if (model._loanAccount ) {
                model.loanAccount = model._loanAccount;
                model.loanAccount.accountNumber = model._loanAccount.accountId;
                model.loanAccount.writeOffDate = model._loanAccount.transactionDate;
            }
            model.loanAccount.remarks = "";

        },
        offline: false,
        getOfflineDisplayItem: function(item, index){

        },
        form: [{
            "type": "box",
            "title": "WRITE_OFF", // sample label code
            "colClass": "col-sm-12", // col-sm-6 is default, optional

            "items": [
            /*
                {
                    type:"section",
                    html:"<pre>{{model._loanAccount}}</pre>"
                },
                {
                    type:"section",
                    html:"<pre>{{model.loanAccount}}</pre>"
                },
            */
                {
                    "title": "ACCOUNT_ID",
                    "key": "loanAccount.accountNumber",
                    "readonly": true
                },
                {
                    "title": "CUSTOMER_NAME",
                    "key": "loanAccount.customerName",
                    "readonly": true
                },
                {
                    "title": "CUSTOMER_URN",
                    "key": "loanAccount.description",
                    "readonly": true
                },
                {
                    "title": "TOTAL_DEMAND_DUE",
                    "key": "loanAccount.amount1",
                    "readonly": true
                },
                {
                    "title": "PRINCIPAL_DUE",
                    "key": "loanAccount.part1",
                    "readonly": true
                },
                {
                    "title": "INTEREST_DUE",
                    "key": "loanAccount.part2",
                    "readonly": true
                },
                {
                    "title": "PRODUCT_CODE",
                    "key": "loanAccount.param1",
                    "readonly": true
                },
                {
                    "title": "WRITE_OFF_DATE",
                    "key": "loanAccount.writeOffDate",
                    "type": "date",
                    "required": true
                },
                {
                    "title": "REMARKS",
                    "key": "loanAccount.remarks",
                    "required": true
                },
                {
                    "type": "submit",
                    "title": "WRITE_OFF"
                }
            ]
        }],
        schema: function() {
            return SchemaResource.getLoanAccountSchema().$promise;
        },
        actions: {
            submit: function(model, form, formName){
                // Disbursement Date should be >= Sanction Date + 30 days
                // if (model.loanAccount.sanctionDate <= model.loanAccount.scheduledDisbursementDate-30)
                {
                    // Update information in DB
                    PageHelper.showLoader();
                    LoanAccount.writeOff({
                        'accountNumber': model.loanAccount.accountNumber,
                        'writeOffDate' : model.loanAccount.writeOffDate,
                        'remarks' : model.loanAccount.remarks
                    }, function(response) {
                        PageHelper.hideLoader();
                        PageHelper.showProgress("page-init", "Done.", 2000);
                        $log.info("Redirecting");
                        $state.go('Page.Engine', {pageName: 'loans.individual.writeoff.WriteOffQueue', pageId: ''});
                    }, function(errorResponse) {
                        PageHelper.hideLoader();
                        PageHelper.showErrors(errorResponse);
                    });
                }
            }
        }
    };
}]);
